import { performance } from "node:perf_hooks";
import type { Readable } from "node:stream";
import { createConfig } from "@redocly/openapi-core";
import type { RawGovernanceConfig } from "@redocly/openapi-core/lib/config/config";
import type ts from "typescript";
import { validateAndBundle } from "./lib/redoc.js";
import { debug, resolveRef, scanDiscriminators } from "./lib/utils.js";
import transformSchema from "./transform/index.js";
import type { GlobalContext, OpenAPI3, OpenAPITSOptions } from "./types.js";

export * from "./lib/ts.js";
export * from "./lib/utils.js";
export { default as transformComponentsObject } from "./transform/components-object.js";
export { default as transformHeaderObject } from "./transform/header-object.js";
export { default as transformSchema } from "./transform/index.js";
export { default as transformMediaTypeObject } from "./transform/media-type-object.js";
export * from "./transform/operation-object.js";
export { default as transformOperationObject } from "./transform/operation-object.js";
export { default as transformParameterObject } from "./transform/parameter-object.js";
export * from "./transform/path-item-object.js";
export { default as transformPathItemObject } from "./transform/path-item-object.js";
export { default as transformPathsObject } from "./transform/paths-object.js";
export { default as transformRequestBodyObject } from "./transform/request-body-object.js";
export { default as transformResponseObject } from "./transform/response-object.js";
export { default as transformResponsesObject } from "./transform/responses-object.js";
export * from "./transform/schema-object.js";
export { default as transformSchemaObject } from "./transform/schema-object.js";
export * from "./types.js";

export const COMMENT_HEADER = `/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

`;

/**
 * Convert an OpenAPI schema to TypesScript AST
 * @param {string|URL|object|Readable} source OpenAPI schema source:
 *   - YAML: string
 *   - JSON: parsed object
 *   - URL: URL to a YAML or JSON file (local or remote)
 *   - Readable: Readable stream of YAML or JSON
 */
export default async function openapiTS(
  source: string | URL | OpenAPI3 | Buffer | Readable,
  options: OpenAPITSOptions = {} as Partial<OpenAPITSOptions>,
): Promise<ts.Node[]> {
  if (!source) {
    throw new Error("Empty schema. Please specify a URL, file path, or Redocly Config");
  }

  const redoc =
    options.redocly ??
    (await createConfig({
      ...REDOCLY_MINIMAL_CONFIG,
      rules: {
        ...REDOCLY_MINIMAL_CONFIG.rules,
        "operation-operationId-unique": { severity: "error" }, // throw error on duplicate operationIDs
      },
    }));

  const schema = await validateAndBundle(source, {
    redoc,
    cwd: options.cwd instanceof URL ? options.cwd : new URL(`file://${options.cwd ?? process.cwd()}/`),
    silent: options.silent ?? false,
  });

  const ctx: GlobalContext = {
    additionalProperties: options.additionalProperties ?? false,
    alphabetize: options.alphabetize ?? false,
    arrayLength: options.arrayLength ?? false,
    defaultNonNullable: options.defaultNonNullable ?? true,
    discriminators: scanDiscriminators(schema, options),
    emptyObjectsUnknown: options.emptyObjectsUnknown ?? false,
    enum: options.enum ?? false,
    enumValues: options.enumValues ?? false,
    dedupeEnums: options.dedupeEnums ?? false,
    excludeDeprecated: options.excludeDeprecated ?? false,
    exportType: options.exportType ?? false,
    immutable: options.immutable ?? false,
    rootTypes: options.rootTypes ?? false,
    rootTypesNoSchemaPrefix: options.rootTypesNoSchemaPrefix ?? false,
    injectFooter: [],
    pathParamsAsTypes: options.pathParamsAsTypes ?? false,
    postTransform: typeof options.postTransform === "function" ? options.postTransform : undefined,
    propertiesRequiredByDefault: options.propertiesRequiredByDefault ?? false,
    redoc,
    silent: options.silent ?? false,
    inject: options.inject ?? undefined,
    transform: typeof options.transform === "function" ? options.transform : undefined,
    transformProperty: typeof options.transformProperty === "function" ? options.transformProperty : undefined,
    makePathsEnum: options.makePathsEnum ?? false,
    generatePathParams: options.generatePathParams ?? false,
    resolve($ref) {
      return resolveRef(schema, $ref, { silent: options.silent ?? false });
    },
  };

  const transformT = performance.now();
  const result = transformSchema(schema, ctx);
  debug("Completed AST transformation for entire document", "ts", performance.now() - transformT);

  return result;
}

export const REDOCLY_MINIMAL_CONFIG: RawGovernanceConfig<"built-in"> = {
  rules: {
    struct: "error",
    "no-unresolved-refs": "error",
  },
  oas2Rules: {
    "boolean-parameter-prefixes": "off",
    "info-contact": "off",
    "info-license": "off",
    "info-license-strict": "off",
    "no-path-trailing-slash": "warn",
    "no-identical-paths": "warn",
    "no-ambiguous-paths": "warn",
    "no-invalid-schema-examples": "off",
    "no-invalid-parameter-examples": "off",
    "no-http-verbs-in-paths": "off",
    "no-enum-type-mismatch": "warn",
    "no-required-schema-properties-undefined": "warn",
    "no-schema-type-mismatch": "warn",
    "operation-summary": "warn",
    "operation-operationId": "warn",
    "operation-operationId-unique": "warn",
    "operation-operationId-url-safe": "warn",
    "operation-description": "off",
    "operation-2xx-response": "warn",
    "operation-4xx-response": "off",
    "operation-parameters-unique": "warn",
    "operation-tag-defined": "off",
    "operation-singular-tag": "off",
    "parameter-description": "off",
    "path-declaration-must-exist": "warn",
    "path-not-include-query": "warn",
    "path-parameters-defined": "warn",
    "paths-kebab-case": "off",
    "path-http-verbs-order": "off",
    "path-params-defined": "off",
    "path-segment-plural": "off",
    "required-string-property-missing-min-length": "off",
    "response-contains-header": "off",
    "request-mime-type": "off",
    "response-contains-property": "off",
    "response-mime-type": "off",
    "security-defined": "warn",
    "spec-strict-refs": "off",
    "scalar-property-missing-example": "off",
    "tag-description": "warn",
    "tags-alphabetical": "off",
    "no-duplicated-tag-names": "off",
  },
  oas3_0Rules: {
    "array-parameter-serialization": "off",
    "boolean-parameter-prefixes": "off",
    "component-name-unique": "off",
    "info-contact": "off",
    "info-license": "off",
    "info-license-strict": "off",
    "no-ambiguous-paths": "warn",
    "no-path-trailing-slash": "warn",
    "no-identical-paths": "warn",
    "no-invalid-schema-examples": "off",
    "no-invalid-parameter-examples": "off",
    "no-http-verbs-in-paths": "off",
    "no-enum-type-mismatch": "warn",
    "no-required-schema-properties-undefined": "warn",
    "no-schema-type-mismatch": "warn",
    "no-invalid-media-type-examples": {
      severity: "warn",
      allowAdditionalProperties: false,
    },
    "no-server-example.com": "warn",
    "no-server-trailing-slash": "error",
    "no-empty-servers": "warn",
    "no-example-value-and-externalValue": "warn",
    "no-unused-components": "warn",
    "no-undefined-server-variable": "warn",
    "no-server-variables-empty-enum": "error",
    "nullable-type-sibling": "warn",
    "operation-summary": "warn",
    "operation-operationId": "warn",
    "operation-operationId-unique": "warn",
    "operation-operationId-url-safe": "warn",
    "operation-description": "off",
    "operation-2xx-response": "warn",
    "operation-4xx-response": "off",
    "operation-4xx-problem-details-rfc7807": "off",
    "operation-parameters-unique": "warn",
    "operation-tag-defined": "off",
    "operation-singular-tag": "off",
    "parameter-description": "off",
    "path-declaration-must-exist": "warn",
    "path-not-include-query": "warn",
    "path-parameters-defined": "warn",
    "paths-kebab-case": "off",
    "path-http-verbs-order": "off",
    "path-params-defined": "off",
    "path-segment-plural": "off",
    "required-string-property-missing-min-length": "off",
    "response-contains-header": "off",
    "request-mime-type": "off",
    "response-contains-property": "off",
    "response-mime-type": "off",
    "security-defined": "warn",
    "spec-strict-refs": "off",
    "scalar-property-missing-example": "off",
    "spec-components-invalid-map-name": "warn",
    "tag-description": "warn",
    "tags-alphabetical": "off",
    "no-duplicated-tag-names": "off",
  },
  oas3_1Rules: {
    "array-parameter-serialization": "off",
    "boolean-parameter-prefixes": "off",
    "component-name-unique": "off",
    "info-contact": "off",
    "info-license": "off",
    "info-license-strict": "off",
    "no-path-trailing-slash": "warn",
    "no-identical-paths": "warn",
    "no-ambiguous-paths": "warn",
    "no-invalid-schema-examples": "off",
    "no-invalid-parameter-examples": "off",
    "no-http-verbs-in-paths": "off",
    "no-enum-type-mismatch": "warn",
    "no-required-schema-properties-undefined": "warn",
    "no-schema-type-mismatch": "warn",
    "no-invalid-media-type-examples": "warn",
    "no-server-example.com": "warn",
    "no-server-trailing-slash": "error",
    "no-empty-servers": "warn",
    "no-example-value-and-externalValue": "warn",
    "no-unused-components": "warn",
    "no-undefined-server-variable": "warn",
    "no-server-variables-empty-enum": "error",
    "operation-summary": "warn",
    "operation-operationId": "warn",
    "operation-operationId-unique": "warn",
    "operation-operationId-url-safe": "warn",
    "operation-description": "off",
    "operation-2xx-response": "warn",
    "operation-4xx-response": "off",
    "operation-4xx-problem-details-rfc7807": "off",
    "operation-parameters-unique": "warn",
    "operation-tag-defined": "off",
    "operation-singular-tag": "off",
    "parameter-description": "off",
    "path-declaration-must-exist": "warn",
    "path-not-include-query": "warn",
    "path-parameters-defined": "warn",
    "paths-kebab-case": "off",
    "path-http-verbs-order": "off",
    "path-params-defined": "off",
    "path-segment-plural": "off",
    "required-string-property-missing-min-length": "off",
    "response-contains-header": "off",
    "request-mime-type": "off",
    "response-contains-property": "off",
    "response-mime-type": "off",
    "security-defined": "warn",
    "spec-strict-refs": "off",
    "scalar-property-missing-example": "off",
    "spec-components-invalid-map-name": "warn",
    "tag-description": "warn",
    "tags-alphabetical": "off",
    "no-duplicated-tag-names": "off",
  },
  async2Rules: {
    "channels-kebab-case": "off",
    "info-contact": "off",
    "info-license-strict": "off",
    "no-channel-trailing-slash": "off",
    "operation-operationId": "warn",
    "tag-description": "warn",
    "tags-alphabetical": "off",
    "no-duplicated-tag-names": "off",
    "no-required-schema-properties-undefined": "warn",
    "no-enum-type-mismatch": "warn",
    "no-schema-type-mismatch": "warn",
  },
  async3Rules: {
    "channels-kebab-case": "off",
    "info-contact": "off",
    "info-license-strict": "off",
    "no-channel-trailing-slash": "off",
    "operation-operationId": "warn",
    "tag-description": "warn",
    "tags-alphabetical": "off",
    "no-duplicated-tag-names": "off",
    "no-required-schema-properties-undefined": "warn",
    "no-enum-type-mismatch": "warn",
    "no-schema-type-mismatch": "warn",
  },
  arazzo1Rules: {
    "criteria-unique": "off",
    "no-criteria-xpath": "off",
    "parameters-unique": "off",
    "requestBody-replacements-unique": "off",
    "sourceDescription-type": "off",
    "sourceDescriptions-not-empty": "off",
    "step-onSuccess-unique": "off",
    "step-onFailure-unique": "off",
    "stepId-unique": "error",
    "sourceDescription-name-unique": "off",
    "respect-supported-versions": "off",
    "workflowId-unique": "error",
    "workflow-dependsOn": "off",
    "no-x-security-scheme-name-without-openapi": "off",
    "x-security-scheme-required-values": "off",
    "no-x-security-scheme-name-in-workflow": "off",
    "no-required-schema-properties-undefined": "warn",
    "no-enum-type-mismatch": "warn",
    "no-schema-type-mismatch": "warn",
  },
  overlay1Rules: {
    "info-contact": "off",
  },
};
