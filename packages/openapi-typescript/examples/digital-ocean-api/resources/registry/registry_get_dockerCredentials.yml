operationId: registry_get_dockerCredentials

summary: Get Docker Credentials for Container Registry

description: |
  In order to access your container registry with the Docker client or from a
  Kubernetes cluster, you will need to configure authentication. The necessary
  JSON configuration can be retrieved by sending a GET request to
  `/v2/registry/docker-credentials`.

  The response will be in the format of a Docker `config.json` file. To use the
  config in your Kubernetes cluster, create a Secret with:

      kubectl create secret generic docr \
        --from-file=.dockerconfigjson=config.json \
        --type=kubernetes.io/dockerconfigjson

  By default, the returned credentials have read-only access to your registry
  and cannot be used to push images. This is appropriate for most Kubernetes
  clusters. To retrieve read/write credentials, suitable for use with the Docker
  client or in a CI system, read_write may be provided as query parameter. For
  example: `/v2/registry/docker-credentials?read_write=true`

  By default, the returned credentials will not expire. To retrieve credentials
  with an expiry set, expiry_seconds may be provided as a query parameter. For
  example: `/v2/registry/docker-credentials?expiry_seconds=3600` will return
  credentials that expire after one hour.

tags:
  - Container Registry

parameters:
  - $ref: 'parameters.yml#/registry_expiry_seconds'
  - $ref: 'parameters.yml#/registry_read_write'

responses:
  '200':
    $ref: 'responses/docker_credentials.yml'

  '401':
    $ref: '../../shared/responses/unauthorized.yml'

  '429':
    $ref: '../../shared/responses/too_many_requests.yml'

  '500':
    $ref: '../../shared/responses/server_error.yml'

  default:
    $ref: '../../shared/responses/unexpected_error.yml'

x-codeSamples:
  - $ref: 'examples/curl/registry_get_dockerCredentials.yml'
  - $ref: 'examples/python/registry_get_dockerCredentials.yml'

security:
  - bearer_auth:
    - 'registry:read'
    - 'registry:update'
