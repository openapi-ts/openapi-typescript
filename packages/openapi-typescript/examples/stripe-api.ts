/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve account
         * @description <p>Retrieves the details of an account.</p>
         */
        get: operations["GetAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account_links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an account link
         * @description <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
         */
        post: operations["PostAccountLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account_sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an Account Session
         * @description <p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.</p>
         */
        post: operations["PostAccountSessions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all connected accounts
         * @description <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
         */
        get: operations["GetAccounts"];
        put?: never;
        /** @description <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
         *     To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
         *
         *     <p>If you’ve already collected information for your connected accounts, you <a href="/docs/connect/best-practices#onboarding">can prefill that information</a> when
         *     creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding.
         *     You can prefill any information on the account.</p> */
        post: operations["PostAccounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve account
         * @description <p>Retrieves the details of an account.</p>
         */
        get: operations["GetAccountsAccount"];
        put?: never;
        /**
         * Update an account
         * @description <p>Updates a <a href="/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are
         *     left unchanged.</p>
         *
         *     <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
         *     is <code>application</code>, which includes Custom accounts, you can update any information on the account.</p>
         *
         *     <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
         *     is <code>stripe</code>, which includes Standard and Express accounts, you can update all information until you create
         *     an <a href="/api/account_links">Account Link</a> or <a href="/api/account_sessions">Account Session</a> to start Connect onboarding,
         *     after which some properties can no longer be updated.</p>
         *
         *     <p>To update your own account, use the <a href="https://dashboard.stripe.com/settings/account">Dashboard</a>. Refer to our
         *     <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
         */
        post: operations["PostAccountsAccount"];
        /**
         * Delete an account
         * @description <p>With <a href="/connect">Connect</a>, you can delete accounts you manage.</p>
         *
         *     <p>Test-mode accounts can be deleted at any time.</p>
         *
         *     <p>Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all <a href="/api/balance/balance_object">balances</a> are zero.</p>
         *
         *     <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/settings/account">account information tab in your account settings</a> instead.</p>
         */
        delete: operations["DeleteAccountsAccount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/bank_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an external account
         * @description <p>Create an external account for a given account.</p>
         */
        post: operations["PostAccountsAccountBankAccounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/bank_accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an external account
         * @description <p>Retrieve a specified external account for a given account.</p>
         */
        get: operations["GetAccountsAccountBankAccountsId"];
        put?: never;
        /** @description <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
         *     a connected account and optionally sets it as the default for its currency. Other bank account
         *     details are not editable by design.</p>
         *
         *     <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
         *
         *     <p>You can re-enable a disabled bank account by performing an update call without providing any
         *     arguments or changes.</p> */
        post: operations["PostAccountsAccountBankAccountsId"];
        /**
         * Delete an external account
         * @description <p>Delete a specified external account for a given account.</p>
         */
        delete: operations["DeleteAccountsAccountBankAccountsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all account capabilities
         * @description <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
         */
        get: operations["GetAccountsAccountCapabilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/capabilities/{capability}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an Account Capability
         * @description <p>Retrieves information about the specified Account Capability.</p>
         */
        get: operations["GetAccountsAccountCapabilitiesCapability"];
        put?: never;
        /**
         * Update an Account Capability
         * @description <p>Updates an existing Account Capability. Request or remove a capability by updating its <code>requested</code> parameter.</p>
         */
        post: operations["PostAccountsAccountCapabilitiesCapability"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/external_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all external accounts
         * @description <p>List external accounts for an account.</p>
         */
        get: operations["GetAccountsAccountExternalAccounts"];
        put?: never;
        /**
         * Create an external account
         * @description <p>Create an external account for a given account.</p>
         */
        post: operations["PostAccountsAccountExternalAccounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/external_accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an external account
         * @description <p>Retrieve a specified external account for a given account.</p>
         */
        get: operations["GetAccountsAccountExternalAccountsId"];
        put?: never;
        /** @description <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
         *     a connected account and optionally sets it as the default for its currency. Other bank account
         *     details are not editable by design.</p>
         *
         *     <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
         *
         *     <p>You can re-enable a disabled bank account by performing an update call without providing any
         *     arguments or changes.</p> */
        post: operations["PostAccountsAccountExternalAccountsId"];
        /**
         * Delete an external account
         * @description <p>Delete a specified external account for a given account.</p>
         */
        delete: operations["DeleteAccountsAccountExternalAccountsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/login_links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a login link
         * @description <p>Creates a login link for a connected account to access the Express Dashboard.</p>
         *
         *     <p><strong>You can only create login links for accounts that use the <a href="/connect/express-dashboard">Express Dashboard</a> and are connected to your platform</strong>.</p>
         */
        post: operations["PostAccountsAccountLoginLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/people": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all persons
         * @description <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
         */
        get: operations["GetAccountsAccountPeople"];
        put?: never;
        /**
         * Create a person
         * @description <p>Creates a new person.</p>
         */
        post: operations["PostAccountsAccountPeople"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/people/{person}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a person
         * @description <p>Retrieves an existing person.</p>
         */
        get: operations["GetAccountsAccountPeoplePerson"];
        put?: never;
        /**
         * Update a person
         * @description <p>Updates an existing person.</p>
         */
        post: operations["PostAccountsAccountPeoplePerson"];
        /**
         * Delete a person
         * @description <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
         */
        delete: operations["DeleteAccountsAccountPeoplePerson"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/persons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all persons
         * @description <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
         */
        get: operations["GetAccountsAccountPersons"];
        put?: never;
        /**
         * Create a person
         * @description <p>Creates a new person.</p>
         */
        post: operations["PostAccountsAccountPersons"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/persons/{person}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a person
         * @description <p>Retrieves an existing person.</p>
         */
        get: operations["GetAccountsAccountPersonsPerson"];
        put?: never;
        /**
         * Update a person
         * @description <p>Updates an existing person.</p>
         */
        post: operations["PostAccountsAccountPersonsPerson"];
        /**
         * Delete a person
         * @description <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
         */
        delete: operations["DeleteAccountsAccountPersonsPerson"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{account}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reject an account
         * @description <p>With <a href="/connect">Connect</a>, you can reject accounts that you have flagged as suspicious.</p>
         *
         *     <p>Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.</p>
         */
        post: operations["PostAccountsAccountReject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/apple_pay/domains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description <p>List apple pay domains.</p> */
        get: operations["GetApplePayDomains"];
        put?: never;
        /** @description <p>Create an apple pay domain.</p> */
        post: operations["PostApplePayDomains"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/apple_pay/domains/{domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description <p>Retrieve an apple pay domain.</p> */
        get: operations["GetApplePayDomainsDomain"];
        put?: never;
        post?: never;
        /** @description <p>Delete an apple pay domain.</p> */
        delete: operations["DeleteApplePayDomainsDomain"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/application_fees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all application fees
         * @description <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
         */
        get: operations["GetApplicationFees"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/application_fees/{fee}/refunds/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an application fee refund
         * @description <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
         */
        get: operations["GetApplicationFeesFeeRefundsId"];
        put?: never;
        /**
         * Update an application fee refund
         * @description <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         *
         *     <p>This request only accepts metadata as an argument.</p>
         */
        post: operations["PostApplicationFeesFeeRefundsId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/application_fees/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an application fee
         * @description <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
         */
        get: operations["GetApplicationFeesId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/application_fees/{id}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostApplicationFeesIdRefund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/application_fees/{id}/refunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all application fee refunds
         * @description <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
         */
        get: operations["GetApplicationFeesIdRefunds"];
        put?: never;
        /**
         * Create an application fee refund
         * @description <p>Refunds an application fee that has previously been collected but not yet refunded.
         *     Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
         *
         *     <p>You can optionally refund only part of an application fee.
         *     You can do so multiple times, until the entire fee has been refunded.</p>
         *
         *     <p>Once entirely refunded, an application fee can’t be refunded again.
         *     This method will raise an error when called on an already-refunded application fee,
         *     or when trying to refund more money than is left on an application fee.</p>
         */
        post: operations["PostApplicationFeesIdRefunds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/apps/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List secrets
         * @description <p>List all secrets stored on the given scope.</p>
         */
        get: operations["GetAppsSecrets"];
        put?: never;
        /**
         * Set a Secret
         * @description <p>Create or replace a secret in the secret store.</p>
         */
        post: operations["PostAppsSecrets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/apps/secrets/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete a Secret
         * @description <p>Deletes a secret from the secret store by name and scope.</p>
         */
        post: operations["PostAppsSecretsDelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/apps/secrets/find": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a Secret
         * @description <p>Finds a secret in the secret store by name and scope.</p>
         */
        get: operations["GetAppsSecretsFind"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve balance
         * @description <p>Retrieves the current account balance, based on the authentication that was used to make the request.
         *      For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
         */
        get: operations["GetBalance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/balance/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all balance transactions
         * @description <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
         *
         *     <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
         */
        get: operations["GetBalanceHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/balance/history/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a balance transaction
         * @description <p>Retrieves the balance transaction with the given ID.</p>
         *
         *     <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
         */
        get: operations["GetBalanceHistoryId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/balance_transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all balance transactions
         * @description <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
         *
         *     <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
         */
        get: operations["GetBalanceTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/balance_transactions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a balance transaction
         * @description <p>Retrieves the balance transaction with the given ID.</p>
         *
         *     <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
         */
        get: operations["GetBalanceTransactionsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List billing alerts
         * @description <p>Lists billing active and inactive alerts</p>
         */
        get: operations["GetBillingAlerts"];
        put?: never;
        /**
         * Create a billing alert
         * @description <p>Creates a billing alert</p>
         */
        post: operations["PostBillingAlerts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/alerts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a billing alert
         * @description <p>Retrieves a billing alert given an ID</p>
         */
        get: operations["GetBillingAlertsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/alerts/{id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate a billing alert
         * @description <p>Reactivates this alert, allowing it to trigger again.</p>
         */
        post: operations["PostBillingAlertsIdActivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/alerts/{id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive a billing alert
         * @description <p>Archives this alert, removing it from the list view and APIs. This is non-reversible.</p>
         */
        post: operations["PostBillingAlertsIdArchive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/alerts/{id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate a billing alert
         * @description <p>Deactivates this alert, preventing it from triggering.</p>
         */
        post: operations["PostBillingAlertsIdDeactivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/credit_balance_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the credit balance summary for a customer
         * @description <p>Retrieves the credit balance summary for a customer</p>
         */
        get: operations["GetBillingCreditBalanceSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/credit_balance_transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List credit balance transactions
         * @description <p>Retrieve a list of credit balance transactions</p>
         */
        get: operations["GetBillingCreditBalanceTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/credit_balance_transactions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a credit balance transaction
         * @description <p>Retrieves a credit balance transaction</p>
         */
        get: operations["GetBillingCreditBalanceTransactionsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/credit_grants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List credit grants
         * @description <p>Retrieve a list of credit grants.</p>
         */
        get: operations["GetBillingCreditGrants"];
        put?: never;
        /**
         * Create a credit grant
         * @description <p>Creates a credit grant</p>
         */
        post: operations["PostBillingCreditGrants"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/credit_grants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a credit grant
         * @description <p>Retrieves a credit grant</p>
         */
        get: operations["GetBillingCreditGrantsId"];
        put?: never;
        /**
         * Update a credit grant
         * @description <p>Updates a credit grant</p>
         */
        post: operations["PostBillingCreditGrantsId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/credit_grants/{id}/expire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Expire a credit grant
         * @description <p>Expires a credit grant.</p>
         */
        post: operations["PostBillingCreditGrantsIdExpire"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/credit_grants/{id}/void": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Void a credit grant
         * @description <p>Voids a credit grant.</p>
         */
        post: operations["PostBillingCreditGrantsIdVoid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/meter_event_adjustments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a billing meter event adjustment
         * @description <p>Creates a billing meter event adjustment</p>
         */
        post: operations["PostBillingMeterEventAdjustments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/meter_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a billing meter event
         * @description <p>Creates a billing meter event</p>
         */
        post: operations["PostBillingMeterEvents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/meters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List billing meters
         * @description <p>Retrieve a list of billing meters.</p>
         */
        get: operations["GetBillingMeters"];
        put?: never;
        /**
         * Create a billing meter
         * @description <p>Creates a billing meter</p>
         */
        post: operations["PostBillingMeters"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/meters/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a billing meter
         * @description <p>Retrieves a billing meter given an ID</p>
         */
        get: operations["GetBillingMetersId"];
        put?: never;
        /**
         * Update a billing meter
         * @description <p>Updates a billing meter</p>
         */
        post: operations["PostBillingMetersId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/meters/{id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate a billing meter
         * @description <p>Deactivates a billing meter</p>
         */
        post: operations["PostBillingMetersIdDeactivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/meters/{id}/event_summaries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List billing meter event summaries
         * @description <p>Retrieve a list of billing meter event summaries.</p>
         */
        get: operations["GetBillingMetersIdEventSummaries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/meters/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reactivate a billing meter
         * @description <p>Reactivates a billing meter</p>
         */
        post: operations["PostBillingMetersIdReactivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing_portal/configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List portal configurations
         * @description <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
         */
        get: operations["GetBillingPortalConfigurations"];
        put?: never;
        /**
         * Create a portal configuration
         * @description <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
         */
        post: operations["PostBillingPortalConfigurations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing_portal/configurations/{configuration}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a portal configuration
         * @description <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
         */
        get: operations["GetBillingPortalConfigurationsConfiguration"];
        put?: never;
        /**
         * Update a portal configuration
         * @description <p>Updates a configuration that describes the functionality of the customer portal.</p>
         */
        post: operations["PostBillingPortalConfigurationsConfiguration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing_portal/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a portal session
         * @description <p>Creates a session of the customer portal.</p>
         */
        post: operations["PostBillingPortalSessions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/charges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all charges
         * @description <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
         */
        get: operations["GetCharges"];
        put?: never;
        /** @description <p>This method is no longer recommended—use the <a href="/docs/api/payment_intents">Payment Intents API</a>
         *     to initiate a new payment instead. Confirmation of the PaymentIntent creates the <code>Charge</code>
         *     object used to request payment.</p> */
        post: operations["PostCharges"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/charges/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search charges
         * @description <p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
         *     Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
         *     conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
         *     to an hour behind during outages. Search functionality is not available to merchants in India.</p>
         */
        get: operations["GetChargesSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/charges/{charge}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a charge
         * @description <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
         */
        get: operations["GetChargesCharge"];
        put?: never;
        /**
         * Update a charge
         * @description <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         */
        post: operations["PostChargesCharge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/charges/{charge}/capture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture a payment
         * @description <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>
         *
         *     <p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>
         *
         *     <p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>
         */
        post: operations["PostChargesChargeCapture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/charges/{charge}/dispute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description <p>Retrieve a dispute for a specified charge.</p> */
        get: operations["GetChargesChargeDispute"];
        put?: never;
        post: operations["PostChargesChargeDispute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/charges/{charge}/dispute/close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostChargesChargeDisputeClose"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/charges/{charge}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a refund
         * @description <p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>
         *
         *     <p>This action refunds a previously created charge that’s not refunded yet.
         *     Funds are refunded to the credit or debit card that’s originally charged.</p>
         *
         *     <p>You can optionally refund only part of a charge.
         *     You can repeat this until the entire charge is refunded.</p>
         *
         *     <p>After you entirely refund a charge, you can’t refund it again.
         *     This method raises an error when it’s called on an already-refunded charge,
         *     or when you attempt to refund more money than is left on a charge.</p>
         */
        post: operations["PostChargesChargeRefund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/charges/{charge}/refunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all refunds
         * @description <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
         */
        get: operations["GetChargesChargeRefunds"];
        put?: never;
        /**
         * Create customer balance refund
         * @description <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
         *
         *     <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
         *     Funds will be refunded to the credit or debit card that was originally charged.</p>
         *
         *     <p>You can optionally refund only part of a charge.
         *     You can do so multiple times, until the entire charge has been refunded.</p>
         *
         *     <p>Once entirely refunded, a charge can’t be refunded again.
         *     This method will raise an error when called on an already-refunded charge,
         *     or when trying to refund more money than is left on a charge.</p>
         */
        post: operations["PostChargesChargeRefunds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/charges/{charge}/refunds/{refund}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description <p>Retrieves the details of an existing refund.</p> */
        get: operations["GetChargesChargeRefundsRefund"];
        put?: never;
        /** @description <p>Update a specified refund.</p> */
        post: operations["PostChargesChargeRefundsRefund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Checkout Sessions
         * @description <p>Returns a list of Checkout Sessions.</p>
         */
        get: operations["GetCheckoutSessions"];
        put?: never;
        /**
         * Create a Session
         * @description <p>Creates a Session object.</p>
         */
        post: operations["PostCheckoutSessions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout/sessions/{session}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Session
         * @description <p>Retrieves a Session object.</p>
         */
        get: operations["GetCheckoutSessionsSession"];
        put?: never;
        /**
         * Update a Session
         * @description <p>Updates a Session object.</p>
         */
        post: operations["PostCheckoutSessionsSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout/sessions/{session}/expire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Expire a Session
         * @description <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>
         *
         *     <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
         */
        post: operations["PostCheckoutSessionsSessionExpire"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout/sessions/{session}/line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Checkout Session's line items
         * @description <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
         */
        get: operations["GetCheckoutSessionsSessionLineItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/climate/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List orders
         * @description <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
         *     most recently created orders appearing first.</p>
         */
        get: operations["GetClimateOrders"];
        put?: never;
        /**
         * Create an order
         * @description <p>Creates a Climate order object for a given Climate product. The order will be processed immediately
         *     after creation and payment will be deducted your Stripe balance.</p>
         */
        post: operations["PostClimateOrders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/climate/orders/{order}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an order
         * @description <p>Retrieves the details of a Climate order object with the given ID.</p>
         */
        get: operations["GetClimateOrdersOrder"];
        put?: never;
        /**
         * Update an order
         * @description <p>Updates the specified order by setting the values of the parameters passed.</p>
         */
        post: operations["PostClimateOrdersOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/climate/orders/{order}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an order
         * @description <p>Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the
         *     reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
         *     might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
         *     provides 90 days advance notice and refunds the <code>amount_total</code>.</p>
         */
        post: operations["PostClimateOrdersOrderCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/climate/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List products
         * @description <p>Lists all available Climate product objects.</p>
         */
        get: operations["GetClimateProducts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/climate/products/{product}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a product
         * @description <p>Retrieves the details of a Climate product with the given ID.</p>
         */
        get: operations["GetClimateProductsProduct"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/climate/suppliers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List suppliers
         * @description <p>Lists all available Climate supplier objects.</p>
         */
        get: operations["GetClimateSuppliers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/climate/suppliers/{supplier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a supplier
         * @description <p>Retrieves a Climate supplier object.</p>
         */
        get: operations["GetClimateSuppliersSupplier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/confirmation_tokens/{confirmation_token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a ConfirmationToken
         * @description <p>Retrieves an existing ConfirmationToken object</p>
         */
        get: operations["GetConfirmationTokensConfirmationToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/country_specs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Country Specs
         * @description <p>Lists all Country Spec objects available in the API.</p>
         */
        get: operations["GetCountrySpecs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/country_specs/{country}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Country Spec
         * @description <p>Returns a Country Spec for a given Country code.</p>
         */
        get: operations["GetCountrySpecsCountry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/coupons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all coupons
         * @description <p>Returns a list of your coupons.</p>
         */
        get: operations["GetCoupons"];
        put?: never;
        /**
         * Create a coupon
         * @description <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
         *
         *     <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
         */
        post: operations["PostCoupons"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/coupons/{coupon}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a coupon
         * @description <p>Retrieves the coupon with the given ID.</p>
         */
        get: operations["GetCouponsCoupon"];
        put?: never;
        /**
         * Update a coupon
         * @description <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
         */
        post: operations["PostCouponsCoupon"];
        /**
         * Delete a coupon
         * @description <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
         */
        delete: operations["DeleteCouponsCoupon"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/credit_notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all credit notes
         * @description <p>Returns a list of credit notes.</p>
         */
        get: operations["GetCreditNotes"];
        put?: never;
        /**
         * Create a credit note
         * @description <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
         *     its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
         *     in any combination of the following:</p>
         *
         *     <ul>
         *     <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
         *     <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
         *     <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
         *     </ul>
         *
         *     <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
         *
         *     <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
         *     or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
         */
        post: operations["PostCreditNotes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/credit_notes/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Preview a credit note
         * @description <p>Get a preview of a credit note without creating it.</p>
         */
        get: operations["GetCreditNotesPreview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/credit_notes/preview/lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a credit note preview's line items
         * @description <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
         */
        get: operations["GetCreditNotesPreviewLines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/credit_notes/{credit_note}/lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a credit note's line items
         * @description <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
         */
        get: operations["GetCreditNotesCreditNoteLines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/credit_notes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a credit note
         * @description <p>Retrieves the credit note object with the given identifier.</p>
         */
        get: operations["GetCreditNotesId"];
        put?: never;
        /**
         * Update a credit note
         * @description <p>Updates an existing credit note.</p>
         */
        post: operations["PostCreditNotesId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/credit_notes/{id}/void": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Void a credit note
         * @description <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
         */
        post: operations["PostCreditNotesIdVoid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer_sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Customer Session
         * @description <p>Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>
         */
        post: operations["PostCustomerSessions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all customers
         * @description <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
         */
        get: operations["GetCustomers"];
        put?: never;
        /**
         * Create a customer
         * @description <p>Creates a new customer object.</p>
         */
        post: operations["PostCustomers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search customers
         * @description <p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
         *     Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
         *     conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
         *     to an hour behind during outages. Search functionality is not available to merchants in India.</p>
         */
        get: operations["GetCustomersSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a customer
         * @description <p>Retrieves a Customer object.</p>
         */
        get: operations["GetCustomersCustomer"];
        put?: never;
        /**
         * Update a customer
         * @description <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
         *
         *     <p>This request accepts mostly the same arguments as the customer creation call.</p>
         */
        post: operations["PostCustomersCustomer"];
        /**
         * Delete a customer
         * @description <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
         */
        delete: operations["DeleteCustomersCustomer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/balance_transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List customer balance transactions
         * @description <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
         */
        get: operations["GetCustomersCustomerBalanceTransactions"];
        put?: never;
        /**
         * Create a customer balance transaction
         * @description <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>
         */
        post: operations["PostCustomersCustomerBalanceTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/balance_transactions/{transaction}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a customer balance transaction
         * @description <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
         */
        get: operations["GetCustomersCustomerBalanceTransactionsTransaction"];
        put?: never;
        /**
         * Update a customer credit balance transaction
         * @description <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
         */
        post: operations["PostCustomersCustomerBalanceTransactionsTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/bank_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all bank accounts
         * @deprecated
         * @description <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
         */
        get: operations["GetCustomersCustomerBankAccounts"];
        put?: never;
        /**
         * Create a card
         * @description <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
         *
         *     <p>If the card’s owner has no default card, then the new card will become the default.
         *     However, if the owner already has a default, then it will not change.
         *     To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
         */
        post: operations["PostCustomersCustomerBankAccounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/bank_accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a bank account
         * @deprecated
         * @description <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
         */
        get: operations["GetCustomersCustomerBankAccountsId"];
        put?: never;
        /** @description <p>Update a specified source for a given customer.</p> */
        post: operations["PostCustomersCustomerBankAccountsId"];
        /**
         * Delete a customer source
         * @description <p>Delete a specified source for a given customer.</p>
         */
        delete: operations["DeleteCustomersCustomerBankAccountsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/bank_accounts/{id}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify a bank account
         * @description <p>Verify a specified bank account for a given customer.</p>
         */
        post: operations["PostCustomersCustomerBankAccountsIdVerify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all cards
         * @deprecated
         * @description <p>You can see a list of the cards belonging to a customer.
         *     Note that the 10 most recent sources are always available on the <code>Customer</code> object.
         *     If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
         */
        get: operations["GetCustomersCustomerCards"];
        put?: never;
        /**
         * Create a card
         * @description <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
         *
         *     <p>If the card’s owner has no default card, then the new card will become the default.
         *     However, if the owner already has a default, then it will not change.
         *     To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
         */
        post: operations["PostCustomersCustomerCards"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/cards/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a card
         * @deprecated
         * @description <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
         */
        get: operations["GetCustomersCustomerCardsId"];
        put?: never;
        /** @description <p>Update a specified source for a given customer.</p> */
        post: operations["PostCustomersCustomerCardsId"];
        /**
         * Delete a customer source
         * @description <p>Delete a specified source for a given customer.</p>
         */
        delete: operations["DeleteCustomersCustomerCardsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/cash_balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a cash balance
         * @description <p>Retrieves a customer’s cash balance.</p>
         */
        get: operations["GetCustomersCustomerCashBalance"];
        put?: never;
        /**
         * Update a cash balance's settings
         * @description <p>Changes the settings on a customer’s cash balance.</p>
         */
        post: operations["PostCustomersCustomerCashBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/cash_balance_transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cash balance transactions
         * @description <p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
         */
        get: operations["GetCustomersCustomerCashBalanceTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/cash_balance_transactions/{transaction}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a cash balance transaction
         * @description <p>Retrieves a specific cash balance transaction, which updated the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
         */
        get: operations["GetCustomersCustomerCashBalanceTransactionsTransaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/discount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetCustomersCustomerDiscount"];
        put?: never;
        post?: never;
        /**
         * Delete a customer discount
         * @description <p>Removes the currently applied discount on a customer.</p>
         */
        delete: operations["DeleteCustomersCustomerDiscount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/funding_instructions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or retrieve funding instructions for a customer cash balance
         * @description <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
         *     funding instructions will be created. If funding instructions have already been created for a given customer, the same
         *     funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>
         */
        post: operations["PostCustomersCustomerFundingInstructions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/payment_methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List a Customer's PaymentMethods
         * @description <p>Returns a list of PaymentMethods for a given Customer</p>
         */
        get: operations["GetCustomersCustomerPaymentMethods"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/payment_methods/{payment_method}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Customer's PaymentMethod
         * @description <p>Retrieves a PaymentMethod object for a given Customer.</p>
         */
        get: operations["GetCustomersCustomerPaymentMethodsPaymentMethod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description <p>List sources for a specified customer.</p> */
        get: operations["GetCustomersCustomerSources"];
        put?: never;
        /**
         * Create a card
         * @description <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
         *
         *     <p>If the card’s owner has no default card, then the new card will become the default.
         *     However, if the owner already has a default, then it will not change.
         *     To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
         */
        post: operations["PostCustomersCustomerSources"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/sources/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description <p>Retrieve a specified source for a given customer.</p> */
        get: operations["GetCustomersCustomerSourcesId"];
        put?: never;
        /** @description <p>Update a specified source for a given customer.</p> */
        post: operations["PostCustomersCustomerSourcesId"];
        /**
         * Delete a customer source
         * @description <p>Delete a specified source for a given customer.</p>
         */
        delete: operations["DeleteCustomersCustomerSourcesId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/sources/{id}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify a bank account
         * @description <p>Verify a specified bank account for a given customer.</p>
         */
        post: operations["PostCustomersCustomerSourcesIdVerify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List active subscriptions
         * @description <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
         */
        get: operations["GetCustomersCustomerSubscriptions"];
        put?: never;
        /**
         * Create a subscription
         * @description <p>Creates a new subscription on an existing customer.</p>
         */
        post: operations["PostCustomersCustomerSubscriptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a subscription
         * @description <p>Retrieves the subscription with the given ID.</p>
         */
        get: operations["GetCustomersCustomerSubscriptionsSubscriptionExposedId"];
        put?: never;
        /**
         * Update a subscription on a customer
         * @description <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
         */
        post: operations["PostCustomersCustomerSubscriptionsSubscriptionExposedId"];
        /**
         * Cancel a subscription
         * @description <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
         *
         *     <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
         *
         *     <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
         */
        delete: operations["DeleteCustomersCustomerSubscriptionsSubscriptionExposedId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"];
        put?: never;
        post?: never;
        /**
         * Delete a customer discount
         * @description <p>Removes the currently applied discount on a customer.</p>
         */
        delete: operations["DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/tax_ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Customer tax IDs
         * @description <p>Returns a list of tax IDs for a customer.</p>
         */
        get: operations["GetCustomersCustomerTaxIds"];
        put?: never;
        /**
         * Create a Customer tax ID
         * @description <p>Creates a new <code>tax_id</code> object for a customer.</p>
         */
        post: operations["PostCustomersCustomerTaxIds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customer}/tax_ids/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Customer tax ID
         * @description <p>Retrieves the <code>tax_id</code> object with the given identifier.</p>
         */
        get: operations["GetCustomersCustomerTaxIdsId"];
        put?: never;
        post?: never;
        /**
         * Delete a Customer tax ID
         * @description <p>Deletes an existing <code>tax_id</code> object.</p>
         */
        delete: operations["DeleteCustomersCustomerTaxIdsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/disputes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all disputes
         * @description <p>Returns a list of your disputes.</p>
         */
        get: operations["GetDisputes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/disputes/{dispute}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a dispute
         * @description <p>Retrieves the dispute with the given ID.</p>
         */
        get: operations["GetDisputesDispute"];
        put?: never;
        /**
         * Update a dispute
         * @description <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
         *
         *     <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
         */
        post: operations["PostDisputesDispute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/disputes/{dispute}/close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Close a dispute
         * @description <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
         *
         *     <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
         */
        post: operations["PostDisputesDisputeClose"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/entitlements/active_entitlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all active entitlements
         * @description <p>Retrieve a list of active entitlements for a customer</p>
         */
        get: operations["GetEntitlementsActiveEntitlements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/entitlements/active_entitlements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an active entitlement
         * @description <p>Retrieve an active entitlement</p>
         */
        get: operations["GetEntitlementsActiveEntitlementsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/entitlements/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all features
         * @description <p>Retrieve a list of features</p>
         */
        get: operations["GetEntitlementsFeatures"];
        put?: never;
        /**
         * Create a feature
         * @description <p>Creates a feature</p>
         */
        post: operations["PostEntitlementsFeatures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/entitlements/features/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a feature
         * @description <p>Retrieves a feature</p>
         */
        get: operations["GetEntitlementsFeaturesId"];
        put?: never;
        /**
         * Updates a feature
         * @description <p>Update a feature’s metadata or permanently deactivate it.</p>
         */
        post: operations["PostEntitlementsFeaturesId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ephemeral_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an ephemeral key
         * @description <p>Creates a short-lived API key for a given resource.</p>
         */
        post: operations["PostEphemeralKeys"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ephemeral_keys/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Immediately invalidate an ephemeral key
         * @description <p>Invalidates a short-lived API key for a given resource.</p>
         */
        delete: operations["DeleteEphemeralKeysKey"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all events
         * @description <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="https://docs.stripe.com/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
         */
        get: operations["GetEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an event
         * @description <p>Retrieves the details of an event if it was created in the last 30 days. Supply the unique identifier of the event, which you might have received in a webhook.</p>
         */
        get: operations["GetEventsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/exchange_rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all exchange rates
         * @description <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
         */
        get: operations["GetExchangeRates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/exchange_rates/{rate_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an exchange rate
         * @description <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
         */
        get: operations["GetExchangeRatesRateId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/file_links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all file links
         * @description <p>Returns a list of file links.</p>
         */
        get: operations["GetFileLinks"];
        put?: never;
        /**
         * Create a file link
         * @description <p>Creates a new file link object.</p>
         */
        post: operations["PostFileLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/file_links/{link}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a file link
         * @description <p>Retrieves the file link with the given ID.</p>
         */
        get: operations["GetFileLinksLink"];
        put?: never;
        /**
         * Update a file link
         * @description <p>Updates an existing file link object. Expired links can no longer be updated.</p>
         */
        post: operations["PostFileLinksLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all files
         * @description <p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.</p>
         */
        get: operations["GetFiles"];
        put?: never;
        /**
         * Create a file
         * @description <p>To upload a file to Stripe, you need to send a request of type <code>multipart/form-data</code>. Include the file you want to upload in the request, and the parameters for creating a file.</p>
         *
         *     <p>All of Stripe’s officially supported Client libraries support sending <code>multipart/form-data</code>.</p>
         */
        post: operations["PostFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files/{file}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a file
         * @description <p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>
         */
        get: operations["GetFilesFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Accounts
         * @description <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
         */
        get: operations["GetFinancialConnectionsAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/accounts/{account}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an Account
         * @description <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
         */
        get: operations["GetFinancialConnectionsAccountsAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/accounts/{account}/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disconnect an Account
         * @description <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
         */
        post: operations["PostFinancialConnectionsAccountsAccountDisconnect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/accounts/{account}/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Account Owners
         * @description <p>Lists all owners for a given <code>Account</code></p>
         */
        get: operations["GetFinancialConnectionsAccountsAccountOwners"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/accounts/{account}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Account data
         * @description <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
         */
        post: operations["PostFinancialConnectionsAccountsAccountRefresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/accounts/{account}/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Subscribe to data refreshes for an Account
         * @description <p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
         */
        post: operations["PostFinancialConnectionsAccountsAccountSubscribe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/accounts/{account}/unsubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unsubscribe from data refreshes for an Account
         * @description <p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
         */
        post: operations["PostFinancialConnectionsAccountsAccountUnsubscribe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Session
         * @description <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
         */
        post: operations["PostFinancialConnectionsSessions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/sessions/{session}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Session
         * @description <p>Retrieves the details of a Financial Connections <code>Session</code></p>
         */
        get: operations["GetFinancialConnectionsSessionsSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Transactions
         * @description <p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>
         */
        get: operations["GetFinancialConnectionsTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/financial_connections/transactions/{transaction}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Transaction
         * @description <p>Retrieves the details of a Financial Connections <code>Transaction</code></p>
         */
        get: operations["GetFinancialConnectionsTransactionsTransaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/forwarding/requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all ForwardingRequests
         * @description <p>Lists all ForwardingRequest objects.</p>
         */
        get: operations["GetForwardingRequests"];
        put?: never;
        /**
         * Create a ForwardingRequest
         * @description <p>Creates a ForwardingRequest object.</p>
         */
        post: operations["PostForwardingRequests"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/forwarding/requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a ForwardingRequest
         * @description <p>Retrieves a ForwardingRequest object.</p>
         */
        get: operations["GetForwardingRequestsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/identity/verification_reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List VerificationReports
         * @description <p>List all verification reports.</p>
         */
        get: operations["GetIdentityVerificationReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/identity/verification_reports/{report}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a VerificationReport
         * @description <p>Retrieves an existing VerificationReport</p>
         */
        get: operations["GetIdentityVerificationReportsReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/identity/verification_sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List VerificationSessions
         * @description <p>Returns a list of VerificationSessions</p>
         */
        get: operations["GetIdentityVerificationSessions"];
        put?: never;
        /**
         * Create a VerificationSession
         * @description <p>Creates a VerificationSession object.</p>
         *
         *     <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
         *
         *     <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
         *
         *     <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a></p>
         */
        post: operations["PostIdentityVerificationSessions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/identity/verification_sessions/{session}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a VerificationSession
         * @description <p>Retrieves the details of a VerificationSession that was previously created.</p>
         *
         *     <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
         *     <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
         */
        get: operations["GetIdentityVerificationSessionsSession"];
        put?: never;
        /**
         * Update a VerificationSession
         * @description <p>Updates a VerificationSession object.</p>
         *
         *     <p>When the session status is <code>requires_input</code>, you can use this method to update the
         *     verification check and options.</p>
         */
        post: operations["PostIdentityVerificationSessionsSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/identity/verification_sessions/{session}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a VerificationSession
         * @description <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>
         *
         *     <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
         */
        post: operations["PostIdentityVerificationSessionsSessionCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/identity/verification_sessions/{session}/redact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redact a VerificationSession
         * @description <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
         *     the VerificationSession and all objects related to it, including VerificationReports, Events,
         *     request logs, etc.</p>
         *
         *     <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
         *     <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
         *     state will automatically cancel it.</p>
         *
         *     <p>The redaction process may take up to four days. When the redaction process is in progress, the
         *     VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
         *     finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
         *     will be emitted.</p>
         *
         *     <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
         *     fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
         *     placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
         *     used for any purpose.</p>
         *
         *     <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
         */
        post: operations["PostIdentityVerificationSessionsSessionRedact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoice_rendering_templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all invoice rendering templates
         * @description <p>List all templates, ordered by creation date, with the most recently created template appearing first.</p>
         */
        get: operations["GetInvoiceRenderingTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoice_rendering_templates/{template}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an invoice rendering template
         * @description <p>Retrieves an invoice rendering template with the given ID. It by default returns the latest version of the template. Optionally, specify a version to see previous versions.</p>
         */
        get: operations["GetInvoiceRenderingTemplatesTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoice_rendering_templates/{template}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive an invoice rendering template
         * @description <p>Updates the status of an invoice rendering template to ‘archived’ so no new Stripe objects (customers, invoices, etc.) can reference it. The template can also no longer be updated. However, if the template is already set on a Stripe object, it will continue to be applied on invoices generated by it.</p>
         */
        post: operations["PostInvoiceRenderingTemplatesTemplateArchive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoice_rendering_templates/{template}/unarchive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unarchive an invoice rendering template
         * @description <p>Unarchive an invoice rendering template so it can be used on new Stripe objects again.</p>
         */
        post: operations["PostInvoiceRenderingTemplatesTemplateUnarchive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoiceitems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all invoice items
         * @description <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
         */
        get: operations["GetInvoiceitems"];
        put?: never;
        /**
         * Create an invoice item
         * @description <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
         */
        post: operations["PostInvoiceitems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoiceitems/{invoiceitem}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an invoice item
         * @description <p>Retrieves the invoice item with the given ID.</p>
         */
        get: operations["GetInvoiceitemsInvoiceitem"];
        put?: never;
        /**
         * Update an invoice item
         * @description <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
         */
        post: operations["PostInvoiceitemsInvoiceitem"];
        /**
         * Delete an invoice item
         * @description <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
         */
        delete: operations["DeleteInvoiceitemsInvoiceitem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all invoices
         * @description <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
         */
        get: operations["GetInvoices"];
        put?: never;
        /**
         * Create an invoice
         * @description <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
         */
        post: operations["PostInvoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/create_preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a preview invoice
         * @description <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
         *
         *     <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
         *
         *     <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request. </p>
         *
         *     <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
         */
        post: operations["PostInvoicesCreatePreview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search invoices
         * @description <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
         *     Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
         *     conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
         *     to an hour behind during outages. Search functionality is not available to merchants in India.</p>
         */
        get: operations["GetInvoicesSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/upcoming": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an upcoming invoice
         * @description <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
         *
         *     <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
         *
         *     <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request.</p>
         *
         *     <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
         */
        get: operations["GetInvoicesUpcoming"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/upcoming/lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an upcoming invoice's line items
         * @description <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
         */
        get: operations["GetInvoicesUpcomingLines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an invoice
         * @description <p>Retrieves the invoice with the given ID.</p>
         */
        get: operations["GetInvoicesInvoice"];
        put?: never;
        /**
         * Update an invoice
         * @description <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
         *     monetary values, as well as <code>collection_method</code>, become uneditable.</p>
         *
         *     <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
         *     sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
         *     <code>auto_advance=false</code>.</p>
         */
        post: operations["PostInvoicesInvoice"];
        /**
         * Delete a draft invoice
         * @description <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
         */
        delete: operations["DeleteInvoicesInvoice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}/add_lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk add invoice line items
         * @description <p>Adds multiple line items to an invoice. This is only possible when an invoice is still a draft.</p>
         */
        post: operations["PostInvoicesInvoiceAddLines"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}/finalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finalize an invoice
         * @description <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
         */
        post: operations["PostInvoicesInvoiceFinalize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}/lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an invoice's line items
         * @description <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
         */
        get: operations["GetInvoicesInvoiceLines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}/lines/{line_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update an invoice's line item
         * @description <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
         *     so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
         *     item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
         *     Updating an invoice’s line item is only possible before the invoice is finalized.</p>
         */
        post: operations["PostInvoicesInvoiceLinesLineItemId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}/mark_uncollectible": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark an invoice as uncollectible
         * @description <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
         */
        post: operations["PostInvoicesInvoiceMarkUncollectible"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}/pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pay an invoice
         * @description <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
         */
        post: operations["PostInvoicesInvoicePay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}/remove_lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk remove invoice line items
         * @description <p>Removes multiple line items from an invoice. This is only possible when an invoice is still a draft.</p>
         */
        post: operations["PostInvoicesInvoiceRemoveLines"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send an invoice for manual payment
         * @description <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
         *
         *     <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
         */
        post: operations["PostInvoicesInvoiceSend"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}/update_lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk update invoice line items
         * @description <p>Updates multiple line items on an invoice. This is only possible when an invoice is still a draft.</p>
         */
        post: operations["PostInvoicesInvoiceUpdateLines"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoice}/void": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Void an invoice
         * @description <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
         *
         *     <p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>
         */
        post: operations["PostInvoicesInvoiceVoid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/authorizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all authorizations
         * @description <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
         */
        get: operations["GetIssuingAuthorizations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/authorizations/{authorization}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an authorization
         * @description <p>Retrieves an Issuing <code>Authorization</code> object.</p>
         */
        get: operations["GetIssuingAuthorizationsAuthorization"];
        put?: never;
        /**
         * Update an authorization
         * @description <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         */
        post: operations["PostIssuingAuthorizationsAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/authorizations/{authorization}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve an authorization
         * @deprecated
         * @description <p>[Deprecated] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.
         *     This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to approve an authorization</a>.</p>
         */
        post: operations["PostIssuingAuthorizationsAuthorizationApprove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/authorizations/{authorization}/decline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Decline an authorization
         * @deprecated
         * @description <p>[Deprecated] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
         *     This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to decline an authorization</a>.</p>
         */
        post: operations["PostIssuingAuthorizationsAuthorizationDecline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cardholders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all cardholders
         * @description <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
         */
        get: operations["GetIssuingCardholders"];
        put?: never;
        /**
         * Create a cardholder
         * @description <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
         */
        post: operations["PostIssuingCardholders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cardholders/{cardholder}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a cardholder
         * @description <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
         */
        get: operations["GetIssuingCardholdersCardholder"];
        put?: never;
        /**
         * Update a cardholder
         * @description <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         */
        post: operations["PostIssuingCardholdersCardholder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all cards
         * @description <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
         */
        get: operations["GetIssuingCards"];
        put?: never;
        /**
         * Create a card
         * @description <p>Creates an Issuing <code>Card</code> object.</p>
         */
        post: operations["PostIssuingCards"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/{card}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a card
         * @description <p>Retrieves an Issuing <code>Card</code> object.</p>
         */
        get: operations["GetIssuingCardsCard"];
        put?: never;
        /**
         * Update a card
         * @description <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         */
        post: operations["PostIssuingCardsCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/disputes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all disputes
         * @description <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
         */
        get: operations["GetIssuingDisputes"];
        put?: never;
        /**
         * Create a dispute
         * @description <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
         */
        post: operations["PostIssuingDisputes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/disputes/{dispute}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a dispute
         * @description <p>Retrieves an Issuing <code>Dispute</code> object.</p>
         */
        get: operations["GetIssuingDisputesDispute"];
        put?: never;
        /**
         * Update a dispute
         * @description <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
         */
        post: operations["PostIssuingDisputesDispute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/disputes/{dispute}/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a dispute
         * @description <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
         */
        post: operations["PostIssuingDisputesDisputeSubmit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/personalization_designs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all personalization designs
         * @description <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
         */
        get: operations["GetIssuingPersonalizationDesigns"];
        put?: never;
        /**
         * Create a personalization design
         * @description <p>Creates a personalization design object.</p>
         */
        post: operations["PostIssuingPersonalizationDesigns"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/personalization_designs/{personalization_design}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a personalization design
         * @description <p>Retrieves a personalization design object.</p>
         */
        get: operations["GetIssuingPersonalizationDesignsPersonalizationDesign"];
        put?: never;
        /**
         * Update a personalization design
         * @description <p>Updates a card personalization object.</p>
         */
        post: operations["PostIssuingPersonalizationDesignsPersonalizationDesign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/physical_bundles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all physical bundles
         * @description <p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
         */
        get: operations["GetIssuingPhysicalBundles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/physical_bundles/{physical_bundle}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a physical bundle
         * @description <p>Retrieves a physical bundle object.</p>
         */
        get: operations["GetIssuingPhysicalBundlesPhysicalBundle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/settlements/{settlement}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a settlement
         * @description <p>Retrieves an Issuing <code>Settlement</code> object.</p>
         */
        get: operations["GetIssuingSettlementsSettlement"];
        put?: never;
        /**
         * Update a settlement
         * @description <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         */
        post: operations["PostIssuingSettlementsSettlement"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all issuing tokens for card
         * @description <p>Lists all Issuing <code>Token</code> objects for a given card.</p>
         */
        get: operations["GetIssuingTokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/tokens/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an issuing token
         * @description <p>Retrieves an Issuing <code>Token</code> object.</p>
         */
        get: operations["GetIssuingTokensToken"];
        put?: never;
        /**
         * Update a token status
         * @description <p>Attempts to update the specified Issuing <code>Token</code> object to the status specified.</p>
         */
        post: operations["PostIssuingTokensToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all transactions
         * @description <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
         */
        get: operations["GetIssuingTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/transactions/{transaction}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a transaction
         * @description <p>Retrieves an Issuing <code>Transaction</code> object.</p>
         */
        get: operations["GetIssuingTransactionsTransaction"];
        put?: never;
        /**
         * Update a transaction
         * @description <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         */
        post: operations["PostIssuingTransactionsTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/link_account_sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Session
         * @description <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
         */
        post: operations["PostLinkAccountSessions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/link_account_sessions/{session}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Session
         * @description <p>Retrieves the details of a Financial Connections <code>Session</code></p>
         */
        get: operations["GetLinkAccountSessionsSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/linked_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Accounts
         * @description <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
         */
        get: operations["GetLinkedAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/linked_accounts/{account}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an Account
         * @description <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
         */
        get: operations["GetLinkedAccountsAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/linked_accounts/{account}/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disconnect an Account
         * @description <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
         */
        post: operations["PostLinkedAccountsAccountDisconnect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/linked_accounts/{account}/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Account Owners
         * @description <p>Lists all owners for a given <code>Account</code></p>
         */
        get: operations["GetLinkedAccountsAccountOwners"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/linked_accounts/{account}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Account data
         * @description <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
         */
        post: operations["PostLinkedAccountsAccountRefresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mandates/{mandate}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Mandate
         * @description <p>Retrieves a Mandate object.</p>
         */
        get: operations["GetMandatesMandate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_intents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all PaymentIntents
         * @description <p>Returns a list of PaymentIntents.</p>
         */
        get: operations["GetPaymentIntents"];
        put?: never;
        /**
         * Create a PaymentIntent
         * @description <p>Creates a PaymentIntent object.</p>
         *
         *     <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
         *     to continue the payment. Learn more about <a href="/docs/payments/payment-intents">the available payment flows
         *     with the Payment Intents API</a>.</p>
         *
         *     <p>When you use <code>confirm=true</code> during creation, it’s equivalent to creating
         *     and confirming the PaymentIntent in the same call. You can use any parameters
         *     available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when you supply
         *     <code>confirm=true</code>.</p>
         */
        post: operations["PostPaymentIntents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_intents/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search PaymentIntents
         * @description <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
         *     Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
         *     conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
         *     to an hour behind during outages. Search functionality is not available to merchants in India.</p>
         */
        get: operations["GetPaymentIntentsSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_intents/{intent}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a PaymentIntent
         * @description <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
         *
         *     <p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>
         *
         *     <p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
         */
        get: operations["GetPaymentIntentsIntent"];
        put?: never;
        /**
         * Update a PaymentIntent
         * @description <p>Updates properties on a PaymentIntent object without confirming.</p>
         *
         *     <p>Depending on which properties you update, you might need to confirm the
         *     PaymentIntent again. For example, updating the <code>payment_method</code>
         *     always requires you to confirm the PaymentIntent again. If you prefer to
         *     update and confirm at the same time, we recommend updating properties through
         *     the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
         */
        post: operations["PostPaymentIntentsIntent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_intents/{intent}/apply_customer_balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reconcile a customer_balance PaymentIntent
         * @description <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>
         */
        post: operations["PostPaymentIntentsIntentApplyCustomerBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_intents/{intent}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a PaymentIntent
         * @description <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>
         *
         *     <p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>
         *
         *     <p>You can’t cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
         */
        post: operations["PostPaymentIntentsIntentCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_intents/{intent}/capture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture a PaymentIntent
         * @description <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
         *
         *     <p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>
         *
         *     <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
         */
        post: operations["PostPaymentIntentsIntentCapture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_intents/{intent}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm a PaymentIntent
         * @description <p>Confirm that your customer intends to pay with current or provided
         *     payment method. Upon confirmation, the PaymentIntent will attempt to initiate
         *     a payment.
         *     If the selected payment method requires additional authentication steps, the
         *     PaymentIntent will transition to the <code>requires_action</code> status and
         *     suggest additional actions via <code>next_action</code>. If payment fails,
         *     the PaymentIntent transitions to the <code>requires_payment_method</code> status or the
         *     <code>canceled</code> status if the confirmation limit is reached. If
         *     payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
         *     status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
         *     If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
         *     using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
         *     and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
         *     After <code>next_action</code>s are handled by the client, no additional
         *     confirmation is required to complete the payment.
         *     If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
         *     initiated using a secret key.
         *     If any actions are required for the payment, the PaymentIntent will
         *     return to the <code>requires_confirmation</code> state
         *     after those actions are completed. Your server needs to then
         *     explicitly re-confirm the PaymentIntent to initiate the next payment
         *     attempt.
         *     There is a variable upper limit on how many times a PaymentIntent can be confirmed.
         *     After this limit is reached, any further calls to this endpoint will
         *     transition the PaymentIntent to the <code>canceled</code> state.</p>
         */
        post: operations["PostPaymentIntentsIntentConfirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_intents/{intent}/increment_authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Increment an authorization
         * @description <p>Perform an incremental authorization on an eligible
         *     <a href="/docs/api/payment_intents/object">PaymentIntent</a>. To be eligible, the
         *     PaymentIntent’s status must be <code>requires_capture</code> and
         *     <a href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
         *     must be <code>true</code>.</p>
         *
         *     <p>Incremental authorizations attempt to increase the authorized amount on
         *     your customer’s card to the new, higher <code>amount</code> provided. Similar to the
         *     initial authorization, incremental authorizations can be declined. A
         *     single PaymentIntent can call this endpoint multiple times to further
         *     increase the authorized amount.</p>
         *
         *     <p>If the incremental authorization succeeds, the PaymentIntent object
         *     returns with the updated
         *     <a href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
         *     If the incremental authorization fails, a
         *     <a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
         *     fields on the PaymentIntent or Charge update. The PaymentIntent
         *     object remains capturable for the previously authorized amount.</p>
         *
         *     <p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
         *     After it’s captured, a PaymentIntent can no longer be incremented.</p>
         *
         *     <p>Learn more about <a href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>
         */
        post: operations["PostPaymentIntentsIntentIncrementAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_intents/{intent}/verify_microdeposits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify microdeposits on a PaymentIntent
         * @description <p>Verifies microdeposits on a PaymentIntent object.</p>
         */
        post: operations["PostPaymentIntentsIntentVerifyMicrodeposits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all payment links
         * @description <p>Returns a list of your payment links.</p>
         */
        get: operations["GetPaymentLinks"];
        put?: never;
        /**
         * Create a payment link
         * @description <p>Creates a payment link.</p>
         */
        post: operations["PostPaymentLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_links/{payment_link}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve payment link
         * @description <p>Retrieve a payment link.</p>
         */
        get: operations["GetPaymentLinksPaymentLink"];
        put?: never;
        /**
         * Update a payment link
         * @description <p>Updates a payment link.</p>
         */
        post: operations["PostPaymentLinksPaymentLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_links/{payment_link}/line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a payment link's line items
         * @description <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
         */
        get: operations["GetPaymentLinksPaymentLinkLineItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_method_configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List payment method configurations
         * @description <p>List payment method configurations</p>
         */
        get: operations["GetPaymentMethodConfigurations"];
        put?: never;
        /**
         * Create a payment method configuration
         * @description <p>Creates a payment method configuration</p>
         */
        post: operations["PostPaymentMethodConfigurations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_method_configurations/{configuration}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve payment method configuration
         * @description <p>Retrieve payment method configuration</p>
         */
        get: operations["GetPaymentMethodConfigurationsConfiguration"];
        put?: never;
        /**
         * Update payment method configuration
         * @description <p>Update payment method configuration</p>
         */
        post: operations["PostPaymentMethodConfigurationsConfiguration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_method_domains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List payment method domains
         * @description <p>Lists the details of existing payment method domains.</p>
         */
        get: operations["GetPaymentMethodDomains"];
        put?: never;
        /**
         * Create a payment method domain
         * @description <p>Creates a payment method domain.</p>
         */
        post: operations["PostPaymentMethodDomains"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_method_domains/{payment_method_domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a payment method domain
         * @description <p>Retrieves the details of an existing payment method domain.</p>
         */
        get: operations["GetPaymentMethodDomainsPaymentMethodDomain"];
        put?: never;
        /**
         * Update a payment method domain
         * @description <p>Updates an existing payment method domain.</p>
         */
        post: operations["PostPaymentMethodDomainsPaymentMethodDomain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_method_domains/{payment_method_domain}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate an existing payment method domain
         * @description <p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain.
         *     The payment method doesn’t appear in Elements for this domain until it is active.</p>
         *
         *     <p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>
         *
         *     <p>Related guides: <a href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>
         */
        post: operations["PostPaymentMethodDomainsPaymentMethodDomainValidate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List PaymentMethods
         * @description <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a> API instead.</p>
         */
        get: operations["GetPaymentMethods"];
        put?: never;
        /**
         * Shares a PaymentMethod
         * @description <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
         *
         *     <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
         */
        post: operations["PostPaymentMethods"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_methods/{payment_method}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a PaymentMethod
         * @description <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>
         */
        get: operations["GetPaymentMethodsPaymentMethod"];
        put?: never;
        /**
         * Update a PaymentMethod
         * @description <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
         */
        post: operations["PostPaymentMethodsPaymentMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_methods/{payment_method}/attach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach a PaymentMethod to a Customer
         * @description <p>Attaches a PaymentMethod object to a Customer.</p>
         *
         *     <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
         *     or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
         *     These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
         *     endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
         *     future use, which makes later declines and payment friction more likely.
         *     See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
         *     future payments.</p>
         *
         *     <p>To use this PaymentMethod as the default for invoice or subscription payments,
         *     set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
         *     on the Customer to the PaymentMethod’s ID.</p>
         */
        post: operations["PostPaymentMethodsPaymentMethodAttach"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_methods/{payment_method}/detach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Detach a PaymentMethod from a Customer
         * @description <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
         */
        post: operations["PostPaymentMethodsPaymentMethodDetach"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all payouts
         * @description <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>
         */
        get: operations["GetPayouts"];
        put?: never;
        /**
         * Create a payout
         * @description <p>To send funds to your own bank account, create a new payout object. Your <a href="#balance">Stripe balance</a> must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.</p>
         *
         *     <p>If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.</p>
         *
         *     <p>If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
         */
        post: operations["PostPayouts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/{payout}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a payout
         * @description <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>
         */
        get: operations["GetPayoutsPayout"];
        put?: never;
        /**
         * Update a payout
         * @description <p>Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.</p>
         */
        post: operations["PostPayoutsPayout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/{payout}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a payout
         * @description <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>
         */
        post: operations["PostPayoutsPayoutCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/{payout}/reverse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reverse a payout
         * @description <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>
         *
         *     <p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>
         */
        post: operations["PostPayoutsPayoutReverse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all plans
         * @description <p>Returns a list of your plans.</p>
         */
        get: operations["GetPlans"];
        put?: never;
        /**
         * Create a plan
         * @description <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
         */
        post: operations["PostPlans"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/plans/{plan}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a plan
         * @description <p>Retrieves the plan with the given ID.</p>
         */
        get: operations["GetPlansPlan"];
        put?: never;
        /**
         * Update a plan
         * @description <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
         */
        post: operations["PostPlansPlan"];
        /**
         * Delete a plan
         * @description <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
         */
        delete: operations["DeletePlansPlan"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all prices
         * @description <p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>
         */
        get: operations["GetPrices"];
        put?: never;
        /**
         * Create a price
         * @description <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
         */
        post: operations["PostPrices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/prices/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search prices
         * @description <p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
         *     Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
         *     conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
         *     to an hour behind during outages. Search functionality is not available to merchants in India.</p>
         */
        get: operations["GetPricesSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/prices/{price}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a price
         * @description <p>Retrieves the price with the given ID.</p>
         */
        get: operations["GetPricesPrice"];
        put?: never;
        /**
         * Update a price
         * @description <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
         */
        post: operations["PostPricesPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all products
         * @description <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
         */
        get: operations["GetProducts"];
        put?: never;
        /**
         * Create a product
         * @description <p>Creates a new product object.</p>
         */
        post: operations["PostProducts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/products/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search products
         * @description <p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
         *     Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
         *     conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
         *     to an hour behind during outages. Search functionality is not available to merchants in India.</p>
         */
        get: operations["GetProductsSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a product
         * @description <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
         */
        get: operations["GetProductsId"];
        put?: never;
        /**
         * Update a product
         * @description <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         */
        post: operations["PostProductsId"];
        /**
         * Delete a product
         * @description <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
         */
        delete: operations["DeleteProductsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/products/{product}/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all features attached to a product
         * @description <p>Retrieve a list of features for a product</p>
         */
        get: operations["GetProductsProductFeatures"];
        put?: never;
        /**
         * Attach a feature to a product
         * @description <p>Creates a product_feature, which represents a feature attachment to a product</p>
         */
        post: operations["PostProductsProductFeatures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/products/{product}/features/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a product_feature
         * @description <p>Retrieves a product_feature, which represents a feature attachment to a product</p>
         */
        get: operations["GetProductsProductFeaturesId"];
        put?: never;
        post?: never;
        /**
         * Remove a feature from a product
         * @description <p>Deletes the feature attachment to a product</p>
         */
        delete: operations["DeleteProductsProductFeaturesId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/promotion_codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all promotion codes
         * @description <p>Returns a list of your promotion codes.</p>
         */
        get: operations["GetPromotionCodes"];
        put?: never;
        /**
         * Create a promotion code
         * @description <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
         */
        post: operations["PostPromotionCodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/promotion_codes/{promotion_code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a promotion code
         * @description <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
         */
        get: operations["GetPromotionCodesPromotionCode"];
        put?: never;
        /**
         * Update a promotion code
         * @description <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
         */
        post: operations["PostPromotionCodesPromotionCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all quotes
         * @description <p>Returns a list of your quotes.</p>
         */
        get: operations["GetQuotes"];
        put?: never;
        /**
         * Create a quote
         * @description <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
         */
        post: operations["PostQuotes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{quote}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a quote
         * @description <p>Retrieves the quote with the given ID.</p>
         */
        get: operations["GetQuotesQuote"];
        put?: never;
        /**
         * Update a quote
         * @description <p>A quote models prices and services for a customer.</p>
         */
        post: operations["PostQuotesQuote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{quote}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept a quote
         * @description <p>Accepts the specified quote.</p>
         */
        post: operations["PostQuotesQuoteAccept"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{quote}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a quote
         * @description <p>Cancels the quote.</p>
         */
        post: operations["PostQuotesQuoteCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{quote}/computed_upfront_line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a quote's upfront line items
         * @description <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
         */
        get: operations["GetQuotesQuoteComputedUpfrontLineItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{quote}/finalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finalize a quote
         * @description <p>Finalizes the quote.</p>
         */
        post: operations["PostQuotesQuoteFinalize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{quote}/line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a quote's line items
         * @description <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
         */
        get: operations["GetQuotesQuoteLineItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{quote}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download quote PDF
         * @description <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href="https://docs.stripe.com/quotes/overview#quote_pdf">here</a></p>
         */
        get: operations["GetQuotesQuotePdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/radar/early_fraud_warnings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all early fraud warnings
         * @description <p>Returns a list of early fraud warnings.</p>
         */
        get: operations["GetRadarEarlyFraudWarnings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/radar/early_fraud_warnings/{early_fraud_warning}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an early fraud warning
         * @description <p>Retrieves the details of an early fraud warning that has previously been created. </p>
         *
         *     <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
         */
        get: operations["GetRadarEarlyFraudWarningsEarlyFraudWarning"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/radar/value_list_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all value list items
         * @description <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
         */
        get: operations["GetRadarValueListItems"];
        put?: never;
        /**
         * Create a value list item
         * @description <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
         */
        post: operations["PostRadarValueListItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/radar/value_list_items/{item}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a value list item
         * @description <p>Retrieves a <code>ValueListItem</code> object.</p>
         */
        get: operations["GetRadarValueListItemsItem"];
        put?: never;
        post?: never;
        /**
         * Delete a value list item
         * @description <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
         */
        delete: operations["DeleteRadarValueListItemsItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/radar/value_lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all value lists
         * @description <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
         */
        get: operations["GetRadarValueLists"];
        put?: never;
        /**
         * Create a value list
         * @description <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
         */
        post: operations["PostRadarValueLists"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/radar/value_lists/{value_list}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a value list
         * @description <p>Retrieves a <code>ValueList</code> object.</p>
         */
        get: operations["GetRadarValueListsValueList"];
        put?: never;
        /**
         * Update a value list
         * @description <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
         */
        post: operations["PostRadarValueListsValueList"];
        /**
         * Delete a value list
         * @description <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
         */
        delete: operations["DeleteRadarValueListsValueList"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/refunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all refunds
         * @description <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first. The 10 most recent refunds are always available by default on the Charge object.</p>
         */
        get: operations["GetRefunds"];
        put?: never;
        /**
         * Create customer balance refund
         * @description <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
         *
         *     <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
         *     Funds will be refunded to the credit or debit card that was originally charged.</p>
         *
         *     <p>You can optionally refund only part of a charge.
         *     You can do so multiple times, until the entire charge has been refunded.</p>
         *
         *     <p>Once entirely refunded, a charge can’t be refunded again.
         *     This method will raise an error when called on an already-refunded charge,
         *     or when trying to refund more money than is left on a charge.</p>
         */
        post: operations["PostRefunds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/refunds/{refund}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a refund
         * @description <p>Retrieves the details of an existing refund.</p>
         */
        get: operations["GetRefundsRefund"];
        put?: never;
        /**
         * Update a refund
         * @description <p>Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.</p>
         *
         *     <p>This request only accepts <code>metadata</code> as an argument.</p>
         */
        post: operations["PostRefundsRefund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/refunds/{refund}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a refund
         * @description <p>Cancels a refund with a status of <code>requires_action</code>.</p>
         *
         *     <p>You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>
         */
        post: operations["PostRefundsRefundCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reporting/report_runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Report Runs
         * @description <p>Returns a list of Report Runs, with the most recent appearing first.</p>
         */
        get: operations["GetReportingReportRuns"];
        put?: never;
        /**
         * Create a Report Run
         * @description <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
         */
        post: operations["PostReportingReportRuns"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reporting/report_runs/{report_run}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Report Run
         * @description <p>Retrieves the details of an existing Report Run.</p>
         */
        get: operations["GetReportingReportRunsReportRun"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reporting/report_types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Report Types
         * @description <p>Returns a full list of Report Types.</p>
         */
        get: operations["GetReportingReportTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reporting/report_types/{report_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Report Type
         * @description <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
         */
        get: operations["GetReportingReportTypesReportType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all open reviews
         * @description <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
         */
        get: operations["GetReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reviews/{review}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a review
         * @description <p>Retrieves a <code>Review</code> object.</p>
         */
        get: operations["GetReviewsReview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reviews/{review}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve a review
         * @description <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
         */
        post: operations["PostReviewsReviewApprove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/setup_attempts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all SetupAttempts
         * @description <p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>
         */
        get: operations["GetSetupAttempts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/setup_intents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all SetupIntents
         * @description <p>Returns a list of SetupIntents.</p>
         */
        get: operations["GetSetupIntents"];
        put?: never;
        /**
         * Create a SetupIntent
         * @description <p>Creates a SetupIntent object.</p>
         *
         *     <p>After you create the SetupIntent, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
         *     it to collect any required permissions to charge the payment method later.</p>
         */
        post: operations["PostSetupIntents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/setup_intents/{intent}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a SetupIntent
         * @description <p>Retrieves the details of a SetupIntent that has previously been created. </p>
         *
         *     <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
         *
         *     <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
         */
        get: operations["GetSetupIntentsIntent"];
        put?: never;
        /**
         * Update a SetupIntent
         * @description <p>Updates a SetupIntent object.</p>
         */
        post: operations["PostSetupIntentsIntent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/setup_intents/{intent}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a SetupIntent
         * @description <p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
         *
         *     <p>After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error. You can’t cancel the SetupIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
         */
        post: operations["PostSetupIntentsIntentCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/setup_intents/{intent}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm a SetupIntent
         * @description <p>Confirm that your customer intends to set up the current or
         *     provided payment method. For example, you would confirm a SetupIntent
         *     when a customer hits the “Save” button on a payment method management
         *     page on your website.</p>
         *
         *     <p>If the selected payment method does not require any additional
         *     steps from the customer, the SetupIntent will transition to the
         *     <code>succeeded</code> status.</p>
         *
         *     <p>Otherwise, it will transition to the <code>requires_action</code> status and
         *     suggest additional actions via <code>next_action</code>. If setup fails,
         *     the SetupIntent will transition to the
         *     <code>requires_payment_method</code> status or the <code>canceled</code> status if the
         *     confirmation limit is reached.</p>
         */
        post: operations["PostSetupIntentsIntentConfirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/setup_intents/{intent}/verify_microdeposits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify microdeposits on a SetupIntent
         * @description <p>Verifies microdeposits on a SetupIntent object.</p>
         */
        post: operations["PostSetupIntentsIntentVerifyMicrodeposits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/shipping_rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all shipping rates
         * @description <p>Returns a list of your shipping rates.</p>
         */
        get: operations["GetShippingRates"];
        put?: never;
        /**
         * Create a shipping rate
         * @description <p>Creates a new shipping rate object.</p>
         */
        post: operations["PostShippingRates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/shipping_rates/{shipping_rate_token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a shipping rate
         * @description <p>Returns the shipping rate object with the given ID.</p>
         */
        get: operations["GetShippingRatesShippingRateToken"];
        put?: never;
        /**
         * Update a shipping rate
         * @description <p>Updates an existing shipping rate object.</p>
         */
        post: operations["PostShippingRatesShippingRateToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sigma/scheduled_query_runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all scheduled query runs
         * @description <p>Returns a list of scheduled query runs.</p>
         */
        get: operations["GetSigmaScheduledQueryRuns"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sigma/scheduled_query_runs/{scheduled_query_run}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a scheduled query run
         * @description <p>Retrieves the details of an scheduled query run.</p>
         */
        get: operations["GetSigmaScheduledQueryRunsScheduledQueryRun"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shares a source
         * @description <p>Creates a new source object.</p>
         */
        post: operations["PostSources"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sources/{source}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a source
         * @description <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
         */
        get: operations["GetSourcesSource"];
        put?: never;
        /**
         * Update a source
         * @description <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         *
         *     <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
         */
        post: operations["PostSourcesSource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sources/{source}/mandate_notifications/{mandate_notification}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Source MandateNotification
         * @description <p>Retrieves a new Source MandateNotification.</p>
         */
        get: operations["GetSourcesSourceMandateNotificationsMandateNotification"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sources/{source}/source_transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description <p>List source transactions for a given source.</p> */
        get: operations["GetSourcesSourceSourceTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sources/{source}/source_transactions/{source_transaction}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a source transaction
         * @description <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
         */
        get: operations["GetSourcesSourceSourceTransactionsSourceTransaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sources/{source}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description <p>Verify a given source.</p> */
        post: operations["PostSourcesSourceVerify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all subscription items
         * @description <p>Returns a list of your subscription items for a given subscription.</p>
         */
        get: operations["GetSubscriptionItems"];
        put?: never;
        /**
         * Create a subscription item
         * @description <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
         */
        post: operations["PostSubscriptionItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_items/{item}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a subscription item
         * @description <p>Retrieves the subscription item with the given ID.</p>
         */
        get: operations["GetSubscriptionItemsItem"];
        put?: never;
        /**
         * Update a subscription item
         * @description <p>Updates the plan or quantity of an item on a current subscription.</p>
         */
        post: operations["PostSubscriptionItemsItem"];
        /**
         * Delete a subscription item
         * @description <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
         */
        delete: operations["DeleteSubscriptionItemsItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_items/{subscription_item}/usage_record_summaries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all subscription item period summaries
         * @description <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>
         *
         *     <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
         */
        get: operations["GetSubscriptionItemsSubscriptionItemUsageRecordSummaries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_items/{subscription_item}/usage_records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a usage record
         * @description <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
         *
         *     <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
         *
         *     <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
         *
         *     <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
         */
        post: operations["PostSubscriptionItemsSubscriptionItemUsageRecords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all schedules
         * @description <p>Retrieves the list of your subscription schedules.</p>
         */
        get: operations["GetSubscriptionSchedules"];
        put?: never;
        /**
         * Create a schedule
         * @description <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
         */
        post: operations["PostSubscriptionSchedules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_schedules/{schedule}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a schedule
         * @description <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
         */
        get: operations["GetSubscriptionSchedulesSchedule"];
        put?: never;
        /**
         * Update a schedule
         * @description <p>Updates an existing subscription schedule.</p>
         */
        post: operations["PostSubscriptionSchedulesSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_schedules/{schedule}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a schedule
         * @description <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
         */
        post: operations["PostSubscriptionSchedulesScheduleCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_schedules/{schedule}/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Release a schedule
         * @description <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
         */
        post: operations["PostSubscriptionSchedulesScheduleRelease"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List subscriptions
         * @description <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
         */
        get: operations["GetSubscriptions"];
        put?: never;
        /**
         * Create a subscription
         * @description <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>
         *
         *     <p>When you create a subscription with <code>collection_method=charge_automatically</code>, the first invoice is finalized as part of the request.
         *     The <code>payment_behavior</code> parameter determines the exact behavior of the initial payment.</p>
         *
         *     <p>To start subscriptions where the first invoice always begins in a <code>draft</code> status, use <a href="/docs/billing/subscriptions/subscription-schedules#managing">subscription schedules</a> instead.
         *     Schedules provide the flexibility to model more complex billing configurations that change over time.</p>
         */
        post: operations["PostSubscriptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscriptions/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search subscriptions
         * @description <p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
         *     Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
         *     conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
         *     to an hour behind during outages. Search functionality is not available to merchants in India.</p>
         */
        get: operations["GetSubscriptionsSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscriptions/{subscription_exposed_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a subscription
         * @description <p>Retrieves the subscription with the given ID.</p>
         */
        get: operations["GetSubscriptionsSubscriptionExposedId"];
        put?: never;
        /**
         * Update a subscription
         * @description <p>Updates an existing subscription to match the specified parameters.
         *     When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.
         *     To preview how the proration is calculated, use the <a href="/docs/api/invoices/create_preview">create preview</a> endpoint.</p>
         *
         *     <p>By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a <currency>100</currency> price, they’ll be billed <currency>100</currency> immediately. If on May 15 they switch to a <currency>200</currency> price, then on June 1 they’ll be billed <currency>250</currency> (<currency>200</currency> for a renewal of her subscription, plus a <currency>50</currency> prorating adjustment for half of the previous month’s <currency>100</currency> difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.</p>
         *
         *     <p>Switching prices does not normally change the billing date or generate an immediate charge unless:</p>
         *
         *     <ul>
         *     <li>The billing interval is changed (for example, from monthly to yearly).</li>
         *     <li>The subscription moves from free to paid.</li>
         *     <li>A trial starts or ends.</li>
         *     </ul>
         *
         *     <p>In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how <a href="/docs/billing/subscriptions/upgrade-downgrade#immediate-payment">Stripe immediately attempts payment for subscription changes</a>.</p>
         *
         *     <p>If you want to charge for an upgrade immediately, pass <code>proration_behavior</code> as <code>always_invoice</code> to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass <code>create_prorations</code>, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually <a href="/docs/api/invoices/create">invoice the customer</a>.</p>
         *
         *     <p>If you don’t want to prorate, set the <code>proration_behavior</code> option to <code>none</code>. With this option, the customer is billed <currency>100</currency> on May 1 and <currency>200</currency> on June 1. Similarly, if you set <code>proration_behavior</code> to <code>none</code> when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.</p>
         *
         *     <p>Updating the quantity on a subscription many times in an hour may result in <a href="/docs/rate-limits">rate limiting</a>. If you need to bill for a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based billing</a> instead.</p>
         */
        post: operations["PostSubscriptionsSubscriptionExposedId"];
        /**
         * Cancel a subscription
         * @description <p>Cancels a customer’s subscription immediately. The customer won’t be charged again for the subscription. After it’s canceled, you can no longer update the subscription or its <a href="/metadata">metadata</a>.</p>
         *
         *     <p>Any pending invoice items that you’ve created are still charged at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations are also left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations are removed.</p>
         *
         *     <p>By default, upon subscription cancellation, Stripe stops automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
         */
        delete: operations["DeleteSubscriptionsSubscriptionExposedId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscriptions/{subscription_exposed_id}/discount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a subscription discount
         * @description <p>Removes the currently applied discount on a subscription.</p>
         */
        delete: operations["DeleteSubscriptionsSubscriptionExposedIdDiscount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscriptions/{subscription}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resume a subscription
         * @description <p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>
         */
        post: operations["PostSubscriptionsSubscriptionResume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax/calculations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Tax Calculation
         * @description <p>Calculates tax based on the input and returns a Tax <code>Calculation</code> object.</p>
         */
        post: operations["PostTaxCalculations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax/calculations/{calculation}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Tax Calculation
         * @description <p>Retrieves a Tax <code>Calculation</code> object, if the calculation hasn’t expired.</p>
         */
        get: operations["GetTaxCalculationsCalculation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax/calculations/{calculation}/line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a calculation's line items
         * @description <p>Retrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.</p>
         */
        get: operations["GetTaxCalculationsCalculationLineItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List registrations
         * @description <p>Returns a list of Tax <code>Registration</code> objects.</p>
         */
        get: operations["GetTaxRegistrations"];
        put?: never;
        /**
         * Create a registration
         * @description <p>Creates a new Tax <code>Registration</code> object.</p>
         */
        post: operations["PostTaxRegistrations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax/registrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a registration
         * @description <p>Returns a Tax <code>Registration</code> object.</p>
         */
        get: operations["GetTaxRegistrationsId"];
        put?: never;
        /**
         * Update a registration
         * @description <p>Updates an existing Tax <code>Registration</code> object.</p>
         *
         *     <p>A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting <code>expires_at</code>.</p>
         */
        post: operations["PostTaxRegistrationsId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve settings
         * @description <p>Retrieves Tax <code>Settings</code> for a merchant.</p>
         */
        get: operations["GetTaxSettings"];
        put?: never;
        /**
         * Update settings
         * @description <p>Updates Tax <code>Settings</code> parameters used in tax calculations. All parameters are editable but none can be removed once set.</p>
         */
        post: operations["PostTaxSettings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax/transactions/create_from_calculation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a transaction from a calculation
         * @description <p>Creates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.</p>
         */
        post: operations["PostTaxTransactionsCreateFromCalculation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax/transactions/create_reversal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a reversal transaction
         * @description <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>
         */
        post: operations["PostTaxTransactionsCreateReversal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax/transactions/{transaction}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a transaction
         * @description <p>Retrieves a Tax <code>Transaction</code> object.</p>
         */
        get: operations["GetTaxTransactionsTransaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax/transactions/{transaction}/line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a transaction's line items
         * @description <p>Retrieves the line items of a committed standalone transaction as a collection.</p>
         */
        get: operations["GetTaxTransactionsTransactionLineItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax_codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all tax codes
         * @description <p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
         */
        get: operations["GetTaxCodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax_codes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a tax code
         * @description <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
         */
        get: operations["GetTaxCodesId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax_ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all tax IDs
         * @description <p>Returns a list of tax IDs.</p>
         */
        get: operations["GetTaxIds"];
        put?: never;
        /**
         * Create a tax ID
         * @description <p>Creates a new account or customer <code>tax_id</code> object.</p>
         */
        post: operations["PostTaxIds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax_ids/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a tax ID
         * @description <p>Retrieves an account or customer <code>tax_id</code> object.</p>
         */
        get: operations["GetTaxIdsId"];
        put?: never;
        post?: never;
        /**
         * Delete a tax ID
         * @description <p>Deletes an existing account or customer <code>tax_id</code> object.</p>
         */
        delete: operations["DeleteTaxIdsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax_rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all tax rates
         * @description <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
         */
        get: operations["GetTaxRates"];
        put?: never;
        /**
         * Create a tax rate
         * @description <p>Creates a new tax rate.</p>
         */
        post: operations["PostTaxRates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tax_rates/{tax_rate}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a tax rate
         * @description <p>Retrieves a tax rate with the given ID</p>
         */
        get: operations["GetTaxRatesTaxRate"];
        put?: never;
        /**
         * Update a tax rate
         * @description <p>Updates an existing tax rate.</p>
         */
        post: operations["PostTaxRatesTaxRate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Configurations
         * @description <p>Returns a list of <code>Configuration</code> objects.</p>
         */
        get: operations["GetTerminalConfigurations"];
        put?: never;
        /**
         * Create a Configuration
         * @description <p>Creates a new <code>Configuration</code> object.</p>
         */
        post: operations["PostTerminalConfigurations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/configurations/{configuration}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Configuration
         * @description <p>Retrieves a <code>Configuration</code> object.</p>
         */
        get: operations["GetTerminalConfigurationsConfiguration"];
        put?: never;
        /**
         * Update a Configuration
         * @description <p>Updates a new <code>Configuration</code> object.</p>
         */
        post: operations["PostTerminalConfigurationsConfiguration"];
        /**
         * Delete a Configuration
         * @description <p>Deletes a <code>Configuration</code> object.</p>
         */
        delete: operations["DeleteTerminalConfigurationsConfiguration"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/connection_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Connection Token
         * @description <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
         */
        post: operations["PostTerminalConnectionTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Locations
         * @description <p>Returns a list of <code>Location</code> objects.</p>
         */
        get: operations["GetTerminalLocations"];
        put?: never;
        /**
         * Create a Location
         * @description <p>Creates a new <code>Location</code> object.
         *     For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
         */
        post: operations["PostTerminalLocations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/locations/{location}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Location
         * @description <p>Retrieves a <code>Location</code> object.</p>
         */
        get: operations["GetTerminalLocationsLocation"];
        put?: never;
        /**
         * Update a Location
         * @description <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         */
        post: operations["PostTerminalLocationsLocation"];
        /**
         * Delete a Location
         * @description <p>Deletes a <code>Location</code> object.</p>
         */
        delete: operations["DeleteTerminalLocationsLocation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/readers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Readers
         * @description <p>Returns a list of <code>Reader</code> objects.</p>
         */
        get: operations["GetTerminalReaders"];
        put?: never;
        /**
         * Create a Reader
         * @description <p>Creates a new <code>Reader</code> object.</p>
         */
        post: operations["PostTerminalReaders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/readers/{reader}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Reader
         * @description <p>Retrieves a <code>Reader</code> object.</p>
         */
        get: operations["GetTerminalReadersReader"];
        put?: never;
        /**
         * Update a Reader
         * @description <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         */
        post: operations["PostTerminalReadersReader"];
        /**
         * Delete a Reader
         * @description <p>Deletes a <code>Reader</code> object.</p>
         */
        delete: operations["DeleteTerminalReadersReader"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/readers/{reader}/cancel_action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel the current reader action
         * @description <p>Cancels the current reader action.</p>
         */
        post: operations["PostTerminalReadersReaderCancelAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/readers/{reader}/process_payment_intent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Hand-off a PaymentIntent to a Reader
         * @description <p>Initiates a payment flow on a Reader.</p>
         */
        post: operations["PostTerminalReadersReaderProcessPaymentIntent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/readers/{reader}/process_setup_intent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Hand-off a SetupIntent to a Reader
         * @description <p>Initiates a setup intent flow on a Reader.</p>
         */
        post: operations["PostTerminalReadersReaderProcessSetupIntent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/readers/{reader}/refund_payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refund a Charge or a PaymentIntent in-person
         * @description <p>Initiates a refund on a Reader</p>
         */
        post: operations["PostTerminalReadersReaderRefundPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terminal/readers/{reader}/set_reader_display": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set reader display
         * @description <p>Sets reader display to show cart details.</p>
         */
        post: operations["PostTerminalReadersReaderSetReaderDisplay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/confirmation_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a test Confirmation Token
         * @description <p>Creates a test mode Confirmation Token server side for your integration tests.</p>
         */
        post: operations["PostTestHelpersConfirmationTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/customers/{customer}/fund_cash_balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fund a test mode cash balance
         * @description <p>Create an incoming testmode bank transfer</p>
         */
        post: operations["PostTestHelpersCustomersCustomerFundCashBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/authorizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a test-mode authorization
         * @description <p>Create a test-mode authorization.</p>
         */
        post: operations["PostTestHelpersIssuingAuthorizations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/authorizations/{authorization}/capture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture a test-mode authorization
         * @description <p>Capture a test-mode authorization.</p>
         */
        post: operations["PostTestHelpersIssuingAuthorizationsAuthorizationCapture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/authorizations/{authorization}/expire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Expire a test-mode authorization
         * @description <p>Expire a test-mode Authorization.</p>
         */
        post: operations["PostTestHelpersIssuingAuthorizationsAuthorizationExpire"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/authorizations/{authorization}/finalize_amount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finalize a test-mode authorization's amount
         * @description <p>Finalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.</p>
         */
        post: operations["PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/authorizations/{authorization}/fraud_challenges/respond": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Respond to fraud challenge
         * @description <p>Respond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.</p>
         */
        post: operations["PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/authorizations/{authorization}/increment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Increment a test-mode authorization
         * @description <p>Increment a test-mode Authorization.</p>
         */
        post: operations["PostTestHelpersIssuingAuthorizationsAuthorizationIncrement"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/authorizations/{authorization}/reverse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reverse a test-mode authorization
         * @description <p>Reverse a test-mode Authorization.</p>
         */
        post: operations["PostTestHelpersIssuingAuthorizationsAuthorizationReverse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/cards/{card}/shipping/deliver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deliver a testmode card
         * @description <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>
         */
        post: operations["PostTestHelpersIssuingCardsCardShippingDeliver"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/cards/{card}/shipping/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fail a testmode card
         * @description <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
         */
        post: operations["PostTestHelpersIssuingCardsCardShippingFail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/cards/{card}/shipping/return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Return a testmode card
         * @description <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
         */
        post: operations["PostTestHelpersIssuingCardsCardShippingReturn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/cards/{card}/shipping/ship": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ship a testmode card
         * @description <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
         */
        post: operations["PostTestHelpersIssuingCardsCardShippingShip"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/cards/{card}/shipping/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a testmode card
         * @description <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>submitted</code>. This method requires Stripe Version ‘2024-09-30.acacia’ or later.</p>
         */
        post: operations["PostTestHelpersIssuingCardsCardShippingSubmit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate a testmode personalization design
         * @description <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>
         */
        post: operations["PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate a testmode personalization design
         * @description <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>
         */
        post: operations["PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reject a testmode personalization design
         * @description <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>
         */
        post: operations["PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/settlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a test-mode settleemnt
         * @description <p>Allows the user to create an Issuing settlement.</p>
         */
        post: operations["PostTestHelpersIssuingSettlements"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/transactions/create_force_capture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a test-mode force capture
         * @description <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>
         */
        post: operations["PostTestHelpersIssuingTransactionsCreateForceCapture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/transactions/create_unlinked_refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a test-mode unlinked refund
         * @description <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>
         */
        post: operations["PostTestHelpersIssuingTransactionsCreateUnlinkedRefund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/issuing/transactions/{transaction}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refund a test-mode transaction
         * @description <p>Refund a test-mode Transaction.</p>
         */
        post: operations["PostTestHelpersIssuingTransactionsTransactionRefund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/refunds/{refund}/expire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Expire a pending refund.
         * @description <p>Expire a refund with a status of <code>requires_action</code>.</p>
         */
        post: operations["PostTestHelpersRefundsRefundExpire"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/terminal/readers/{reader}/present_payment_method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate presenting a payment method
         * @description <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
         */
        post: operations["PostTestHelpersTerminalReadersReaderPresentPaymentMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/test_clocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all test clocks
         * @description <p>Returns a list of your test clocks.</p>
         */
        get: operations["GetTestHelpersTestClocks"];
        put?: never;
        /**
         * Create a test clock
         * @description <p>Creates a new test clock that can be attached to new customers and quotes.</p>
         */
        post: operations["PostTestHelpersTestClocks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/test_clocks/{test_clock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a test clock
         * @description <p>Retrieves a test clock.</p>
         */
        get: operations["GetTestHelpersTestClocksTestClock"];
        put?: never;
        post?: never;
        /**
         * Delete a test clock
         * @description <p>Deletes a test clock.</p>
         */
        delete: operations["DeleteTestHelpersTestClocksTestClock"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/test_clocks/{test_clock}/advance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Advance a test clock
         * @description <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
         */
        post: operations["PostTestHelpersTestClocksTestClockAdvance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/inbound_transfers/{id}/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Fail an InboundTransfer
         * @description <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
         */
        post: operations["PostTestHelpersTreasuryInboundTransfersIdFail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/inbound_transfers/{id}/return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Return an InboundTransfer
         * @description <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>
         */
        post: operations["PostTestHelpersTreasuryInboundTransfersIdReturn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/inbound_transfers/{id}/succeed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Succeed an InboundTransfer
         * @description <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
         */
        post: operations["PostTestHelpersTreasuryInboundTransfersIdSucceed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/outbound_payments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Update an OutboundPayment
         * @description <p>Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
         */
        post: operations["PostTestHelpersTreasuryOutboundPaymentsId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/outbound_payments/{id}/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Fail an OutboundPayment
         * @description <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
         */
        post: operations["PostTestHelpersTreasuryOutboundPaymentsIdFail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/outbound_payments/{id}/post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Post an OutboundPayment
         * @description <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
         */
        post: operations["PostTestHelpersTreasuryOutboundPaymentsIdPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/outbound_payments/{id}/return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Return an OutboundPayment
         * @description <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
         */
        post: operations["PostTestHelpersTreasuryOutboundPaymentsIdReturn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Update an OutboundTransfer
         * @description <p>Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
         */
        post: operations["PostTestHelpersTreasuryOutboundTransfersOutboundTransfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Fail an OutboundTransfer
         * @description <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
         */
        post: operations["PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Post an OutboundTransfer
         * @description <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
         */
        post: operations["PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Return an OutboundTransfer
         * @description <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
         */
        post: operations["PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/received_credits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Create a ReceivedCredit
         * @description <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
         */
        post: operations["PostTestHelpersTreasuryReceivedCredits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/test_helpers/treasury/received_debits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test mode: Create a ReceivedDebit
         * @description <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
         */
        post: operations["PostTestHelpersTreasuryReceivedDebits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a CVC update token
         * @description <p>Creates a single-use token that represents a bank account’s details.
         *     You can use this token with any v1 API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href="#accounts">connected account</a> where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a> is <code>application</code>, which includes Custom accounts.</p>
         */
        post: operations["PostTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tokens/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a token
         * @description <p>Retrieves the token with the given ID.</p>
         */
        get: operations["GetTokensToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/topups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all top-ups
         * @description <p>Returns a list of top-ups.</p>
         */
        get: operations["GetTopups"];
        put?: never;
        /**
         * Create a top-up
         * @description <p>Top up the balance of an account</p>
         */
        post: operations["PostTopups"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/topups/{topup}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a top-up
         * @description <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
         */
        get: operations["GetTopupsTopup"];
        put?: never;
        /**
         * Update a top-up
         * @description <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
         */
        post: operations["PostTopupsTopup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/topups/{topup}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a top-up
         * @description <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
         */
        post: operations["PostTopupsTopupCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all transfers
         * @description <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
         */
        get: operations["GetTransfers"];
        put?: never;
        /**
         * Create a transfer
         * @description <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
         */
        post: operations["PostTransfers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transfers/{id}/reversals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all reversals
         * @description <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
         */
        get: operations["GetTransfersIdReversals"];
        put?: never;
        /**
         * Create a transfer reversal
         * @description <p>When you create a new reversal, you must specify a transfer to create it on.</p>
         *
         *     <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
         *
         *     <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
         */
        post: operations["PostTransfersIdReversals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transfers/{transfer}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a transfer
         * @description <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
         */
        get: operations["GetTransfersTransfer"];
        put?: never;
        /**
         * Update a transfer
         * @description <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         *
         *     <p>This request accepts only metadata as an argument.</p>
         */
        post: operations["PostTransfersTransfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transfers/{transfer}/reversals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a reversal
         * @description <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
         */
        get: operations["GetTransfersTransferReversalsId"];
        put?: never;
        /**
         * Update a reversal
         * @description <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
         *
         *     <p>This request only accepts metadata and description as arguments.</p>
         */
        post: operations["PostTransfersTransferReversalsId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/credit_reversals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all CreditReversals
         * @description <p>Returns a list of CreditReversals.</p>
         */
        get: operations["GetTreasuryCreditReversals"];
        put?: never;
        /**
         * Create a CreditReversal
         * @description <p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>
         */
        post: operations["PostTreasuryCreditReversals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/credit_reversals/{credit_reversal}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a CreditReversal
         * @description <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>
         */
        get: operations["GetTreasuryCreditReversalsCreditReversal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/debit_reversals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all DebitReversals
         * @description <p>Returns a list of DebitReversals.</p>
         */
        get: operations["GetTreasuryDebitReversals"];
        put?: never;
        /**
         * Create a DebitReversal
         * @description <p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>
         */
        post: operations["PostTreasuryDebitReversals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/debit_reversals/{debit_reversal}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a DebitReversal
         * @description <p>Retrieves a DebitReversal object.</p>
         */
        get: operations["GetTreasuryDebitReversalsDebitReversal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/financial_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all FinancialAccounts
         * @description <p>Returns a list of FinancialAccounts.</p>
         */
        get: operations["GetTreasuryFinancialAccounts"];
        put?: never;
        /**
         * Create a FinancialAccount
         * @description <p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>
         */
        post: operations["PostTreasuryFinancialAccounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/financial_accounts/{financial_account}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a FinancialAccount
         * @description <p>Retrieves the details of a FinancialAccount.</p>
         */
        get: operations["GetTreasuryFinancialAccountsFinancialAccount"];
        put?: never;
        /**
         * Update a FinancialAccount
         * @description <p>Updates the details of a FinancialAccount.</p>
         */
        post: operations["PostTreasuryFinancialAccountsFinancialAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/financial_accounts/{financial_account}/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve FinancialAccount Features
         * @description <p>Retrieves Features information associated with the FinancialAccount.</p>
         */
        get: operations["GetTreasuryFinancialAccountsFinancialAccountFeatures"];
        put?: never;
        /**
         * Update FinancialAccount Features
         * @description <p>Updates the Features associated with a FinancialAccount.</p>
         */
        post: operations["PostTreasuryFinancialAccountsFinancialAccountFeatures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/inbound_transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all InboundTransfers
         * @description <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
         */
        get: operations["GetTreasuryInboundTransfers"];
        put?: never;
        /**
         * Create an InboundTransfer
         * @description <p>Creates an InboundTransfer.</p>
         */
        post: operations["PostTreasuryInboundTransfers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/inbound_transfers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an InboundTransfer
         * @description <p>Retrieves the details of an existing InboundTransfer.</p>
         */
        get: operations["GetTreasuryInboundTransfersId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/inbound_transfers/{inbound_transfer}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an InboundTransfer
         * @description <p>Cancels an InboundTransfer.</p>
         */
        post: operations["PostTreasuryInboundTransfersInboundTransferCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/outbound_payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all OutboundPayments
         * @description <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
         */
        get: operations["GetTreasuryOutboundPayments"];
        put?: never;
        /**
         * Create an OutboundPayment
         * @description <p>Creates an OutboundPayment.</p>
         */
        post: operations["PostTreasuryOutboundPayments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/outbound_payments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an OutboundPayment
         * @description <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>
         */
        get: operations["GetTreasuryOutboundPaymentsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/outbound_payments/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an OutboundPayment
         * @description <p>Cancel an OutboundPayment.</p>
         */
        post: operations["PostTreasuryOutboundPaymentsIdCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/outbound_transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all OutboundTransfers
         * @description <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
         */
        get: operations["GetTreasuryOutboundTransfers"];
        put?: never;
        /**
         * Create an OutboundTransfer
         * @description <p>Creates an OutboundTransfer.</p>
         */
        post: operations["PostTreasuryOutboundTransfers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/outbound_transfers/{outbound_transfer}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an OutboundTransfer
         * @description <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>
         */
        get: operations["GetTreasuryOutboundTransfersOutboundTransfer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/outbound_transfers/{outbound_transfer}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an OutboundTransfer
         * @description <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
         */
        post: operations["PostTreasuryOutboundTransfersOutboundTransferCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/received_credits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all ReceivedCredits
         * @description <p>Returns a list of ReceivedCredits.</p>
         */
        get: operations["GetTreasuryReceivedCredits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/received_credits/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a ReceivedCredit
         * @description <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>
         */
        get: operations["GetTreasuryReceivedCreditsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/received_debits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all ReceivedDebits
         * @description <p>Returns a list of ReceivedDebits.</p>
         */
        get: operations["GetTreasuryReceivedDebits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/received_debits/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a ReceivedDebit
         * @description <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>
         */
        get: operations["GetTreasuryReceivedDebitsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/transaction_entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all TransactionEntries
         * @description <p>Retrieves a list of TransactionEntry objects.</p>
         */
        get: operations["GetTreasuryTransactionEntries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/transaction_entries/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a TransactionEntry
         * @description <p>Retrieves a TransactionEntry object.</p>
         */
        get: operations["GetTreasuryTransactionEntriesId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Transactions
         * @description <p>Retrieves a list of Transaction objects.</p>
         */
        get: operations["GetTreasuryTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/treasury/transactions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Transaction
         * @description <p>Retrieves the details of an existing Transaction.</p>
         */
        get: operations["GetTreasuryTransactionsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/webhook_endpoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all webhook endpoints
         * @description <p>Returns a list of your webhook endpoints.</p>
         */
        get: operations["GetWebhookEndpoints"];
        put?: never;
        /**
         * Create a webhook endpoint
         * @description <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>
         */
        post: operations["PostWebhookEndpoints"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/webhook_endpoints/{webhook_endpoint}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a webhook endpoint
         * @description <p>Retrieves the webhook endpoint with the given ID.</p>
         */
        get: operations["GetWebhookEndpointsWebhookEndpoint"];
        put?: never;
        /**
         * Update a webhook endpoint
         * @description <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
         */
        post: operations["PostWebhookEndpointsWebhookEndpoint"];
        /**
         * Delete a webhook endpoint
         * @description <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>
         */
        delete: operations["DeleteWebhookEndpointsWebhookEndpoint"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Account
         * @description This is an object representing a Stripe account. You can retrieve it to see
         *     properties on the account like its current requirements or if the account is
         *     enabled to make live charges or receive payouts.
         *
         *     For accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)
         *     is `application`, which includes Custom accounts, the properties below are always
         *     returned.
         *
         *     For accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)
         *     is `stripe`, which includes Standard and Express accounts, some properties are only returned
         *     until you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions)
         *     to start Connect Onboarding. Learn about the [differences between accounts](/connect/accounts).
         */
        account: {
            /** @description Business information about the account. */
            business_profile?: components["schemas"]["account_business_profile"] | null;
            /**
             * @description The business type. After you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property is only returned for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
             * @enum {string|null}
             */
            business_type?: "company" | "government_entity" | "individual" | "non_profit" | null;
            capabilities?: components["schemas"]["account_capabilities"];
            /** @description Whether the account can process charges. */
            charges_enabled?: boolean;
            company?: components["schemas"]["legal_entity_company"];
            controller?: components["schemas"]["account_unification_account_controller"];
            /** @description The account's country. */
            country?: string;
            /**
             * Format: unix-time
             * @description Time at which the account was connected. Measured in seconds since the Unix epoch.
             */
            created?: number;
            /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
            default_currency?: string;
            /** @description Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](/connect/onboarding) to finish submitting account details. */
            details_submitted?: boolean;
            /** @description An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform. */
            email?: string | null;
            /**
             * ExternalAccountList
             * @description External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true.
             */
            external_accounts?: {
                /** @description The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
                data: (components["schemas"]["bank_account"] | components["schemas"]["card"])[];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            future_requirements?: components["schemas"]["account_future_requirements"];
            /** @description The groups associated with the account. */
            groups?: components["schemas"]["account_group_membership"] | null;
            /** @description Unique identifier for the object. */
            id: string;
            individual?: components["schemas"]["person"];
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "account";
            /** @description Whether the funds in this account can be paid out. */
            payouts_enabled?: boolean;
            requirements?: components["schemas"]["account_requirements"];
            /** @description Options for customizing how the account functions within Stripe. */
            settings?: components["schemas"]["account_settings"] | null;
            tos_acceptance?: components["schemas"]["account_tos_acceptance"];
            /**
             * @description The Stripe account type. Can be `standard`, `express`, `custom`, or `none`.
             * @enum {string}
             */
            type?: "custom" | "express" | "none" | "standard";
        };
        /** AccountAnnualRevenue */
        account_annual_revenue: {
            /** @description A non-negative integer representing the amount in the [smallest currency unit](/currencies#zero-decimal). */
            amount?: number | null;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency?: string | null;
            /** @description The close-out date of the preceding fiscal year in ISO 8601 format. E.g. 2023-12-31 for the 31st of December, 2023. */
            fiscal_year_end?: string | null;
        };
        /** AccountBacsDebitPaymentsSettings */
        account_bacs_debit_payments_settings: {
            /** @description The Bacs Direct Debit display name for this account. For payments made with Bacs Direct Debit, this name appears on the mandate as the statement descriptor. Mobile banking apps display it as the name of the business. To use custom branding, set the Bacs Direct Debit Display Name during or right after creation. Custom branding incurs an additional monthly fee for the platform. The fee appears 5 business days after requesting Bacs. If you don't set the display name before requesting Bacs capability, it's automatically set as "Stripe" and the account is onboarded to Stripe branding, which is free. */
            display_name?: string | null;
            /** @description The Bacs Direct Debit Service user number for this account. For payments made with Bacs Direct Debit, this number is a unique identifier of the account with our banking partners. */
            service_user_number?: string | null;
        };
        /** AccountBrandingSettings */
        account_branding_settings: {
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px. */
            icon?: (string | components["schemas"]["file"]) | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px. */
            logo?: (string | components["schemas"]["file"]) | null;
            /** @description A CSS hex color value representing the primary branding color for this account */
            primary_color?: string | null;
            /** @description A CSS hex color value representing the secondary branding color for this account */
            secondary_color?: string | null;
        };
        /** AccountBusinessProfile */
        account_business_profile: {
            /** @description The applicant's gross annual revenue for its preceding fiscal year. */
            annual_revenue?: components["schemas"]["account_annual_revenue"] | null;
            /** @description An estimated upper bound of employees, contractors, vendors, etc. currently working for the business. */
            estimated_worker_count?: number | null;
            /** @description [The merchant category code for the account](/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
            mcc?: string | null;
            monthly_estimated_revenue?: components["schemas"]["account_monthly_estimated_revenue"];
            /** @description The customer-facing business name. */
            name?: string | null;
            /** @description Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. */
            product_description?: string | null;
            /** @description A publicly available mailing address for sending support issues to. */
            support_address?: components["schemas"]["address"] | null;
            /** @description A publicly available email address for sending support issues to. */
            support_email?: string | null;
            /** @description A publicly available phone number to call with support issues. */
            support_phone?: string | null;
            /** @description A publicly available website for handling support issues. */
            support_url?: string | null;
            /** @description The business's publicly available website. */
            url?: string | null;
        };
        /** AccountCapabilities */
        account_capabilities: {
            /**
             * @description The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
             * @enum {string}
             */
            acss_debit_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
             * @enum {string}
             */
            affirm_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
             * @enum {string}
             */
            afterpay_clearpay_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Alma capability of the account, or whether the account can directly process Alma payments.
             * @enum {string}
             */
            alma_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the AmazonPay capability of the account, or whether the account can directly process AmazonPay payments.
             * @enum {string}
             */
            amazon_pay_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
             * @enum {string}
             */
            au_becs_debit_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
             * @enum {string}
             */
            bacs_debit_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
             * @enum {string}
             */
            bancontact_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
             * @enum {string}
             */
            bank_transfer_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the blik payments capability of the account, or whether the account can directly process blik charges.
             * @enum {string}
             */
            blik_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
             * @enum {string}
             */
            boleto_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
             * @enum {string}
             */
            card_issuing?: "active" | "inactive" | "pending";
            /**
             * @description The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
             * @enum {string}
             */
            card_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
             * @enum {string}
             */
            cartes_bancaires_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments.
             * @enum {string}
             */
            cashapp_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
             * @enum {string}
             */
            eps_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
             * @enum {string}
             */
            fpx_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the GB customer_balance payments (GBP currency) capability of the account, or whether the account can directly process GB customer_balance charges.
             * @enum {string}
             */
            gb_bank_transfer_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
             * @enum {string}
             */
            giropay_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
             * @enum {string}
             */
            grabpay_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
             * @enum {string}
             */
            ideal_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India.
             * @enum {string}
             */
            india_international_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
             * @enum {string}
             */
            jcb_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Japanese customer_balance payments (JPY currency) capability of the account, or whether the account can directly process Japanese customer_balance charges.
             * @enum {string}
             */
            jp_bank_transfer_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the KakaoPay capability of the account, or whether the account can directly process KakaoPay payments.
             * @enum {string}
             */
            kakao_pay_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
             * @enum {string}
             */
            klarna_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
             * @enum {string}
             */
            konbini_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the KrCard capability of the account, or whether the account can directly process KrCard payments.
             * @enum {string}
             */
            kr_card_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the legacy payments capability of the account.
             * @enum {string}
             */
            legacy_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the link_payments capability of the account, or whether the account can directly process Link charges.
             * @enum {string}
             */
            link_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the MobilePay capability of the account, or whether the account can directly process MobilePay charges.
             * @enum {string}
             */
            mobilepay_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Multibanco payments capability of the account, or whether the account can directly process Multibanco charges.
             * @enum {string}
             */
            multibanco_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Mexican customer_balance payments (MXN currency) capability of the account, or whether the account can directly process Mexican customer_balance charges.
             * @enum {string}
             */
            mx_bank_transfer_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the NaverPay capability of the account, or whether the account can directly process NaverPay payments.
             * @enum {string}
             */
            naver_pay_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
             * @enum {string}
             */
            oxxo_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
             * @enum {string}
             */
            p24_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Payco capability of the account, or whether the account can directly process Payco payments.
             * @enum {string}
             */
            payco_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
             * @enum {string}
             */
            paynow_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
             * @enum {string}
             */
            promptpay_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments.
             * @enum {string}
             */
            revolut_pay_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the SamsungPay capability of the account, or whether the account can directly process SamsungPay payments.
             * @enum {string}
             */
            samsung_pay_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the SEPA customer_balance payments (EUR currency) capability of the account, or whether the account can directly process SEPA customer_balance charges.
             * @enum {string}
             */
            sepa_bank_transfer_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
             * @enum {string}
             */
            sepa_debit_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
             * @enum {string}
             */
            sofort_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Swish capability of the account, or whether the account can directly process Swish payments.
             * @enum {string}
             */
            swish_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the tax reporting 1099-K (US) capability of the account.
             * @enum {string}
             */
            tax_reporting_us_1099_k?: "active" | "inactive" | "pending";
            /**
             * @description The status of the tax reporting 1099-MISC (US) capability of the account.
             * @enum {string}
             */
            tax_reporting_us_1099_misc?: "active" | "inactive" | "pending";
            /**
             * @description The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
             * @enum {string}
             */
            transfers?: "active" | "inactive" | "pending";
            /**
             * @description The status of the banking capability, or whether the account can have bank accounts.
             * @enum {string}
             */
            treasury?: "active" | "inactive" | "pending";
            /**
             * @description The status of the TWINT capability of the account, or whether the account can directly process TWINT charges.
             * @enum {string}
             */
            twint_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
             * @enum {string}
             */
            us_bank_account_ach_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the US customer_balance payments (USD currency) capability of the account, or whether the account can directly process US customer_balance charges.
             * @enum {string}
             */
            us_bank_transfer_payments?: "active" | "inactive" | "pending";
            /**
             * @description The status of the Zip capability of the account, or whether the account can directly process Zip charges.
             * @enum {string}
             */
            zip_payments?: "active" | "inactive" | "pending";
        };
        /** AccountCapabilityFutureRequirements */
        account_capability_future_requirements: {
            /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            /**
             * Format: unix-time
             * @description Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on the capability's enablement state prior to transitioning.
             */
            current_deadline?: number | null;
            /** @description Fields that need to be collected to keep the capability enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
            currently_due: string[];
            /**
             * @description This is typed as an enum for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is null because fields in `future_requirements` will never disable the account.
             * @enum {string|null}
             */
            disabled_reason?: "other" | "paused.inactivity" | "pending.onboarding" | "pending.review" | "platform_disabled" | "platform_paused" | "rejected.inactivity" | "rejected.other" | "rejected.unsupported_business" | "requirements.fields_needed" | null;
            /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
            errors: components["schemas"]["account_requirements_error"][];
            /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well. */
            eventually_due: string[];
            /** @description Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
            past_due: string[];
            /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending. */
            pending_verification: string[];
        };
        /** AccountCapabilityRequirements */
        account_capability_requirements: {
            /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            /**
             * Format: unix-time
             * @description Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected.
             */
            current_deadline?: number | null;
            /** @description Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled. */
            currently_due: string[];
            /**
             * @description Description of why the capability is disabled. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification).
             * @enum {string|null}
             */
            disabled_reason?: "other" | "paused.inactivity" | "pending.onboarding" | "pending.review" | "platform_disabled" | "platform_paused" | "rejected.inactivity" | "rejected.other" | "rejected.unsupported_business" | "requirements.fields_needed" | null;
            /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
            errors: components["schemas"]["account_requirements_error"][];
            /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
            eventually_due: string[];
            /** @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account. */
            past_due: string[];
            /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
            pending_verification: string[];
        };
        /** AccountCardIssuingSettings */
        account_card_issuing_settings: {
            tos_acceptance?: components["schemas"]["card_issuing_account_terms_of_service"];
        };
        /** AccountCardPaymentsSettings */
        account_card_payments_settings: {
            decline_on?: components["schemas"]["account_decline_charge_on"];
            /** @description The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
            statement_descriptor_prefix?: string | null;
            /** @description The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion. */
            statement_descriptor_prefix_kana?: string | null;
            /** @description The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion. */
            statement_descriptor_prefix_kanji?: string | null;
        };
        /** AccountDashboardSettings */
        account_dashboard_settings: {
            /** @description The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. */
            display_name?: string | null;
            /** @description The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). */
            timezone?: string | null;
        };
        /** AccountDeclineChargeOn */
        account_decline_charge_on: {
            /** @description Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
            avs_failure: boolean;
            /** @description Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
            cvc_failure: boolean;
        };
        /** AccountFutureRequirements */
        account_future_requirements: {
            /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            /**
             * Format: unix-time
             * @description Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
             */
            current_deadline?: number | null;
            /** @description Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
            currently_due?: string[] | null;
            /**
             * @description This is typed as an enum for consistency with `requirements.disabled_reason`.
             * @enum {string|null}
             */
            disabled_reason?: "action_required.requested_capabilities" | "listed" | "other" | "platform_paused" | "rejected.fraud" | "rejected.incomplete_verification" | "rejected.listed" | "rejected.other" | "rejected.platform_fraud" | "rejected.platform_other" | "rejected.platform_terms_of_service" | "rejected.terms_of_service" | "requirements.past_due" | "requirements.pending_verification" | "under_review" | null;
            /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
            errors?: components["schemas"]["account_requirements_error"][] | null;
            /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well. */
            eventually_due?: string[] | null;
            /** @description Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
            past_due?: string[] | null;
            /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending. */
            pending_verification?: string[] | null;
        };
        /** AccountGroupMembership */
        account_group_membership: {
            /** @description The group the account is in to determine their payments pricing, and null if the account is on customized pricing. [See the Platform pricing tool documentation](https://stripe.com/docs/connect/platform-pricing-tools) for details. */
            payments_pricing?: string | null;
        };
        /** AccountInvoicesSettings */
        account_invoices_settings: {
            /** @description The list of default Account Tax IDs to automatically include on invoices. Account Tax IDs get added when an invoice is finalized. */
            default_account_tax_ids?: (string | components["schemas"]["tax_id"])[] | null;
        };
        /**
         * AccountLink
         * @description Account Links are the means by which a Connect platform grants a connected account permission to access
         *     Stripe-hosted applications, such as Connect Onboarding.
         *
         *     Related guide: [Connect Onboarding](https://stripe.com/docs/connect/custom/hosted-onboarding)
         */
        account_link: {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /**
             * Format: unix-time
             * @description The timestamp at which this account link will expire.
             */
            expires_at: number;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "account_link";
            /** @description The URL for the account link. */
            url: string;
        };
        /** AccountMonthlyEstimatedRevenue */
        account_monthly_estimated_revenue: {
            /** @description A non-negative integer representing how much to charge in the [smallest currency unit](/currencies#zero-decimal). */
            amount: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
        };
        /** AccountPaymentsSettings */
        account_payments_settings: {
            /** @description The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. */
            statement_descriptor?: string | null;
            /** @description The Kana variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
            statement_descriptor_kana?: string | null;
            /** @description The Kanji variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
            statement_descriptor_kanji?: string | null;
            /** @description The Kana variation of `statement_descriptor_prefix` used for card charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
            statement_descriptor_prefix_kana?: string | null;
            /** @description The Kanji variation of `statement_descriptor_prefix` used for card charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
            statement_descriptor_prefix_kanji?: string | null;
        };
        /** AccountPayoutSettings */
        account_payout_settings: {
            /** @description A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See [Understanding Connect account balances](/connect/account-balances) for details. The default value is `false` when [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, otherwise `true`. */
            debit_negative_balances: boolean;
            schedule: components["schemas"]["transfer_schedule"];
            /** @description The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
            statement_descriptor?: string | null;
        };
        /** AccountRequirements */
        account_requirements: {
            /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            /**
             * Format: unix-time
             * @description Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
             */
            current_deadline?: number | null;
            /** @description Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
            currently_due?: string[] | null;
            /**
             * @description If the account is disabled, this enum describes why. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification).
             * @enum {string|null}
             */
            disabled_reason?: "action_required.requested_capabilities" | "listed" | "other" | "platform_paused" | "rejected.fraud" | "rejected.incomplete_verification" | "rejected.listed" | "rejected.other" | "rejected.platform_fraud" | "rejected.platform_other" | "rejected.platform_terms_of_service" | "rejected.terms_of_service" | "requirements.past_due" | "requirements.pending_verification" | "under_review" | null;
            /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
            errors?: components["schemas"]["account_requirements_error"][] | null;
            /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
            eventually_due?: string[] | null;
            /** @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account. */
            past_due?: string[] | null;
            /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
            pending_verification?: string[] | null;
        };
        /** AccountRequirementsAlternative */
        account_requirements_alternative: {
            /** @description Fields that can be provided to satisfy all fields in `original_fields_due`. */
            alternative_fields_due: string[];
            /** @description Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`. */
            original_fields_due: string[];
        };
        /** AccountRequirementsError */
        account_requirements_error: {
            /**
             * @description The code for the type of error.
             * @enum {string}
             */
            code: "invalid_address_city_state_postal_code" | "invalid_address_highway_contract_box" | "invalid_address_private_mailbox" | "invalid_business_profile_name" | "invalid_business_profile_name_denylisted" | "invalid_company_name_denylisted" | "invalid_dob_age_over_maximum" | "invalid_dob_age_under_18" | "invalid_dob_age_under_minimum" | "invalid_product_description_length" | "invalid_product_description_url_match" | "invalid_representative_country" | "invalid_statement_descriptor_business_mismatch" | "invalid_statement_descriptor_denylisted" | "invalid_statement_descriptor_length" | "invalid_statement_descriptor_prefix_denylisted" | "invalid_statement_descriptor_prefix_mismatch" | "invalid_street_address" | "invalid_tax_id" | "invalid_tax_id_format" | "invalid_tos_acceptance" | "invalid_url_denylisted" | "invalid_url_format" | "invalid_url_web_presence_detected" | "invalid_url_website_business_information_mismatch" | "invalid_url_website_empty" | "invalid_url_website_inaccessible" | "invalid_url_website_inaccessible_geoblocked" | "invalid_url_website_inaccessible_password_protected" | "invalid_url_website_incomplete" | "invalid_url_website_incomplete_cancellation_policy" | "invalid_url_website_incomplete_customer_service_details" | "invalid_url_website_incomplete_legal_restrictions" | "invalid_url_website_incomplete_refund_policy" | "invalid_url_website_incomplete_return_policy" | "invalid_url_website_incomplete_terms_and_conditions" | "invalid_url_website_incomplete_under_construction" | "invalid_url_website_other" | "invalid_value_other" | "verification_directors_mismatch" | "verification_document_address_mismatch" | "verification_document_address_missing" | "verification_document_corrupt" | "verification_document_country_not_supported" | "verification_document_directors_mismatch" | "verification_document_dob_mismatch" | "verification_document_duplicate_type" | "verification_document_expired" | "verification_document_failed_copy" | "verification_document_failed_greyscale" | "verification_document_failed_other" | "verification_document_failed_test_mode" | "verification_document_fraudulent" | "verification_document_id_number_mismatch" | "verification_document_id_number_missing" | "verification_document_incomplete" | "verification_document_invalid" | "verification_document_issue_or_expiry_date_missing" | "verification_document_manipulated" | "verification_document_missing_back" | "verification_document_missing_front" | "verification_document_name_mismatch" | "verification_document_name_missing" | "verification_document_nationality_mismatch" | "verification_document_not_readable" | "verification_document_not_signed" | "verification_document_not_uploaded" | "verification_document_photo_mismatch" | "verification_document_too_large" | "verification_document_type_not_supported" | "verification_extraneous_directors" | "verification_failed_address_match" | "verification_failed_business_iec_number" | "verification_failed_document_match" | "verification_failed_id_number_match" | "verification_failed_keyed_identity" | "verification_failed_keyed_match" | "verification_failed_name_match" | "verification_failed_other" | "verification_failed_representative_authority" | "verification_failed_residential_address" | "verification_failed_tax_id_match" | "verification_failed_tax_id_not_issued" | "verification_missing_directors" | "verification_missing_executives" | "verification_missing_owners" | "verification_requires_additional_memorandum_of_associations" | "verification_requires_additional_proof_of_registration" | "verification_supportability";
            /** @description An informative message that indicates the error type and provides additional details about the error. */
            reason: string;
            /** @description The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
            requirement: string;
        };
        /** AccountSepaDebitPaymentsSettings */
        account_sepa_debit_payments_settings: {
            /** @description SEPA creditor identifier that identifies the company making the payment. */
            creditor_id?: string;
        };
        /**
         * ConnectEmbeddedMethodAccountSessionCreateMethodAccountSession
         * @description An AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.
         *
         *     We recommend that you create an AccountSession each time you need to display an embedded component
         *     to your user. Do not save AccountSessions to your database as they expire relatively
         *     quickly, and cannot be used more than once.
         *
         *     Related guide: [Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components)
         */
        account_session: {
            /** @description The ID of the account the AccountSession was created for */
            account: string;
            /** @description The client secret of this AccountSession. Used on the client to set up secure access to the given `account`.
             *
             *     The client secret can be used to provide access to `account` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.
             *
             *     Refer to our docs to [setup Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components) and learn about how `client_secret` should be handled. */
            client_secret: string;
            components: components["schemas"]["connect_embedded_account_session_create_components"];
            /**
             * Format: unix-time
             * @description The timestamp at which this AccountSession will expire.
             */
            expires_at: number;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "account_session";
        };
        /** AccountSettings */
        account_settings: {
            bacs_debit_payments?: components["schemas"]["account_bacs_debit_payments_settings"];
            branding: components["schemas"]["account_branding_settings"];
            card_issuing?: components["schemas"]["account_card_issuing_settings"];
            card_payments: components["schemas"]["account_card_payments_settings"];
            dashboard: components["schemas"]["account_dashboard_settings"];
            invoices?: components["schemas"]["account_invoices_settings"];
            payments: components["schemas"]["account_payments_settings"];
            payouts?: components["schemas"]["account_payout_settings"];
            sepa_debit_payments?: components["schemas"]["account_sepa_debit_payments_settings"];
            treasury?: components["schemas"]["account_treasury_settings"];
        };
        /** AccountTermsOfService */
        account_terms_of_service: {
            /** @description The Unix timestamp marking when the account representative accepted the service agreement. */
            date?: number | null;
            /** @description The IP address from which the account representative accepted the service agreement. */
            ip?: string | null;
            /** @description The user agent of the browser from which the account representative accepted the service agreement. */
            user_agent?: string;
        };
        /** AccountTOSAcceptance */
        account_tos_acceptance: {
            /**
             * Format: unix-time
             * @description The Unix timestamp marking when the account representative accepted their service agreement
             */
            date?: number | null;
            /** @description The IP address from which the account representative accepted their service agreement */
            ip?: string | null;
            /** @description The user's service agreement type */
            service_agreement?: string;
            /** @description The user agent of the browser from which the account representative accepted their service agreement */
            user_agent?: string | null;
        };
        /** AccountTreasurySettings */
        account_treasury_settings: {
            tos_acceptance?: components["schemas"]["account_terms_of_service"];
        };
        /** AccountUnificationAccountController */
        account_unification_account_controller: {
            fees?: components["schemas"]["account_unification_account_controller_fees"];
            /** @description `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null. */
            is_controller?: boolean;
            losses?: components["schemas"]["account_unification_account_controller_losses"];
            /**
             * @description A value indicating responsibility for collecting requirements on this account. Only returned when the Connect application retrieving the resource controls the account.
             * @enum {string}
             */
            requirement_collection?: "application" | "stripe";
            stripe_dashboard?: components["schemas"]["account_unification_account_controller_stripe_dashboard"];
            /**
             * @description The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
             * @enum {string}
             */
            type: "account" | "application";
        };
        /** AccountUnificationAccountControllerFees */
        account_unification_account_controller_fees: {
            /**
             * @description A value indicating the responsible payer of a bundle of Stripe fees for pricing-control eligible products on this account. Learn more about [fee behavior on connected accounts](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior).
             * @enum {string}
             */
            payer: "account" | "application" | "application_custom" | "application_express";
        };
        /** AccountUnificationAccountControllerLosses */
        account_unification_account_controller_losses: {
            /**
             * @description A value indicating who is liable when this account can't pay back negative balances from payments.
             * @enum {string}
             */
            payments: "application" | "stripe";
        };
        /** AccountUnificationAccountControllerStripeDashboard */
        account_unification_account_controller_stripe_dashboard: {
            /**
             * @description A value indicating the Stripe dashboard this account has access to independent of the Connect application.
             * @enum {string}
             */
            type: "express" | "full" | "none";
        };
        /** Address */
        address: {
            /** @description City, district, suburb, town, or village. */
            city?: string | null;
            /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string | null;
            /** @description Address line 1 (e.g., street, PO Box, or company name). */
            line1?: string | null;
            /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
            line2?: string | null;
            /** @description ZIP or postal code. */
            postal_code?: string | null;
            /** @description State, county, province, or region. */
            state?: string | null;
        };
        /** APIErrors */
        api_errors: {
            /** @description For card errors, the ID of the failed charge. */
            charge?: string;
            /** @description For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
            code?: string;
            /** @description For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
            decline_code?: string;
            /** @description A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
            doc_url?: string;
            /** @description A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
            message?: string;
            /** @description If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
            param?: string;
            payment_intent?: components["schemas"]["payment_intent"];
            payment_method?: components["schemas"]["payment_method"];
            /** @description If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
            payment_method_type?: string;
            /** @description A URL to the request log entry in your dashboard. */
            request_log_url?: string;
            setup_intent?: components["schemas"]["setup_intent"];
            /** @description The [source object](https://stripe.com/docs/api/sources/object) for errors returned on a request involving a source. */
            source?: components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"];
            /**
             * @description The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
             * @enum {string}
             */
            type: "api_error" | "card_error" | "idempotency_error" | "invalid_request_error";
        };
        /** ApplePayDomain */
        apple_pay_domain: {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            domain_name: string;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "apple_pay_domain";
        };
        /** Application */
        application: {
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The name of the application. */
            name?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "application";
        };
        /** PlatformFee */
        application_fee: {
            /** @description ID of the Stripe account this fee was taken from. */
            account: string | components["schemas"]["account"];
            /** @description Amount earned, in cents (or local equivalent). */
            amount: number;
            /** @description Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued) */
            amount_refunded: number;
            /** @description ID of the Connect application that earned the fee. */
            application: string | components["schemas"]["application"];
            /** @description Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds). */
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            /** @description ID of the charge that the application fee was taken from. */
            charge: string | components["schemas"]["charge"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description Polymorphic source of the application fee. Includes the ID of the object the application fee was created from. */
            fee_source?: components["schemas"]["platform_earning_fee_source"] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "application_fee";
            /** @description ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter. */
            originating_transaction?: (string | components["schemas"]["charge"]) | null;
            /** @description Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. */
            refunded: boolean;
            /**
             * FeeRefundList
             * @description A list of refunds that have been applied to the fee.
             */
            refunds: {
                /** @description Details about each object. */
                data: components["schemas"]["fee_refund"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
        };
        /**
         * SecretServiceResourceSecret
         * @description Secret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.
         *
         *     The primary resource in Secret Store is a `secret`. Other apps can't view secrets created by an app. Additionally, secrets are scoped to provide further permission control.
         *
         *     All Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don't change per-user, like a third-party API key.
         *
         *     A `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.
         *
         *     Related guide: [Store data between page reloads](https://stripe.com/docs/stripe-apps/store-auth-data-custom-objects)
         */
        "apps.secret": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description If true, indicates that this secret has been deleted */
            deleted?: boolean;
            /**
             * Format: unix-time
             * @description The Unix timestamp for the expiry time of the secret, after which the secret deletes.
             */
            expires_at?: number | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description A name for the secret that's unique within the scope. */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "apps.secret";
            /** @description The plaintext secret value to be stored. */
            payload?: string | null;
            scope: components["schemas"]["secret_service_resource_scope"];
        };
        /** AutomaticTax */
        automatic_tax: {
            /** @description Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices. */
            enabled: boolean;
            /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
            liability?: components["schemas"]["connect_account_reference"] | null;
            /**
             * @description The status of the most recent automated tax calculation for this invoice.
             * @enum {string|null}
             */
            status?: "complete" | "failed" | "requires_location_inputs" | null;
        };
        /**
         * Balance
         * @description This is an object representing your Stripe balance. You can retrieve it to see
         *     the balance currently on your Stripe account.
         *
         *     You can also retrieve the balance history, which contains a list of
         *     [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
         *     (charges, payouts, and so forth).
         *
         *     The available and pending amounts for each currency are broken down further by
         *     payment source types.
         *
         *     Related guide: [Understanding Connect account balances](https://stripe.com/docs/connect/account-balances)
         */
        balance: {
            /** @description Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). You can find the available balance for each currency and payment type in the `source_types` property. */
            available: components["schemas"]["balance_amount"][];
            /** @description Funds held due to negative balances on connected accounts where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. You can find the connect reserve balance for each currency and payment type in the `source_types` property. */
            connect_reserved?: components["schemas"]["balance_amount"][];
            /** @description Funds that you can pay out using Instant Payouts. */
            instant_available?: components["schemas"]["balance_amount_net"][];
            issuing?: components["schemas"]["balance_detail"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "balance";
            /** @description Funds that aren't available in the balance yet. You can find the pending balance for each currency and each payment type in the `source_types` property. */
            pending: components["schemas"]["balance_amount"][];
        };
        /** BalanceAmount */
        balance_amount: {
            /** @description Balance amount. */
            amount: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            source_types?: components["schemas"]["balance_amount_by_source_type"];
        };
        /** BalanceAmountBySourceType */
        balance_amount_by_source_type: {
            /** @description Amount for bank account. */
            bank_account?: number;
            /** @description Amount for card. */
            card?: number;
            /** @description Amount for FPX. */
            fpx?: number;
        };
        /** BalanceAmountNet */
        balance_amount_net: {
            /** @description Balance amount. */
            amount: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description Breakdown of balance by destination. */
            net_available?: components["schemas"]["balance_net_available"][];
            source_types?: components["schemas"]["balance_amount_by_source_type"];
        };
        /** BalanceDetail */
        balance_detail: {
            /** @description Funds that are available for use. */
            available: components["schemas"]["balance_amount"][];
        };
        /** BalanceNetAvailable */
        balance_net_available: {
            /** @description Net balance amount, subtracting fees from platform-set pricing. */
            amount: number;
            /** @description ID of the external account for this net balance (not expandable). */
            destination: string;
            source_types?: components["schemas"]["balance_amount_by_source_type"];
        };
        /**
         * BalanceTransaction
         * @description Balance transactions represent funds moving through your Stripe account.
         *     Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.
         *
         *     Related guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)
         */
        balance_transaction: {
            /** @description Gross amount of this transaction (in cents (or local equivalent)). A positive value represents funds charged to another party, and a negative value represents funds sent to another party. */
            amount: number;
            /**
             * Format: unix-time
             * @description The date that the transaction's net funds become available in the Stripe balance.
             */
            available_on: number;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description If applicable, this transaction uses an exchange rate. If money converts from currency A to currency B, then the `amount` in currency A, multipled by the `exchange_rate`, equals the `amount` in currency B. For example, if you charge a customer 10.00 EUR, the PaymentIntent's `amount` is `1000` and `currency` is `eur`. If this converts to 12.34 USD in your Stripe account, the BalanceTransaction's `amount` is `1234`, its `currency` is `usd`, and the `exchange_rate` is `1.234`. */
            exchange_rate?: number | null;
            /** @description Fees (in cents (or local equivalent)) paid for this transaction. Represented as a positive integer when assessed. */
            fee: number;
            /** @description Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction. */
            fee_details: components["schemas"]["fee"][];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Net impact to a Stripe balance (in cents (or local equivalent)). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee` */
            net: number;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "balance_transaction";
            /** @description Learn more about how [reporting categories](https://stripe.com/docs/reports/reporting-categories) can help you understand balance transactions from an accounting perspective. */
            reporting_category: string;
            /** @description This transaction relates to the Stripe object. */
            source?: (string | components["schemas"]["application_fee"] | components["schemas"]["charge"] | components["schemas"]["connect_collection_transfer"] | components["schemas"]["customer_cash_balance_transaction"] | components["schemas"]["dispute"] | components["schemas"]["fee_refund"] | components["schemas"]["issuing.authorization"] | components["schemas"]["issuing.dispute"] | components["schemas"]["issuing.transaction"] | components["schemas"]["payout"] | components["schemas"]["refund"] | components["schemas"]["reserve_transaction"] | components["schemas"]["tax_deducted_at_source"] | components["schemas"]["topup"] | components["schemas"]["transfer"] | components["schemas"]["transfer_reversal"]) | null;
            /** @description The transaction's net funds status in the Stripe balance, which are either `available` or `pending`. */
            status: string;
            /**
             * @description Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead.
             * @enum {string}
             */
            type: "adjustment" | "advance" | "advance_funding" | "anticipation_repayment" | "application_fee" | "application_fee_refund" | "charge" | "climate_order_purchase" | "climate_order_refund" | "connect_collection_transfer" | "contribution" | "issuing_authorization_hold" | "issuing_authorization_release" | "issuing_dispute" | "issuing_transaction" | "obligation_outbound" | "obligation_reversal_inbound" | "payment" | "payment_failure_refund" | "payment_network_reserve_hold" | "payment_network_reserve_release" | "payment_refund" | "payment_reversal" | "payment_unreconciled" | "payout" | "payout_cancel" | "payout_failure" | "refund" | "refund_failure" | "reserve_transaction" | "reserved_funds" | "stripe_fee" | "stripe_fx_fee" | "tax_fee" | "topup" | "topup_reversal" | "transfer" | "transfer_cancel" | "transfer_failure" | "transfer_refund";
        };
        /**
         * BankAccount
         * @description These bank accounts are payment methods on `Customer` objects.
         *
         *     On the other hand [External Accounts](/api#external_accounts) are transfer
         *     destinations on `Account` objects for connected accounts.
         *     They can be bank accounts or debit cards as well, and are documented in the links above.
         *
         *     Related guide: [Bank debits and transfers](/payments/bank-debits-transfers)
         */
        bank_account: {
            /** @description The ID of the account that the bank account is associated with. */
            account?: (string | components["schemas"]["account"]) | null;
            /** @description The name of the person or business that owns the bank account. */
            account_holder_name?: string | null;
            /** @description The type of entity that holds the account. This can be either `individual` or `company`. */
            account_holder_type?: string | null;
            /** @description The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
            account_type?: string | null;
            /** @description A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout. */
            available_payout_methods?: ("instant" | "standard")[] | null;
            /** @description Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
            bank_name?: string | null;
            /** @description Two-letter ISO code representing the country the bank account is located in. */
            country: string;
            /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
            currency: string;
            /** @description The ID of the customer that the bank account is associated with. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /** @description Whether this bank account is the default external account for its currency. */
            default_for_currency?: boolean | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when. */
            future_requirements?: components["schemas"]["external_account_requirements"] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The last four digits of the bank account number. */
            last4: string;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "bank_account";
            /** @description Information about the requirements for the bank account, including what information needs to be collected. */
            requirements?: components["schemas"]["external_account_requirements"] | null;
            /** @description The routing transit number for the bank account. */
            routing_number?: string | null;
            /** @description For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we'll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.
             *
             *     For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. */
            status: string;
        };
        /** BankConnectionsResourceAccountholder */
        bank_connections_resource_accountholder: {
            /** @description The ID of the Stripe account this account belongs to. Should only be present if `account_holder.type` is `account`. */
            account?: string | components["schemas"]["account"];
            /** @description ID of the Stripe customer this account belongs to. Present if and only if `account_holder.type` is `customer`. */
            customer?: string | components["schemas"]["customer"];
            /**
             * @description Type of account holder that this account belongs to.
             * @enum {string}
             */
            type: "account" | "customer";
        };
        /** BankConnectionsResourceBalance */
        bank_connections_resource_balance: {
            /**
             * Format: unix-time
             * @description The time that the external institution calculated this balance. Measured in seconds since the Unix epoch.
             */
            as_of: number;
            cash?: components["schemas"]["bank_connections_resource_balance_api_resource_cash_balance"];
            credit?: components["schemas"]["bank_connections_resource_balance_api_resource_credit_balance"];
            /** @description The balances owed to (or by) the account holder, before subtracting any outbound pending transactions or adding any inbound pending transactions.
             *
             *     Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
             *
             *     Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder. */
            current: {
                [key: string]: number;
            };
            /**
             * @description The `type` of the balance. An additional hash is included on the balance with a name matching this value.
             * @enum {string}
             */
            type: "cash" | "credit";
        };
        /** BankConnectionsResourceBalanceAPIResourceCashBalance */
        bank_connections_resource_balance_api_resource_cash_balance: {
            /** @description The funds available to the account holder. Typically this is the current balance after subtracting any outbound pending transactions and adding any inbound pending transactions.
             *
             *     Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
             *
             *     Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder. */
            available?: {
                [key: string]: number;
            } | null;
        };
        /** BankConnectionsResourceBalanceAPIResourceCreditBalance */
        bank_connections_resource_balance_api_resource_credit_balance: {
            /** @description The credit that has been used by the account holder.
             *
             *     Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
             *
             *     Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder. */
            used?: {
                [key: string]: number;
            } | null;
        };
        /** BankConnectionsResourceBalanceRefresh */
        bank_connections_resource_balance_refresh: {
            /**
             * Format: unix-time
             * @description The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
             */
            last_attempted_at: number;
            /**
             * Format: unix-time
             * @description Time at which the next balance refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
             */
            next_refresh_available_at?: number | null;
            /**
             * @description The status of the last refresh attempt.
             * @enum {string}
             */
            status: "failed" | "pending" | "succeeded";
        };
        /** BankConnectionsResourceLinkAccountSessionFilters */
        bank_connections_resource_link_account_session_filters: {
            /** @description Restricts the Session to subcategories of accounts that can be linked. Valid subcategories are: `checking`, `savings`, `mortgage`, `line_of_credit`, `credit_card`. */
            account_subcategories?: ("checking" | "credit_card" | "line_of_credit" | "mortgage" | "savings")[] | null;
            /** @description List of countries from which to filter accounts. */
            countries?: string[] | null;
        };
        /** BankConnectionsResourceOwnershipRefresh */
        bank_connections_resource_ownership_refresh: {
            /**
             * Format: unix-time
             * @description The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
             */
            last_attempted_at: number;
            /**
             * Format: unix-time
             * @description Time at which the next ownership refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
             */
            next_refresh_available_at?: number | null;
            /**
             * @description The status of the last refresh attempt.
             * @enum {string}
             */
            status: "failed" | "pending" | "succeeded";
        };
        /** BankConnectionsResourceTransactionRefresh */
        bank_connections_resource_transaction_refresh: {
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * Format: unix-time
             * @description The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
             */
            last_attempted_at: number;
            /**
             * Format: unix-time
             * @description Time at which the next transaction refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
             */
            next_refresh_available_at?: number | null;
            /**
             * @description The status of the last refresh attempt.
             * @enum {string}
             */
            status: "failed" | "pending" | "succeeded";
        };
        /** BankConnectionsResourceTransactionResourceStatusTransitions */
        bank_connections_resource_transaction_resource_status_transitions: {
            /**
             * Format: unix-time
             * @description Time at which this transaction posted. Measured in seconds since the Unix epoch.
             */
            posted_at?: number | null;
            /**
             * Format: unix-time
             * @description Time at which this transaction was voided. Measured in seconds since the Unix epoch.
             */
            void_at?: number | null;
        };
        /**
         * ThresholdsResourceAlert
         * @description A billing alert is a resource that notifies you when a certain usage threshold on a meter is crossed. For example, you might create a billing alert to notify you when a certain user made 100 API requests.
         */
        "billing.alert": {
            /**
             * @description Defines the type of the alert.
             * @enum {string}
             */
            alert_type: "usage_threshold";
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "billing.alert";
            /**
             * @description Status of the alert. This can be active, inactive or archived.
             * @enum {string|null}
             */
            status?: "active" | "archived" | "inactive" | null;
            /** @description Title of the alert. */
            title: string;
            /** @description Encapsulates configuration of the alert to monitor usage on a specific [Billing Meter](https://stripe.com/docs/api/billing/meter). */
            usage_threshold?: components["schemas"]["thresholds_resource_usage_threshold_config"] | null;
        };
        /**
         * CreditBalanceSummary
         * @description Indicates the billing credit balance for billing credits granted to a customer.
         */
        "billing.credit_balance_summary": {
            /** @description The billing credit balances. One entry per credit grant currency. If a customer only has credit grants in a single currency, then this will have a single balance entry. */
            balances: components["schemas"]["credit_balance"][];
            /** @description The customer the balance is for. */
            customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "billing.credit_balance_summary";
        };
        /**
         * CreditBalanceTransaction
         * @description A credit balance transaction is a resource representing a transaction (either a credit or a debit) against an existing credit grant.
         */
        "billing.credit_balance_transaction": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Credit details for this credit balance transaction. Only present if type is `credit`. */
            credit?: components["schemas"]["billing_credit_grants_resource_balance_credit"] | null;
            /** @description The credit grant associated with this credit balance transaction. */
            credit_grant: string | components["schemas"]["billing.credit_grant"];
            /** @description Debit details for this credit balance transaction. Only present if type is `debit`. */
            debit?: components["schemas"]["billing_credit_grants_resource_balance_debit"] | null;
            /**
             * Format: unix-time
             * @description The effective time of this credit balance transaction.
             */
            effective_at: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "billing.credit_balance_transaction";
            /** @description ID of the test clock this credit balance transaction belongs to. */
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
            /**
             * @description The type of credit balance transaction (credit or debit).
             * @enum {string|null}
             */
            type?: "credit" | "debit" | null;
        };
        /**
         * CreditGrant
         * @description A credit grant is an API resource that documents the allocation of some billing credits to a customer.
         *
         *     Related guide: [Billing credits](https://docs.stripe.com/billing/subscriptions/usage-based/billing-credits)
         */
        "billing.credit_grant": {
            amount: components["schemas"]["billing_credit_grants_resource_amount"];
            applicability_config: components["schemas"]["billing_credit_grants_resource_applicability_config"];
            /**
             * @description The category of this credit grant. This is for tracking purposes and isn't displayed to the customer.
             * @enum {string}
             */
            category: "paid" | "promotional";
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description ID of the customer receiving the billing credits. */
            customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
            /**
             * Format: unix-time
             * @description The time when the billing credits become effective—when they're eligible for use.
             */
            effective_at?: number | null;
            /**
             * Format: unix-time
             * @description The time when the billing credits expire. If not present, the billing credits don't expire.
             */
            expires_at?: number | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description A descriptive name shown in dashboard. */
            name?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "billing.credit_grant";
            /** @description ID of the test clock this credit grant belongs to. */
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
            /**
             * Format: unix-time
             * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
             */
            updated: number;
            /**
             * Format: unix-time
             * @description The time when this credit grant was voided. If not present, the credit grant hasn't been voided.
             */
            voided_at?: number | null;
        };
        /**
         * BillingMeter
         * @description A billing meter is a resource that allows you to track usage of a particular event. For example, you might create a billing meter to track the number of API calls made by a particular user. You can then attach the billing meter to a price and attach the price to a subscription to charge the user for the number of API calls they make.
         *
         *     Related guide: [Usage based billing](https://docs.stripe.com/billing/subscriptions/usage-based)
         */
        "billing.meter": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            customer_mapping: components["schemas"]["billing_meter_resource_customer_mapping_settings"];
            default_aggregation: components["schemas"]["billing_meter_resource_aggregation_settings"];
            /** @description The meter's name. */
            display_name: string;
            /** @description The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events. */
            event_name: string;
            /**
             * @description The time window to pre-aggregate meter events for, if any.
             * @enum {string|null}
             */
            event_time_window?: "day" | "hour" | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "billing.meter";
            /**
             * @description The meter's status.
             * @enum {string}
             */
            status: "active" | "inactive";
            status_transitions: components["schemas"]["billing_meter_resource_billing_meter_status_transitions"];
            /**
             * Format: unix-time
             * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
             */
            updated: number;
            value_settings: components["schemas"]["billing_meter_resource_billing_meter_value"];
        };
        /**
         * BillingMeterEvent
         * @description A billing meter event represents a customer's usage of a product. Meter events are used to bill a customer based on their usage.
         *     Meter events are associated with billing meters, which define the shape of the event's payload and how those events are aggregated for billing.
         */
        "billing.meter_event": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The name of the meter event. Corresponds with the `event_name` field on a meter. */
            event_name: string;
            /** @description A unique identifier for the event. */
            identifier: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "billing.meter_event";
            /** @description The payload of the event. This contains the fields corresponding to a meter's `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://stripe.com/docs/billing/subscriptions/usage-based/recording-usage#payload-key-overrides). */
            payload: {
                [key: string]: string;
            };
            /**
             * Format: unix-time
             * @description The timestamp passed in when creating the event. Measured in seconds since the Unix epoch.
             */
            timestamp: number;
        };
        /**
         * BillingMeterEventAdjustment
         * @description A billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.
         */
        "billing.meter_event_adjustment": {
            /** @description Specifies which event to cancel. */
            cancel?: components["schemas"]["billing_meter_resource_billing_meter_event_adjustment_cancel"] | null;
            /** @description The name of the meter event. Corresponds with the `event_name` field on a meter. */
            event_name: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "billing.meter_event_adjustment";
            /**
             * @description The meter event adjustment's status.
             * @enum {string}
             */
            status: "complete" | "pending";
            /**
             * @description Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.
             * @enum {string}
             */
            type: "cancel";
        };
        /**
         * BillingMeterEventSummary
         * @description A billing meter event summary represents an aggregated view of a customer's billing meter events within a specified timeframe. It indicates how much
         *     usage was accrued by a customer for that period.
         */
        "billing.meter_event_summary": {
            /** @description Aggregated value of all the events within `start_time` (inclusive) and `end_time` (inclusive). The aggregation strategy is defined on meter via `default_aggregation`. */
            aggregated_value: number;
            /**
             * Format: unix-time
             * @description End timestamp for this event summary (exclusive). Must be aligned with minute boundaries.
             */
            end_time: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description The meter associated with this event summary. */
            meter: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "billing.meter_event_summary";
            /**
             * Format: unix-time
             * @description Start timestamp for this event summary (inclusive). Must be aligned with minute boundaries.
             */
            start_time: number;
        };
        /** BillingClocksResourceStatusDetailsAdvancingStatusDetails */
        billing_clocks_resource_status_details_advancing_status_details: {
            /**
             * Format: unix-time
             * @description The `frozen_time` that the Test Clock is advancing towards.
             */
            target_frozen_time: number;
        };
        /** BillingClocksResourceStatusDetailsStatusDetails */
        billing_clocks_resource_status_details_status_details: {
            advancing?: components["schemas"]["billing_clocks_resource_status_details_advancing_status_details"];
        };
        /** BillingCreditGrantsResourceAmount */
        billing_credit_grants_resource_amount: {
            /** @description The monetary amount. */
            monetary?: components["schemas"]["billing_credit_grants_resource_monetary_amount"] | null;
            /**
             * @description The type of this amount. We currently only support `monetary` billing credits.
             * @enum {string}
             */
            type: "monetary";
        };
        /** BillingCreditGrantsResourceApplicabilityConfig */
        billing_credit_grants_resource_applicability_config: {
            scope: components["schemas"]["billing_credit_grants_resource_scope"];
        };
        /** BillingCreditGrantsResourceBalanceCredit */
        billing_credit_grants_resource_balance_credit: {
            amount: components["schemas"]["billing_credit_grants_resource_amount"];
            /**
             * @description The type of credit transaction.
             * @enum {string}
             */
            type: "credits_granted";
        };
        /** BillingCreditGrantsResourceBalanceCreditsApplied */
        billing_credit_grants_resource_balance_credits_applied: {
            /** @description The invoice to which the billing credits were applied. */
            invoice: string | components["schemas"]["invoice"];
            /** @description The invoice line item to which the billing credits were applied. */
            invoice_line_item: string;
        };
        /** BillingCreditGrantsResourceBalanceDebit */
        billing_credit_grants_resource_balance_debit: {
            amount: components["schemas"]["billing_credit_grants_resource_amount"];
            /** @description Details of how the billing credits were applied to an invoice. Only present if `type` is `credits_applied`. */
            credits_applied?: components["schemas"]["billing_credit_grants_resource_balance_credits_applied"] | null;
            /**
             * @description The type of debit transaction.
             * @enum {string}
             */
            type: "credits_applied" | "credits_expired" | "credits_voided";
        };
        /** BillingCreditGrantsResourceMonetaryAmount */
        billing_credit_grants_resource_monetary_amount: {
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description A positive integer representing the amount. */
            value: number;
        };
        /** BillingCreditGrantsResourceScope */
        billing_credit_grants_resource_scope: {
            /**
             * @description The price type for which credit grants can apply. We currently only support the `metered` price type. This refers to prices that have a [Billing Meter](https://docs.stripe.com/api/billing/meter) attached to them.
             * @enum {string}
             */
            price_type: "metered";
        };
        /** billing_details */
        billing_details: {
            /** @description Billing address. */
            address?: components["schemas"]["address"] | null;
            /** @description Email address. */
            email?: string | null;
            /** @description Full name. */
            name?: string | null;
            /** @description Billing phone number (including extension). */
            phone?: string | null;
        };
        /** BillingMeterResourceAggregationSettings */
        billing_meter_resource_aggregation_settings: {
            /**
             * @description Specifies how events are aggregated.
             * @enum {string}
             */
            formula: "count" | "sum";
        };
        /** BillingMeterResourceBillingMeterEventAdjustmentCancel */
        billing_meter_resource_billing_meter_event_adjustment_cancel: {
            /** @description Unique identifier for the event. */
            identifier?: string | null;
        };
        /** BillingMeterResourceBillingMeterStatusTransitions */
        billing_meter_resource_billing_meter_status_transitions: {
            /**
             * Format: unix-time
             * @description The time the meter was deactivated, if any. Measured in seconds since Unix epoch.
             */
            deactivated_at?: number | null;
        };
        /** BillingMeterResourceBillingMeterValue */
        billing_meter_resource_billing_meter_value: {
            /** @description The key in the meter event payload to use as the value for this meter. */
            event_payload_key: string;
        };
        /** BillingMeterResourceCustomerMappingSettings */
        billing_meter_resource_customer_mapping_settings: {
            /** @description The key in the meter event payload to use for mapping the event to a customer. */
            event_payload_key: string;
            /**
             * @description The method for mapping a meter event to a customer.
             * @enum {string}
             */
            type: "by_id";
        };
        /**
         * PortalConfiguration
         * @description A portal configuration describes the functionality and behavior of a portal session.
         */
        "billing_portal.configuration": {
            /** @description Whether the configuration is active and can be used to create portal sessions. */
            active: boolean;
            /** @description ID of the Connect Application that created the configuration. */
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            business_profile: components["schemas"]["portal_business_profile"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
            default_return_url?: string | null;
            features: components["schemas"]["portal_features"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session. */
            is_default: boolean;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            login_page: components["schemas"]["portal_login_page"];
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "billing_portal.configuration";
            /**
             * Format: unix-time
             * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
             */
            updated: number;
        };
        /**
         * PortalSession
         * @description The Billing customer portal is a Stripe-hosted UI for subscription and
         *     billing management.
         *
         *     A portal configuration describes the functionality and features that you
         *     want to provide to your customers through the portal.
         *
         *     A portal session describes the instantiation of the customer portal for
         *     a particular customer. By visiting the session's URL, the customer
         *     can manage their subscriptions and billing details. For security reasons,
         *     sessions are short-lived and will expire if the customer does not visit the URL.
         *     Create sessions on-demand when customers intend to manage their subscriptions
         *     and billing details.
         *
         *     Related guide: [Customer management](/customer-management)
         */
        "billing_portal.session": {
            /** @description The configuration used by this session, describing the features available. */
            configuration: string | components["schemas"]["billing_portal.configuration"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The ID of the customer for this session. */
            customer: string;
            /** @description Information about a specific flow for the customer to go through. See the [docs](https://stripe.com/docs/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows. */
            flow?: components["schemas"]["portal_flows_flow"] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
             * @enum {string|null}
             */
            locale?: "auto" | "bg" | "cs" | "da" | "de" | "el" | "en" | "en-AU" | "en-CA" | "en-GB" | "en-IE" | "en-IN" | "en-NZ" | "en-SG" | "es" | "es-419" | "et" | "fi" | "fil" | "fr" | "fr-CA" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "lv" | "ms" | "mt" | "nb" | "nl" | "pl" | "pt" | "pt-BR" | "ro" | "ru" | "sk" | "sl" | "sv" | "th" | "tr" | "vi" | "zh" | "zh-HK" | "zh-TW" | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "billing_portal.session";
            /** @description The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays. */
            on_behalf_of?: string | null;
            /** @description The URL to redirect customers to when they click on the portal's link to return to your website. */
            return_url?: string | null;
            /** @description The short-lived URL of the session that gives customers access to the customer portal. */
            url: string;
        };
        /** CancellationDetails */
        cancellation_details: {
            /** @description Additional comments about why the user canceled the subscription, if the subscription was canceled explicitly by the user. */
            comment?: string | null;
            /**
             * @description The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user.
             * @enum {string|null}
             */
            feedback?: "customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused" | null;
            /**
             * @description Why this subscription was canceled.
             * @enum {string|null}
             */
            reason?: "cancellation_requested" | "payment_disputed" | "payment_failed" | null;
        };
        /**
         * AccountCapability
         * @description This is an object representing a capability for a Stripe account.
         *
         *     Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities)
         */
        capability: {
            /** @description The account for which the capability enables functionality. */
            account: string | components["schemas"]["account"];
            future_requirements?: components["schemas"]["account_capability_future_requirements"];
            /** @description The identifier for the capability. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "capability";
            /** @description Whether the capability has been requested. */
            requested: boolean;
            /**
             * Format: unix-time
             * @description Time at which the capability was requested. Measured in seconds since the Unix epoch.
             */
            requested_at?: number | null;
            requirements?: components["schemas"]["account_capability_requirements"];
            /**
             * @description The status of the capability.
             * @enum {string}
             */
            status: "active" | "disabled" | "inactive" | "pending" | "unrequested";
        };
        /**
         * Card
         * @description You can store multiple cards on a customer in order to charge the customer
         *     later. You can also store multiple debit cards on a recipient in order to
         *     transfer to those cards later.
         *
         *     Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
         */
        card: {
            /** @description The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
            account?: (string | components["schemas"]["account"]) | null;
            /** @description City/District/Suburb/Town/Village. */
            address_city?: string | null;
            /** @description Billing address country, if provided when creating card. */
            address_country?: string | null;
            /** @description Address line 1 (Street address/PO Box/Company name). */
            address_line1?: string | null;
            /** @description If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
            address_line1_check?: string | null;
            /** @description Address line 2 (Apartment/Suite/Unit/Building). */
            address_line2?: string | null;
            /** @description State/County/Province/Region. */
            address_state?: string | null;
            /** @description ZIP or postal code. */
            address_zip?: string | null;
            /** @description If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
            address_zip_check?: string | null;
            /** @description A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout. */
            available_payout_methods?: ("instant" | "standard")[] | null;
            /** @description Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `Girocard`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
            brand: string;
            /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
            country?: string | null;
            /** @description Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
            currency?: string | null;
            /** @description The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /** @description If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
            cvc_check?: string | null;
            /** @description Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
            default_for_currency?: boolean | null;
            /** @description (For tokenized numbers only.) The last four digits of the device account number. */
            dynamic_last4?: string | null;
            /** @description Two-digit number representing the card's expiration month. */
            exp_month: number;
            /** @description Four-digit number representing the card's expiration year. */
            exp_year: number;
            /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
             *
             *     *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.* */
            fingerprint?: string | null;
            /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
            funding: string;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The last four digits of the card. */
            last4: string;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description Cardholder name. */
            name?: string | null;
            networks?: components["schemas"]["token_card_networks"];
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "card";
            /** @description For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated. */
            status?: string | null;
            /** @description If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
            tokenization_method?: string | null;
        };
        /** card_generated_from_payment_method_details */
        card_generated_from_payment_method_details: {
            card_present?: components["schemas"]["payment_method_details_card_present"];
            /** @description The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`. */
            type: string;
        };
        /** CardIssuingAccountTermsOfService */
        card_issuing_account_terms_of_service: {
            /** @description The Unix timestamp marking when the account representative accepted the service agreement. */
            date?: number | null;
            /** @description The IP address from which the account representative accepted the service agreement. */
            ip?: string | null;
            /** @description The user agent of the browser from which the account representative accepted the service agreement. */
            user_agent?: string;
        };
        /** card_mandate_payment_method_details */
        card_mandate_payment_method_details: Record<string, never>;
        /**
         * cash_balance
         * @description A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.
         */
        cash_balance: {
            /** @description A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            available?: {
                [key: string]: number;
            } | null;
            /** @description The ID of the customer whose cash balance this object represents. */
            customer: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "cash_balance";
            settings: components["schemas"]["customer_balance_customer_balance_settings"];
        };
        /**
         * Charge
         * @description The `Charge` object represents a single attempt to move money into your Stripe account.
         *     PaymentIntent confirmation is the most common way to create Charges, but transferring
         *     money to a different Stripe account through Connect also creates Charges.
         *     Some legacy payment flows create Charges directly, which is not recommended for new integrations.
         */
        charge: {
            /** @description Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
            amount: number;
            /** @description Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made). */
            amount_captured: number;
            /** @description Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued). */
            amount_refunded: number;
            /** @description ID of the Connect application that created the charge. */
            application?: (string | components["schemas"]["application"]) | null;
            /** @description The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details. */
            application_fee?: (string | components["schemas"]["application_fee"]) | null;
            /** @description The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details. */
            application_fee_amount?: number | null;
            /** @description ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes). */
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            billing_details: components["schemas"]["billing_details"];
            /** @description The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. This value only exists for card payments. */
            calculated_statement_descriptor?: string | null;
            /** @description If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
            captured: boolean;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description ID of the customer this charge is for if one exists. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Whether the charge has been disputed. */
            disputed: boolean;
            /** @description ID of the balance transaction that describes the reversal of the balance on your account due to payment failure. */
            failure_balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            /** @description Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes). */
            failure_code?: string | null;
            /** @description Message to user further explaining reason for charge failure if available. */
            failure_message?: string | null;
            /** @description Information on fraud assessments for the charge. */
            fraud_details?: components["schemas"]["charge_fraud_details"] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description ID of the invoice this charge is for if one exists. */
            invoice?: (string | components["schemas"]["invoice"]) | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "charge";
            /** @description The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers) for details. */
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            /** @description Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details. */
            outcome?: components["schemas"]["charge_outcome"] | null;
            /** @description `true` if the charge succeeded, or was successfully authorized for later capture. */
            paid: boolean;
            /** @description ID of the PaymentIntent associated with this charge, if one exists. */
            payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
            /** @description ID of the payment method used in this charge. */
            payment_method?: string | null;
            /** @description Details about the payment method at the time of the transaction. */
            payment_method_details?: components["schemas"]["payment_method_details"] | null;
            radar_options?: components["schemas"]["radar_radar_options"];
            /** @description This is the email address that the receipt for this charge was sent to. */
            receipt_email?: string | null;
            /** @description This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
            receipt_number?: string | null;
            /** @description This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
            receipt_url?: string | null;
            /** @description Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
            refunded: boolean;
            /**
             * RefundList
             * @description A list of refunds that have been applied to the charge.
             */
            refunds?: {
                /** @description Details about each object. */
                data: components["schemas"]["refund"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            } | null;
            /** @description ID of the review associated with this charge if one exists. */
            review?: (string | components["schemas"]["review"]) | null;
            /** @description Shipping information for the charge. */
            shipping?: components["schemas"]["shipping"] | null;
            /** @description The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://docs.stripe.com/connect/destination-charges) for details. */
            source_transfer?: (string | components["schemas"]["transfer"]) | null;
            /** @description For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
             *
             *     For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix. */
            statement_descriptor?: string | null;
            /** @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor. */
            statement_descriptor_suffix?: string | null;
            /**
             * @description The status of the payment is either `succeeded`, `pending`, or `failed`.
             * @enum {string}
             */
            status: "failed" | "pending" | "succeeded";
            /** @description ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter). */
            transfer?: string | components["schemas"]["transfer"];
            /** @description An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
            transfer_data?: components["schemas"]["charge_transfer_data"] | null;
            /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details. */
            transfer_group?: string | null;
        };
        /** ChargeFraudDetails */
        charge_fraud_details: {
            /** @description Assessments from Stripe. If set, the value is `fraudulent`. */
            stripe_report?: string;
            /** @description Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
            user_report?: string;
        };
        /** ChargeOutcome */
        charge_outcome: {
            /** @description Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
            network_status?: string | null;
            /** @description An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
            reason?: string | null;
            /** @description Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar. */
            risk_level?: string;
            /** @description Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. */
            risk_score?: number;
            /** @description The ID of the Radar rule that matched the payment, if applicable. */
            rule?: string | components["schemas"]["rule"];
            /** @description A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
            seller_message?: string | null;
            /** @description Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
            type: string;
        };
        /** ChargeTransferData */
        charge_transfer_data: {
            /** @description The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. */
            amount?: number | null;
            /** @description ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request. */
            destination: string | components["schemas"]["account"];
        };
        /**
         * Session
         * @description A Checkout Session represents your customer's session as they pay for
         *     one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
         *     or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
         *     new Session each time your customer attempts to pay.
         *
         *     Once payment is successful, the Checkout Session will contain a reference
         *     to the [Customer](https://stripe.com/docs/api/customers), and either the successful
         *     [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
         *     [Subscription](https://stripe.com/docs/api/subscriptions).
         *
         *     You can create a Checkout Session on your server and redirect to its URL
         *     to begin Checkout.
         *
         *     Related guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)
         */
        "checkout.session": {
            /** @description Settings for price localization with [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing). */
            adaptive_pricing?: components["schemas"]["payment_pages_checkout_session_adaptive_pricing"] | null;
            /** @description When set, provides configuration for actions to take if this Checkout Session expires. */
            after_expiration?: components["schemas"]["payment_pages_checkout_session_after_expiration"] | null;
            /** @description Enables user redeemable promotion codes. */
            allow_promotion_codes?: boolean | null;
            /** @description Total of all items before discounts or taxes are applied. */
            amount_subtotal?: number | null;
            /** @description Total of all items after discounts and taxes are applied. */
            amount_total?: number | null;
            automatic_tax: components["schemas"]["payment_pages_checkout_session_automatic_tax"];
            /**
             * @description Describes whether Checkout should collect the customer's billing address. Defaults to `auto`.
             * @enum {string|null}
             */
            billing_address_collection?: "auto" | "required" | null;
            /** @description If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website. */
            cancel_url?: string | null;
            /** @description A unique string to reference the Checkout Session. This can be a
             *     customer ID, a cart ID, or similar, and can be used to reconcile the
             *     Session with your internal systems. */
            client_reference_id?: string | null;
            /** @description Client secret to be used when initializing Stripe.js embedded checkout. */
            client_secret?: string | null;
            /** @description Results of `consent_collection` for this session. */
            consent?: components["schemas"]["payment_pages_checkout_session_consent"] | null;
            /** @description When set, provides configuration for the Checkout Session to gather active consent from customers. */
            consent_collection?: components["schemas"]["payment_pages_checkout_session_consent_collection"] | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency?: string | null;
            /** @description Currency conversion details for [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing) sessions */
            currency_conversion?: components["schemas"]["payment_pages_checkout_session_currency_conversion"] | null;
            /** @description Collect additional information from your customer using custom fields. Up to 3 fields are supported. */
            custom_fields: components["schemas"]["payment_pages_checkout_session_custom_fields"][];
            custom_text: components["schemas"]["payment_pages_checkout_session_custom_text"];
            /** @description The ID of the customer for this Session.
             *     For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout
             *     will create a new customer object based on information provided
             *     during the payment flow unless an existing customer was provided when
             *     the Session was created. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /**
             * @description Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
             * @enum {string|null}
             */
            customer_creation?: "always" | "if_required" | null;
            /** @description The customer details including the customer's tax exempt status and the customer's tax IDs. Customer's address details are not present on Sessions in `setup` mode. */
            customer_details?: components["schemas"]["payment_pages_checkout_session_customer_details"] | null;
            /** @description If provided, this value will be used when the Customer object is created.
             *     If not provided, customers will be asked to enter their email address.
             *     Use this parameter to prefill customer data if you already have an email
             *     on file. To access information about the customer once the payment flow is
             *     complete, use the `customer` attribute. */
            customer_email?: string | null;
            /**
             * Format: unix-time
             * @description The timestamp at which the Checkout Session will expire.
             */
            expires_at: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description ID of the invoice created by the Checkout Session, if it exists. */
            invoice?: (string | components["schemas"]["invoice"]) | null;
            /** @description Details on the state of invoice creation for the Checkout Session. */
            invoice_creation?: components["schemas"]["payment_pages_checkout_session_invoice_creation"] | null;
            /**
             * PaymentPagesCheckoutSessionListLineItems
             * @description The line items purchased by the customer.
             */
            line_items?: {
                /** @description Details about each object. */
                data: components["schemas"]["item"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
             * @enum {string|null}
             */
            locale?: "auto" | "bg" | "cs" | "da" | "de" | "el" | "en" | "en-GB" | "es" | "es-419" | "et" | "fi" | "fil" | "fr" | "fr-CA" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "lv" | "ms" | "mt" | "nb" | "nl" | "pl" | "pt" | "pt-BR" | "ro" | "ru" | "sk" | "sl" | "sv" | "th" | "tr" | "vi" | "zh" | "zh-HK" | "zh-TW" | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description The mode of the Checkout Session.
             * @enum {string}
             */
            mode: "payment" | "setup" | "subscription";
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "checkout.session";
            /** @description The ID of the PaymentIntent for Checkout Sessions in `payment` mode. You can't confirm or cancel the PaymentIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead. */
            payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
            /** @description The ID of the Payment Link that created this Session. */
            payment_link?: (string | components["schemas"]["payment_link"]) | null;
            /**
             * @description Configure whether a Checkout Session should collect a payment method. Defaults to `always`.
             * @enum {string|null}
             */
            payment_method_collection?: "always" | "if_required" | null;
            /** @description Information about the payment method configuration used for this Checkout session if using dynamic payment methods. */
            payment_method_configuration_details?: components["schemas"]["payment_method_config_biz_payment_method_configuration_details"] | null;
            /** @description Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession. */
            payment_method_options?: components["schemas"]["checkout_session_payment_method_options"] | null;
            /** @description A list of the types of payment methods (e.g. card) this Checkout
             *     Session is allowed to accept. */
            payment_method_types: string[];
            /**
             * @description The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
             *     You can use this value to decide when to fulfill your customer's order.
             * @enum {string}
             */
            payment_status: "no_payment_required" | "paid" | "unpaid";
            phone_number_collection?: components["schemas"]["payment_pages_checkout_session_phone_number_collection"];
            /** @description The ID of the original expired Checkout Session that triggered the recovery flow. */
            recovered_from?: string | null;
            /**
             * @description This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`.
             * @enum {string}
             */
            redirect_on_completion?: "always" | "if_required" | "never";
            /** @description Applies to Checkout Sessions with `ui_mode: embedded`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. */
            return_url?: string;
            /** @description Controls saved payment method settings for the session. Only available in `payment` and `subscription` mode. */
            saved_payment_method_options?: components["schemas"]["payment_pages_checkout_session_saved_payment_method_options"] | null;
            /** @description The ID of the SetupIntent for Checkout Sessions in `setup` mode. You can't confirm or cancel the SetupIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead. */
            setup_intent?: (string | components["schemas"]["setup_intent"]) | null;
            /** @description When set, provides configuration for Checkout to collect a shipping address from a customer. */
            shipping_address_collection?: components["schemas"]["payment_pages_checkout_session_shipping_address_collection"] | null;
            /** @description The details of the customer cost of shipping, including the customer chosen ShippingRate. */
            shipping_cost?: components["schemas"]["payment_pages_checkout_session_shipping_cost"] | null;
            /** @description Shipping information for this Checkout Session. */
            shipping_details?: components["schemas"]["shipping"] | null;
            /** @description The shipping rate options applied to this Session. */
            shipping_options: components["schemas"]["payment_pages_checkout_session_shipping_option"][];
            /**
             * @description The status of the Checkout Session, one of `open`, `complete`, or `expired`.
             * @enum {string|null}
             */
            status?: "complete" | "expired" | "open" | null;
            /**
             * @description Describes the type of transaction being performed by Checkout in order to customize
             *     relevant text on the page, such as the submit button. `submit_type` can only be
             *     specified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.
             * @enum {string|null}
             */
            submit_type?: "auto" | "book" | "donate" | "pay" | "subscribe" | null;
            /** @description The ID of the subscription for Checkout Sessions in `subscription` mode. */
            subscription?: (string | components["schemas"]["subscription"]) | null;
            /** @description The URL the customer will be directed to after the payment or
             *     subscription creation is successful. */
            success_url?: string | null;
            tax_id_collection?: components["schemas"]["payment_pages_checkout_session_tax_id_collection"];
            /** @description Tax and discount details for the computed total amount. */
            total_details?: components["schemas"]["payment_pages_checkout_session_total_details"] | null;
            /**
             * @description The UI mode of the Session. Defaults to `hosted`.
             * @enum {string|null}
             */
            ui_mode?: "embedded" | "hosted" | null;
            /** @description The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`
             *     This value is only present when the session is active. */
            url?: string | null;
        };
        /** CheckoutAcssDebitMandateOptions */
        checkout_acss_debit_mandate_options: {
            /** @description A URL for custom mandate text */
            custom_mandate_url?: string;
            /** @description List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode. */
            default_for?: ("invoice" | "subscription")[];
            /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
            interval_description?: string | null;
            /**
             * @description Payment schedule for the mandate.
             * @enum {string|null}
             */
            payment_schedule?: "combined" | "interval" | "sporadic" | null;
            /**
             * @description Transaction type of the mandate.
             * @enum {string|null}
             */
            transaction_type?: "business" | "personal" | null;
        };
        /** CheckoutAcssDebitPaymentMethodOptions */
        checkout_acss_debit_payment_method_options: {
            /**
             * @description Currency supported by the bank account. Returned when the Session is in `setup` mode.
             * @enum {string}
             */
            currency?: "cad" | "usd";
            mandate_options?: components["schemas"]["checkout_acss_debit_mandate_options"];
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
            /**
             * @description Bank account verification method.
             * @enum {string}
             */
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        /** CheckoutAffirmPaymentMethodOptions */
        checkout_affirm_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutAfterpayClearpayPaymentMethodOptions */
        checkout_afterpay_clearpay_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutAlipayPaymentMethodOptions */
        checkout_alipay_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutAmazonPayPaymentMethodOptions */
        checkout_amazon_pay_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** CheckoutAuBecsDebitPaymentMethodOptions */
        checkout_au_becs_debit_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutBacsDebitPaymentMethodOptions */
        checkout_bacs_debit_payment_method_options: {
            mandate_options?: components["schemas"]["checkout_payment_method_options_mandate_options_bacs_debit"];
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        /** CheckoutBancontactPaymentMethodOptions */
        checkout_bancontact_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutBoletoPaymentMethodOptions */
        checkout_boleto_payment_method_options: {
            /** @description The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
            expires_after_days: number;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        /** CheckoutCardInstallmentsOptions */
        checkout_card_installments_options: {
            /** @description Indicates if installments are enabled */
            enabled?: boolean;
        };
        /** CheckoutCardPaymentMethodOptions */
        checkout_card_payment_method_options: {
            installments?: components["schemas"]["checkout_card_installments_options"];
            /**
             * @description Request ability to [capture beyond the standard authorization validity window](/payments/extended-authorization) for this CheckoutSession.
             * @enum {string}
             */
            request_extended_authorization?: "if_available" | "never";
            /**
             * @description Request ability to [increment the authorization](/payments/incremental-authorization) for this CheckoutSession.
             * @enum {string}
             */
            request_incremental_authorization?: "if_available" | "never";
            /**
             * @description Request ability to make [multiple captures](/payments/multicapture) for this CheckoutSession.
             * @enum {string}
             */
            request_multicapture?: "if_available" | "never";
            /**
             * @description Request ability to [overcapture](/payments/overcapture) for this CheckoutSession.
             * @enum {string}
             */
            request_overcapture?: "if_available" | "never";
            /**
             * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
             * @enum {string}
             */
            request_three_d_secure: "any" | "automatic" | "challenge";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
            /** @description Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters. */
            statement_descriptor_suffix_kana?: string;
            /** @description Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters. */
            statement_descriptor_suffix_kanji?: string;
        };
        /** CheckoutCashappPaymentMethodOptions */
        checkout_cashapp_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutCustomerBalanceBankTransferPaymentMethodOptions */
        checkout_customer_balance_bank_transfer_payment_method_options: {
            eu_bank_transfer?: components["schemas"]["payment_method_options_customer_balance_eu_bank_account"];
            /** @description List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
             *
             *     Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`. */
            requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
            /**
             * @description The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
             * @enum {string|null}
             */
            type?: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer" | null;
        };
        /** CheckoutCustomerBalancePaymentMethodOptions */
        checkout_customer_balance_payment_method_options: {
            bank_transfer?: components["schemas"]["checkout_customer_balance_bank_transfer_payment_method_options"];
            /**
             * @description The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
             * @enum {string|null}
             */
            funding_type?: "bank_transfer" | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutEpsPaymentMethodOptions */
        checkout_eps_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutFpxPaymentMethodOptions */
        checkout_fpx_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutGiropayPaymentMethodOptions */
        checkout_giropay_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutGrabPayPaymentMethodOptions */
        checkout_grab_pay_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutIdealPaymentMethodOptions */
        checkout_ideal_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutKakaoPayPaymentMethodOptions */
        checkout_kakao_pay_payment_method_options: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** CheckoutKlarnaPaymentMethodOptions */
        checkout_klarna_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        /** CheckoutKonbiniPaymentMethodOptions */
        checkout_konbini_payment_method_options: {
            /** @description The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST. */
            expires_after_days?: number | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutKrCardPaymentMethodOptions */
        checkout_kr_card_payment_method_options: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** CheckoutLinkPaymentMethodOptions */
        checkout_link_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** CheckoutMobilepayPaymentMethodOptions */
        checkout_mobilepay_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutMultibancoPaymentMethodOptions */
        checkout_multibanco_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutNaverPayPaymentMethodOptions */
        checkout_naver_pay_payment_method_options: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
        };
        /** CheckoutOxxoPaymentMethodOptions */
        checkout_oxxo_payment_method_options: {
            /** @description The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
            expires_after_days: number;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutP24PaymentMethodOptions */
        checkout_p24_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutPaycoPaymentMethodOptions */
        checkout_payco_payment_method_options: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
        };
        /** checkout_payment_method_options_mandate_options_bacs_debit */
        checkout_payment_method_options_mandate_options_bacs_debit: Record<string, never>;
        /** checkout_payment_method_options_mandate_options_sepa_debit */
        checkout_payment_method_options_mandate_options_sepa_debit: Record<string, never>;
        /** CheckoutPaynowPaymentMethodOptions */
        checkout_paynow_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutPaypalPaymentMethodOptions */
        checkout_paypal_payment_method_options: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /** @description Preferred locale of the PayPal checkout page that the customer is redirected to. */
            preferred_locale?: string | null;
            /** @description A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID. */
            reference?: string | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** CheckoutPixPaymentMethodOptions */
        checkout_pix_payment_method_options: {
            /** @description The number of seconds after which Pix payment will expire. */
            expires_after_seconds?: number | null;
        };
        /** CheckoutRevolutPayPaymentMethodOptions */
        checkout_revolut_pay_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** CheckoutSamsungPayPaymentMethodOptions */
        checkout_samsung_pay_payment_method_options: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
        };
        /** CheckoutSepaDebitPaymentMethodOptions */
        checkout_sepa_debit_payment_method_options: {
            mandate_options?: components["schemas"]["checkout_payment_method_options_mandate_options_sepa_debit"];
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        /** CheckoutSessionPaymentMethodOptions */
        checkout_session_payment_method_options: {
            acss_debit?: components["schemas"]["checkout_acss_debit_payment_method_options"];
            affirm?: components["schemas"]["checkout_affirm_payment_method_options"];
            afterpay_clearpay?: components["schemas"]["checkout_afterpay_clearpay_payment_method_options"];
            alipay?: components["schemas"]["checkout_alipay_payment_method_options"];
            amazon_pay?: components["schemas"]["checkout_amazon_pay_payment_method_options"];
            au_becs_debit?: components["schemas"]["checkout_au_becs_debit_payment_method_options"];
            bacs_debit?: components["schemas"]["checkout_bacs_debit_payment_method_options"];
            bancontact?: components["schemas"]["checkout_bancontact_payment_method_options"];
            boleto?: components["schemas"]["checkout_boleto_payment_method_options"];
            card?: components["schemas"]["checkout_card_payment_method_options"];
            cashapp?: components["schemas"]["checkout_cashapp_payment_method_options"];
            customer_balance?: components["schemas"]["checkout_customer_balance_payment_method_options"];
            eps?: components["schemas"]["checkout_eps_payment_method_options"];
            fpx?: components["schemas"]["checkout_fpx_payment_method_options"];
            giropay?: components["schemas"]["checkout_giropay_payment_method_options"];
            grabpay?: components["schemas"]["checkout_grab_pay_payment_method_options"];
            ideal?: components["schemas"]["checkout_ideal_payment_method_options"];
            kakao_pay?: components["schemas"]["checkout_kakao_pay_payment_method_options"];
            klarna?: components["schemas"]["checkout_klarna_payment_method_options"];
            konbini?: components["schemas"]["checkout_konbini_payment_method_options"];
            kr_card?: components["schemas"]["checkout_kr_card_payment_method_options"];
            link?: components["schemas"]["checkout_link_payment_method_options"];
            mobilepay?: components["schemas"]["checkout_mobilepay_payment_method_options"];
            multibanco?: components["schemas"]["checkout_multibanco_payment_method_options"];
            naver_pay?: components["schemas"]["checkout_naver_pay_payment_method_options"];
            oxxo?: components["schemas"]["checkout_oxxo_payment_method_options"];
            p24?: components["schemas"]["checkout_p24_payment_method_options"];
            payco?: components["schemas"]["checkout_payco_payment_method_options"];
            paynow?: components["schemas"]["checkout_paynow_payment_method_options"];
            paypal?: components["schemas"]["checkout_paypal_payment_method_options"];
            pix?: components["schemas"]["checkout_pix_payment_method_options"];
            revolut_pay?: components["schemas"]["checkout_revolut_pay_payment_method_options"];
            samsung_pay?: components["schemas"]["checkout_samsung_pay_payment_method_options"];
            sepa_debit?: components["schemas"]["checkout_sepa_debit_payment_method_options"];
            sofort?: components["schemas"]["checkout_sofort_payment_method_options"];
            swish?: components["schemas"]["checkout_swish_payment_method_options"];
            us_bank_account?: components["schemas"]["checkout_us_bank_account_payment_method_options"];
        };
        /** CheckoutSofortPaymentMethodOptions */
        checkout_sofort_payment_method_options: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** CheckoutSwishPaymentMethodOptions */
        checkout_swish_payment_method_options: {
            /** @description The order reference that will be displayed to customers in the Swish application. Defaults to the `id` of the Payment Intent. */
            reference?: string | null;
        };
        /** CheckoutUsBankAccountPaymentMethodOptions */
        checkout_us_bank_account_payment_method_options: {
            financial_connections?: components["schemas"]["linked_account_options_us_bank_account"];
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
            /**
             * @description Bank account verification method.
             * @enum {string}
             */
            verification_method?: "automatic" | "instant";
        };
        /**
         * ClimateRemovalsOrders
         * @description Orders represent your intent to purchase a particular Climate product. When you create an order, the
         *     payment is deducted from your merchant balance.
         */
        "climate.order": {
            /** @description Total amount of [Frontier](https://frontierclimate.com/)'s service fees in the currency's smallest unit. */
            amount_fees: number;
            /** @description Total amount of the carbon removal in the currency's smallest unit. */
            amount_subtotal: number;
            /** @description Total amount of the order including fees in the currency's smallest unit. */
            amount_total: number;
            beneficiary?: components["schemas"]["climate_removals_beneficiary"];
            /**
             * Format: unix-time
             * @description Time at which the order was canceled. Measured in seconds since the Unix epoch.
             */
            canceled_at?: number | null;
            /**
             * @description Reason for the cancellation of this order.
             * @enum {string|null}
             */
            cancellation_reason?: "expired" | "product_unavailable" | "requested" | null;
            /** @description For delivered orders, a URL to a delivery certificate for the order. */
            certificate?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the order was confirmed. Measured in seconds since the Unix epoch.
             */
            confirmed_at?: number | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase, representing the currency for this order. */
            currency: string;
            /**
             * Format: unix-time
             * @description Time at which the order's expected_delivery_year was delayed. Measured in seconds since the Unix epoch.
             */
            delayed_at?: number | null;
            /**
             * Format: unix-time
             * @description Time at which the order was delivered. Measured in seconds since the Unix epoch.
             */
            delivered_at?: number | null;
            /** @description Details about the delivery of carbon removal for this order. */
            delivery_details: components["schemas"]["climate_removals_order_deliveries"][];
            /** @description The year this order is expected to be delivered. */
            expected_delivery_year: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * Format: decimal
             * @description Quantity of carbon removal that is included in this order.
             */
            metric_tons: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "climate.order";
            /** @description Unique ID for the Climate `Product` this order is purchasing. */
            product: string | components["schemas"]["climate.product"];
            /**
             * Format: unix-time
             * @description Time at which the order's product was substituted for a different product. Measured in seconds since the Unix epoch.
             */
            product_substituted_at?: number | null;
            /**
             * @description The current status of this order.
             * @enum {string}
             */
            status: "awaiting_funds" | "canceled" | "confirmed" | "delivered" | "open";
        };
        /**
         * ClimateRemovalsProducts
         * @description A Climate product represents a type of carbon removal unit available for reservation.
         *     You can retrieve it to see the current price and availability.
         */
        "climate.product": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Current prices for a metric ton of carbon removal in a currency's smallest unit. */
            current_prices_per_metric_ton: {
                [key: string]: components["schemas"]["climate_removals_products_price"];
            };
            /** @description The year in which the carbon removal is expected to be delivered. */
            delivery_year?: number | null;
            /** @description Unique identifier for the object. For convenience, Climate product IDs are human-readable strings
             *     that start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory)
             *     for a list of available carbon removal products. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * Format: decimal
             * @description The quantity of metric tons available for reservation.
             */
            metric_tons_available: string;
            /** @description The Climate product's name. */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "climate.product";
            /** @description The carbon removal suppliers that fulfill orders for this Climate product. */
            suppliers: components["schemas"]["climate.supplier"][];
        };
        /**
         * ClimateRemovalsSuppliers
         * @description A supplier of carbon removal.
         */
        "climate.supplier": {
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Link to a webpage to learn more about the supplier. */
            info_url: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description The locations in which this supplier operates. */
            locations: components["schemas"]["climate_removals_location"][];
            /** @description Name of this carbon removal supplier. */
            name: string;
            /**
             * @description String representing the object’s type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "climate.supplier";
            /**
             * @description The scientific pathway used for carbon removal.
             * @enum {string}
             */
            removal_pathway: "biomass_carbon_removal_and_storage" | "direct_air_capture" | "enhanced_weathering";
        };
        /** ClimateRemovalsBeneficiary */
        climate_removals_beneficiary: {
            /** @description Publicly displayable name for the end beneficiary of carbon removal. */
            public_name: string;
        };
        /** ClimateRemovalsLocation */
        climate_removals_location: {
            /** @description The city where the supplier is located. */
            city?: string | null;
            /** @description Two-letter ISO code representing the country where the supplier is located. */
            country: string;
            /** @description The geographic latitude where the supplier is located. */
            latitude?: number | null;
            /** @description The geographic longitude where the supplier is located. */
            longitude?: number | null;
            /** @description The state/county/province/region where the supplier is located. */
            region?: string | null;
        };
        /**
         * ClimateRemovalsOrderDeliveries
         * @description The delivery of a specified quantity of carbon for an order.
         */
        climate_removals_order_deliveries: {
            /**
             * Format: unix-time
             * @description Time at which the delivery occurred. Measured in seconds since the Unix epoch.
             */
            delivered_at: number;
            /** @description Specific location of this delivery. */
            location?: components["schemas"]["climate_removals_location"] | null;
            /** @description Quantity of carbon removal supplied by this delivery. */
            metric_tons: string;
            /** @description Once retired, a URL to the registry entry for the tons from this delivery. */
            registry_url?: string | null;
            supplier: components["schemas"]["climate.supplier"];
        };
        /** ClimateRemovalsProductsPrice */
        climate_removals_products_price: {
            /** @description Fees for one metric ton of carbon removal in the currency's smallest unit. */
            amount_fees: number;
            /** @description Subtotal for one metric ton of carbon removal (excluding fees) in the currency's smallest unit. */
            amount_subtotal: number;
            /** @description Total for one metric ton of carbon removal (including fees) in the currency's smallest unit. */
            amount_total: number;
        };
        /**
         * ConfirmationTokensResourceConfirmationToken
         * @description ConfirmationTokens help transport client side data collected by Stripe JS over
         *     to your server for confirming a PaymentIntent or SetupIntent. If the confirmation
         *     is successful, values present on the ConfirmationToken are written onto the Intent.
         *
         *     To learn more about how to use ConfirmationToken, visit the related guides:
         *     - [Finalize payments on the server](https://stripe.com/docs/payments/finalize-payments-on-the-server)
         *     - [Build two-step confirmation](https://stripe.com/docs/payments/build-a-two-step-confirmation).
         */
        confirmation_token: {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /**
             * Format: unix-time
             * @description Time at which this ConfirmationToken expires and can no longer be used to confirm a PaymentIntent or SetupIntent.
             */
            expires_at?: number | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Data used for generating a Mandate. */
            mandate_data?: components["schemas"]["confirmation_tokens_resource_mandate_data"] | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "confirmation_token";
            /** @description ID of the PaymentIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used. */
            payment_intent?: string | null;
            /** @description Payment-method-specific configuration for this ConfirmationToken. */
            payment_method_options?: components["schemas"]["confirmation_tokens_resource_payment_method_options"] | null;
            /** @description Payment details collected by the Payment Element, used to create a PaymentMethod when a PaymentIntent or SetupIntent is confirmed with this ConfirmationToken. */
            payment_method_preview?: components["schemas"]["confirmation_tokens_resource_payment_method_preview"] | null;
            /** @description Return URL used to confirm the Intent. */
            return_url?: string | null;
            /**
             * @description Indicates that you intend to make future payments with this ConfirmationToken's payment method.
             *
             *     The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
             * @enum {string|null}
             */
            setup_future_usage?: "off_session" | "on_session" | null;
            /** @description ID of the SetupIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used. */
            setup_intent?: string | null;
            /** @description Shipping information collected on this ConfirmationToken. */
            shipping?: components["schemas"]["confirmation_tokens_resource_shipping"] | null;
            /** @description Indicates whether the Stripe SDK is used to handle confirmation flow. Defaults to `true` on ConfirmationToken. */
            use_stripe_sdk: boolean;
        };
        /**
         * ConfirmationTokensResourceMandateData
         * @description Data used for generating a Mandate.
         */
        confirmation_tokens_resource_mandate_data: {
            customer_acceptance: components["schemas"]["confirmation_tokens_resource_mandate_data_resource_customer_acceptance"];
        };
        /**
         * ConfirmationTokensResourceMandateDataResourceCustomerAcceptance
         * @description This hash contains details about the customer acceptance of the Mandate.
         */
        confirmation_tokens_resource_mandate_data_resource_customer_acceptance: {
            /** @description If this is a Mandate accepted online, this hash contains details about the online acceptance. */
            online?: components["schemas"]["confirmation_tokens_resource_mandate_data_resource_customer_acceptance_resource_online"] | null;
            /** @description The type of customer acceptance information included with the Mandate. */
            type: string;
        };
        /**
         * ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnline
         * @description This hash contains details about the online acceptance.
         */
        confirmation_tokens_resource_mandate_data_resource_customer_acceptance_resource_online: {
            /** @description The IP address from which the Mandate was accepted by the customer. */
            ip_address?: string | null;
            /** @description The user agent of the browser from which the Mandate was accepted by the customer. */
            user_agent?: string | null;
        };
        /**
         * ConfirmationTokensResourcePaymentMethodOptions
         * @description Payment-method-specific configuration
         */
        confirmation_tokens_resource_payment_method_options: {
            /** @description This hash contains the card payment method options. */
            card?: components["schemas"]["confirmation_tokens_resource_payment_method_options_resource_card"] | null;
        };
        /**
         * ConfirmationTokensResourcePaymentMethodOptionsResourceCard
         * @description This hash contains the card payment method options.
         */
        confirmation_tokens_resource_payment_method_options_resource_card: {
            /** @description The `cvc_update` Token collected from the Payment Element. */
            cvc_token?: string | null;
        };
        /**
         * ConfirmationTokensResourcePaymentMethodPreview
         * @description Details of the PaymentMethod collected by Payment Element
         */
        confirmation_tokens_resource_payment_method_preview: {
            acss_debit?: components["schemas"]["payment_method_acss_debit"];
            affirm?: components["schemas"]["payment_method_affirm"];
            afterpay_clearpay?: components["schemas"]["payment_method_afterpay_clearpay"];
            alipay?: components["schemas"]["payment_flows_private_payment_methods_alipay"];
            /**
             * @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
             * @enum {string}
             */
            allow_redisplay?: "always" | "limited" | "unspecified";
            alma?: components["schemas"]["payment_method_alma"];
            amazon_pay?: components["schemas"]["payment_method_amazon_pay"];
            au_becs_debit?: components["schemas"]["payment_method_au_becs_debit"];
            bacs_debit?: components["schemas"]["payment_method_bacs_debit"];
            bancontact?: components["schemas"]["payment_method_bancontact"];
            billing_details: components["schemas"]["billing_details"];
            blik?: components["schemas"]["payment_method_blik"];
            boleto?: components["schemas"]["payment_method_boleto"];
            card?: components["schemas"]["payment_method_card"];
            card_present?: components["schemas"]["payment_method_card_present"];
            cashapp?: components["schemas"]["payment_method_cashapp"];
            /** @description The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. */
            customer?: (string | components["schemas"]["customer"]) | null;
            customer_balance?: components["schemas"]["payment_method_customer_balance"];
            eps?: components["schemas"]["payment_method_eps"];
            fpx?: components["schemas"]["payment_method_fpx"];
            giropay?: components["schemas"]["payment_method_giropay"];
            grabpay?: components["schemas"]["payment_method_grabpay"];
            ideal?: components["schemas"]["payment_method_ideal"];
            interac_present?: components["schemas"]["payment_method_interac_present"];
            kakao_pay?: components["schemas"]["payment_method_kakao_pay"];
            klarna?: components["schemas"]["payment_method_klarna"];
            konbini?: components["schemas"]["payment_method_konbini"];
            kr_card?: components["schemas"]["payment_method_kr_card"];
            link?: components["schemas"]["payment_method_link"];
            mobilepay?: components["schemas"]["payment_method_mobilepay"];
            multibanco?: components["schemas"]["payment_method_multibanco"];
            naver_pay?: components["schemas"]["payment_method_naver_pay"];
            oxxo?: components["schemas"]["payment_method_oxxo"];
            p24?: components["schemas"]["payment_method_p24"];
            payco?: components["schemas"]["payment_method_payco"];
            paynow?: components["schemas"]["payment_method_paynow"];
            paypal?: components["schemas"]["payment_method_paypal"];
            pix?: components["schemas"]["payment_method_pix"];
            promptpay?: components["schemas"]["payment_method_promptpay"];
            revolut_pay?: components["schemas"]["payment_method_revolut_pay"];
            samsung_pay?: components["schemas"]["payment_method_samsung_pay"];
            sepa_debit?: components["schemas"]["payment_method_sepa_debit"];
            sofort?: components["schemas"]["payment_method_sofort"];
            swish?: components["schemas"]["payment_method_swish"];
            twint?: components["schemas"]["payment_method_twint"];
            /**
             * @description The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
             * @enum {string}
             */
            type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "card_present" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "interac_present" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
            us_bank_account?: components["schemas"]["payment_method_us_bank_account"];
            wechat_pay?: components["schemas"]["payment_method_wechat_pay"];
            zip?: components["schemas"]["payment_method_zip"];
        };
        /** ConfirmationTokensResourceShipping */
        confirmation_tokens_resource_shipping: {
            address: components["schemas"]["address"];
            /** @description Recipient name. */
            name: string;
            /** @description Recipient phone (including extension). */
            phone?: string | null;
        };
        /** ConnectAccountReference */
        connect_account_reference: {
            /** @description The connected account being referenced when `type` is `account`. */
            account?: string | components["schemas"]["account"];
            /**
             * @description Type of the account referenced.
             * @enum {string}
             */
            type: "account" | "self";
        };
        /** ConnectCollectionTransfer */
        connect_collection_transfer: {
            /** @description Amount transferred, in cents (or local equivalent). */
            amount: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description ID of the account that funds are being collected for. */
            destination: string | components["schemas"]["account"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "connect_collection_transfer";
        };
        /** ConnectEmbeddedAccountConfigClaim */
        connect_embedded_account_config_claim: {
            /** @description Whether the embedded component is enabled. */
            enabled: boolean;
            features: components["schemas"]["connect_embedded_account_features_claim"];
        };
        /** ConnectEmbeddedAccountFeaturesClaim */
        connect_embedded_account_features_claim: {
            /** @description Disables Stripe user authentication for this embedded component. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. The default value for this feature is `false` when `external_account_collection` is enabled and `true` otherwise. */
            disable_stripe_user_authentication: boolean;
            /** @description Whether to allow platforms to control bank account collection for their connected accounts. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. Otherwise, bank account collection is determined by compliance requirements. The default value for this feature is `true`. */
            external_account_collection: boolean;
        };
        /** ConnectEmbeddedAccountSessionCreateComponents */
        connect_embedded_account_session_create_components: {
            account_management: components["schemas"]["connect_embedded_account_config_claim"];
            account_onboarding: components["schemas"]["connect_embedded_account_config_claim"];
            balances: components["schemas"]["connect_embedded_payouts_config_claim"];
            documents: components["schemas"]["connect_embedded_base_config_claim"];
            notification_banner: components["schemas"]["connect_embedded_account_config_claim"];
            payment_details: components["schemas"]["connect_embedded_payments_config_claim"];
            payments: components["schemas"]["connect_embedded_payments_config_claim"];
            payouts: components["schemas"]["connect_embedded_payouts_config_claim"];
            payouts_list: components["schemas"]["connect_embedded_base_config_claim"];
            tax_registrations: components["schemas"]["connect_embedded_base_config_claim"];
            tax_settings: components["schemas"]["connect_embedded_base_config_claim"];
        };
        /** ConnectEmbeddedBaseConfigClaim */
        connect_embedded_base_config_claim: {
            /** @description Whether the embedded component is enabled. */
            enabled: boolean;
            features: components["schemas"]["connect_embedded_base_features"];
        };
        /** ConnectEmbeddedBaseFeatures */
        connect_embedded_base_features: Record<string, never>;
        /** ConnectEmbeddedPaymentsConfigClaim */
        connect_embedded_payments_config_claim: {
            /** @description Whether the embedded component is enabled. */
            enabled: boolean;
            features: components["schemas"]["connect_embedded_payments_features"];
        };
        /** ConnectEmbeddedPaymentsFeatures */
        connect_embedded_payments_features: {
            /** @description Whether to allow capturing and cancelling payment intents. This is `true` by default. */
            capture_payments: boolean;
            /** @description Whether to allow connected accounts to manage destination charges that are created on behalf of them. This is `false` by default. */
            destination_on_behalf_of_charge_management: boolean;
            /** @description Whether to allow responding to disputes, including submitting evidence and accepting disputes. This is `true` by default. */
            dispute_management: boolean;
            /** @description Whether to allow sending refunds. This is `true` by default. */
            refund_management: boolean;
        };
        /** ConnectEmbeddedPayoutsConfigClaim */
        connect_embedded_payouts_config_claim: {
            /** @description Whether the embedded component is enabled. */
            enabled: boolean;
            features: components["schemas"]["connect_embedded_payouts_features"];
        };
        /** ConnectEmbeddedPayoutsFeatures */
        connect_embedded_payouts_features: {
            /** @description Disables Stripe user authentication for this embedded component. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. The default value for this feature is `false` when `external_account_collection` is enabled and `true` otherwise. */
            disable_stripe_user_authentication: boolean;
            /** @description Whether to allow payout schedule to be changed. Default `true` when Stripe owns Loss Liability, default `false` otherwise. */
            edit_payout_schedule: boolean;
            /** @description Whether to allow platforms to control bank account collection for their connected accounts. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. Otherwise, bank account collection is determined by compliance requirements. The default value for this feature is `true`. */
            external_account_collection: boolean;
            /** @description Whether to allow creation of instant payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise. */
            instant_payouts: boolean;
            /** @description Whether to allow creation of standard payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise. */
            standard_payouts: boolean;
        };
        /**
         * CountrySpec
         * @description Stripe needs to collect certain pieces of information about each account
         *     created. These requirements can differ depending on the account's country. The
         *     Country Specs API makes these rules available to your integration.
         *
         *     You can also view the information from this API call as [an online
         *     guide](/docs/connect/required-verification-information).
         */
        country_spec: {
            /** @description The default currency for this country. This applies to both payment methods and bank accounts. */
            default_currency: string;
            /** @description Unique identifier for the object. Represented as the ISO country code for this country. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "country_spec";
            /** @description Currencies that can be accepted in the specific country (for transfers). */
            supported_bank_account_currencies: {
                [key: string]: string[];
            };
            /** @description Currencies that can be accepted in the specified country (for payments). */
            supported_payment_currencies: string[];
            /** @description Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges). */
            supported_payment_methods: string[];
            /** @description Countries that can accept transfers from the specified country. */
            supported_transfer_countries: string[];
            verification_fields: components["schemas"]["country_spec_verification_fields"];
        };
        /** CountrySpecVerificationFieldDetails */
        country_spec_verification_field_details: {
            /** @description Additional fields which are only required for some users. */
            additional: string[];
            /** @description Fields which every account must eventually provide. */
            minimum: string[];
        };
        /** CountrySpecVerificationFields */
        country_spec_verification_fields: {
            company: components["schemas"]["country_spec_verification_field_details"];
            individual: components["schemas"]["country_spec_verification_field_details"];
        };
        /**
         * Coupon
         * @description A coupon contains information about a percent-off or amount-off discount you
         *     might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
         *     [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
         */
        coupon: {
            /** @description Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
            amount_off?: number | null;
            applies_to?: components["schemas"]["coupon_applies_to"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. */
            currency?: string | null;
            /** @description Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
            currency_options?: {
                [key: string]: components["schemas"]["coupon_currency_option"];
            };
            /**
             * @description One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
             * @enum {string}
             */
            duration: "forever" | "once" | "repeating";
            /** @description If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`. */
            duration_in_months?: number | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. */
            max_redemptions?: number | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description Name of the coupon displayed to customers on for instance invoices or receipts. */
            name?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "coupon";
            /** @description Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead. */
            percent_off?: number | null;
            /**
             * Format: unix-time
             * @description Date after which the coupon can no longer be redeemed.
             */
            redeem_by?: number | null;
            /** @description Number of times this coupon has been applied to a customer. */
            times_redeemed: number;
            /** @description Taking account of the above properties, whether this coupon can still be applied to a customer. */
            valid: boolean;
        };
        /** CouponAppliesTo */
        coupon_applies_to: {
            /** @description A list of product IDs this coupon applies to */
            products: string[];
        };
        /** CouponCurrencyOption */
        coupon_currency_option: {
            /** @description Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
            amount_off: number;
        };
        /** CreditBalance */
        credit_balance: {
            available_balance: components["schemas"]["billing_credit_grants_resource_amount"];
            ledger_balance: components["schemas"]["billing_credit_grants_resource_amount"];
        };
        /**
         * CreditNote
         * @description Issue a credit note to adjust an invoice's amount after the invoice is finalized.
         *
         *     Related guide: [Credit notes](https://stripe.com/docs/billing/invoices/credit-notes)
         */
        credit_note: {
            /** @description The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax. */
            amount: number;
            /** @description This is the sum of all the shipping amounts. */
            amount_shipping: number;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description ID of the customer. */
            customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
            /** @description Customer balance transaction related to this credit note. */
            customer_balance_transaction?: (string | components["schemas"]["customer_balance_transaction"]) | null;
            /** @description The integer amount in cents (or local equivalent) representing the total amount of discount that was credited. */
            discount_amount: number;
            /** @description The aggregate amounts calculated per discount for all line items. */
            discount_amounts: components["schemas"]["discounts_resource_discount_amount"][];
            /**
             * Format: unix-time
             * @description The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF.
             */
            effective_at?: number | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description ID of the invoice. */
            invoice: string | components["schemas"]["invoice"];
            /**
             * CreditNoteLinesList
             * @description Line items that make up the credit note
             */
            lines: {
                /** @description Details about each object. */
                data: components["schemas"]["credit_note_line_item"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Customer-facing text that appears on the credit note PDF. */
            memo?: string | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice. */
            number: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "credit_note";
            /** @description Amount that was credited outside of Stripe. */
            out_of_band_amount?: number | null;
            /** @description The link to download the PDF of the credit note. */
            pdf: string;
            /** @description The pretax credit amounts (ex: discount, credit grants, etc) for all line items. */
            pretax_credit_amounts?: components["schemas"]["credit_notes_pretax_credit_amount"][];
            /**
             * @description Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
             * @enum {string|null}
             */
            reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory" | null;
            /** @description Refund related to this credit note. */
            refund?: (string | components["schemas"]["refund"]) | null;
            /** @description The details of the cost of shipping, including the ShippingRate applied to the invoice. */
            shipping_cost?: components["schemas"]["invoices_resource_shipping_cost"] | null;
            /**
             * @description Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
             * @enum {string}
             */
            status: "issued" | "void";
            /** @description The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding exclusive tax and invoice level discounts. */
            subtotal: number;
            /** @description The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding all tax and invoice level discounts. */
            subtotal_excluding_tax?: number | null;
            /** @description The aggregate amounts calculated per tax rate for all line items. */
            tax_amounts: components["schemas"]["credit_note_tax_amount"][];
            /** @description The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax and all discount. */
            total: number;
            /** @description The integer amount in cents (or local equivalent) representing the total amount of the credit note, excluding tax, but including discounts. */
            total_excluding_tax?: number | null;
            /**
             * @description Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
             * @enum {string}
             */
            type: "post_payment" | "pre_payment";
            /**
             * Format: unix-time
             * @description The time that the credit note was voided.
             */
            voided_at?: number | null;
        };
        /**
         * CreditNoteLineItem
         * @description The credit note line item object
         */
        credit_note_line_item: {
            /** @description The integer amount in cents (or local equivalent) representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts. */
            amount: number;
            /** @description The integer amount in cents (or local equivalent) representing the amount being credited for this line item, excluding all tax and discounts. */
            amount_excluding_tax?: number | null;
            /** @description Description of the item being credited. */
            description?: string | null;
            /** @description The integer amount in cents (or local equivalent) representing the discount being credited for this line item. */
            discount_amount: number;
            /** @description The amount of discount calculated per discount for this line item */
            discount_amounts: components["schemas"]["discounts_resource_discount_amount"][];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description ID of the invoice line item being credited */
            invoice_line_item?: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "credit_note_line_item";
            /** @description The pretax credit amounts (ex: discount, credit grants, etc) for this line item. */
            pretax_credit_amounts?: components["schemas"]["credit_notes_pretax_credit_amount"][];
            /** @description The number of units of product being credited. */
            quantity?: number | null;
            /** @description The amount of tax calculated per tax rate for this line item */
            tax_amounts: components["schemas"]["credit_note_tax_amount"][];
            /** @description The tax rates which apply to the line item. */
            tax_rates: components["schemas"]["tax_rate"][];
            /**
             * @description The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
             * @enum {string}
             */
            type: "custom_line_item" | "invoice_line_item";
            /** @description The cost of each unit of product being credited. */
            unit_amount?: number | null;
            /**
             * Format: decimal
             * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
             */
            unit_amount_decimal?: string | null;
            /**
             * Format: decimal
             * @description The amount in cents (or local equivalent) representing the unit amount being credited for this line item, excluding all tax and discounts.
             */
            unit_amount_excluding_tax?: string | null;
        };
        /** CreditNoteTaxAmount */
        credit_note_tax_amount: {
            /** @description The amount, in cents (or local equivalent), of the tax. */
            amount: number;
            /** @description Whether this tax amount is inclusive or exclusive. */
            inclusive: boolean;
            /** @description The tax rate that was applied to get this tax amount. */
            tax_rate: string | components["schemas"]["tax_rate"];
            /**
             * @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
             * @enum {string|null}
             */
            taxability_reason?: "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated" | null;
            /** @description The amount on which tax is calculated, in cents (or local equivalent). */
            taxable_amount?: number | null;
        };
        /** CreditNotesPretaxCreditAmount */
        credit_notes_pretax_credit_amount: {
            /** @description The amount, in cents (or local equivalent), of the pretax credit amount. */
            amount: number;
            /** @description The credit balance transaction that was applied to get this pretax credit amount. */
            credit_balance_transaction?: string | components["schemas"]["billing.credit_balance_transaction"];
            /** @description The discount that was applied to get this pretax credit amount. */
            discount?: string | components["schemas"]["discount"] | components["schemas"]["deleted_discount"];
            /**
             * @description Type of the pretax credit amount referenced.
             * @enum {string}
             */
            type: "credit_balance_transaction" | "discount";
        };
        /** CurrencyOption */
        currency_option: {
            /** @description When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. */
            custom_unit_amount?: components["schemas"]["custom_unit_amount"] | null;
            /**
             * @description Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
             * @enum {string|null}
             */
            tax_behavior?: "exclusive" | "inclusive" | "unspecified" | null;
            /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
            tiers?: components["schemas"]["price_tier"][];
            /** @description The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
            unit_amount?: number | null;
            /**
             * Format: decimal
             * @description The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
             */
            unit_amount_decimal?: string | null;
        };
        /** CustomUnitAmount */
        custom_unit_amount: {
            /** @description The maximum unit amount the customer can specify for this item. */
            maximum?: number | null;
            /** @description The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount. */
            minimum?: number | null;
            /** @description The starting unit amount which can be updated by the customer. */
            preset?: number | null;
        };
        /**
         * Customer
         * @description This object represents a customer of your business. Use it to [create recurring charges](https://stripe.com/docs/invoicing/customer), [save payment](https://stripe.com/docs/payments/save-during-payment) and contact information,
         *     and track payments that belong to the same customer.
         */
        customer: {
            /** @description The customer's address. */
            address?: components["schemas"]["address"] | null;
            /** @description The current balance, if any, that's stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize. */
            balance?: number;
            /** @description The current funds being held by Stripe on behalf of the customer. You can apply these funds towards payment intents when the source is "cash_balance". The `settings[reconciliation_mode]` field describes if these funds apply to these payment intents manually or automatically. */
            cash_balance?: components["schemas"]["cash_balance"] | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
            currency?: string | null;
            /** @description ID of the default payment source for the customer.
             *
             *     If you use payment methods created through the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead. */
            default_source?: (string | components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"]) | null;
            /** @description Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.
             *
             *     If an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.
             *
             *     If you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`. */
            delinquent?: boolean | null;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Describes the current discount active on the customer, if there is one. */
            discount?: components["schemas"]["discount"] | null;
            /** @description The customer's email address. */
            email?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The current multi-currency balances, if any, that's stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that's added to their next invoice denominated in that currency. These balances don't apply to unpaid invoices. They solely track amounts that Stripe hasn't successfully applied to any invoice. Stripe only applies a balance in a specific currency to an invoice after that invoice (which is in the same currency) finalizes. */
            invoice_credit_balance?: {
                [key: string]: number;
            };
            /** @description The prefix for the customer used to generate unique invoice numbers. */
            invoice_prefix?: string | null;
            invoice_settings?: components["schemas"]["invoice_setting_customer_setting"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            };
            /** @description The customer's full name or business name. */
            name?: string | null;
            /** @description The suffix of the customer's next invoice number (for example, 0001). When the account uses account level sequencing, this parameter is ignored in API requests and the field omitted in API responses. */
            next_invoice_sequence?: number;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "customer";
            /** @description The customer's phone number. */
            phone?: string | null;
            /** @description The customer's preferred locales (languages), ordered by preference. */
            preferred_locales?: string[] | null;
            /** @description Mailing and shipping address for the customer. Appears on invoices emailed to this customer. */
            shipping?: components["schemas"]["shipping"] | null;
            /**
             * ApmsSourcesSourceList
             * @description The customer's payment sources, if any.
             */
            sources?: {
                /** @description Details about each object. */
                data: (components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"])[];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /**
             * SubscriptionList
             * @description The customer's current subscriptions, if any.
             */
            subscriptions?: {
                /** @description Details about each object. */
                data: components["schemas"]["subscription"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            tax?: components["schemas"]["customer_tax"];
            /**
             * @description Describes the customer's tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **"Reverse charge"**.
             * @enum {string|null}
             */
            tax_exempt?: "exempt" | "none" | "reverse" | null;
            /**
             * TaxIDsList
             * @description The customer's tax IDs.
             */
            tax_ids?: {
                /** @description Details about each object. */
                data: components["schemas"]["tax_id"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /** @description ID of the test clock that this customer belongs to. */
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
        };
        /** customer_acceptance */
        customer_acceptance: {
            /**
             * Format: unix-time
             * @description The time that the customer accepts the mandate.
             */
            accepted_at?: number | null;
            offline?: components["schemas"]["offline_acceptance"];
            online?: components["schemas"]["online_acceptance"];
            /**
             * @description The mandate includes the type of customer acceptance information, such as: `online` or `offline`.
             * @enum {string}
             */
            type: "offline" | "online";
        };
        /** CustomerBalanceCustomerBalanceSettings */
        customer_balance_customer_balance_settings: {
            /**
             * @description The configuration for how funds that land in the customer cash balance are reconciled.
             * @enum {string}
             */
            reconciliation_mode: "automatic" | "manual";
            /** @description A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance */
            using_merchant_default: boolean;
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft */
        customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft: {
            /** @description The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds taken out of your Stripe balance. */
            balance_transaction: string | components["schemas"]["balance_transaction"];
            /** @description The [Cash Balance Transaction](https://stripe.com/docs/api/cash_balance_transactions/object) that brought the customer balance negative, triggering the clawback of funds. */
            linked_transaction: string | components["schemas"]["customer_cash_balance_transaction"];
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction */
        customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction: {
            /** @description The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were applied to. */
            payment_intent: string | components["schemas"]["payment_intent"];
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction */
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction: {
            bank_transfer: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer"];
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer */
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer: {
            eu_bank_transfer?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer"];
            gb_bank_transfer?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer"];
            jp_bank_transfer?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer"];
            /** @description The user-supplied reference field on the bank transfer. */
            reference?: string | null;
            /**
             * @description The funding method type used to fund the customer balance. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
             * @enum {string}
             */
            type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
            us_bank_transfer?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_us_bank_transfer"];
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer */
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer: {
            /** @description The BIC of the bank of the sender of the funding. */
            bic?: string | null;
            /** @description The last 4 digits of the IBAN of the sender of the funding. */
            iban_last4?: string | null;
            /** @description The full name of the sender, as supplied by the sending bank. */
            sender_name?: string | null;
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer */
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer: {
            /** @description The last 4 digits of the account number of the sender of the funding. */
            account_number_last4?: string | null;
            /** @description The full name of the sender, as supplied by the sending bank. */
            sender_name?: string | null;
            /** @description The sort code of the bank of the sender of the funding */
            sort_code?: string | null;
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer */
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer: {
            /** @description The name of the bank of the sender of the funding. */
            sender_bank?: string | null;
            /** @description The name of the bank branch of the sender of the funding. */
            sender_branch?: string | null;
            /** @description The full name of the sender, as supplied by the sending bank. */
            sender_name?: string | null;
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer */
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_us_bank_transfer: {
            /**
             * @description The banking network used for this funding.
             * @enum {string}
             */
            network?: "ach" | "domestic_wire_us" | "swift";
            /** @description The full name of the sender, as supplied by the sending bank. */
            sender_name?: string | null;
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction */
        customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction: {
            /** @description The [Refund](https://stripe.com/docs/api/refunds/object) that moved these funds into the customer's cash balance. */
            refund: string | components["schemas"]["refund"];
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance */
        customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance: {
            /** @description The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds transferred to your Stripe balance. */
            balance_transaction: string | components["schemas"]["balance_transaction"];
        };
        /** CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction */
        customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction: {
            /** @description The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were unapplied from. */
            payment_intent: string | components["schemas"]["payment_intent"];
        };
        /**
         * CustomerBalanceTransaction
         * @description Each customer has a [Balance](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
         *     which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
         *     You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
         *     or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
         *
         *     Related guide: [Customer balance](https://stripe.com/docs/billing/customer/balance)
         */
        customer_balance_transaction: {
            /** @description The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`. */
            amount: number;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The ID of the credit note (if any) related to the transaction. */
            credit_note?: (string | components["schemas"]["credit_note"]) | null;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description The ID of the customer the transaction belongs to. */
            customer: string | components["schemas"]["customer"];
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice. */
            ending_balance: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The ID of the invoice (if any) related to the transaction. */
            invoice?: (string | components["schemas"]["invoice"]) | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "customer_balance_transaction";
            /**
             * @description Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
             * @enum {string}
             */
            type: "adjustment" | "applied_to_invoice" | "credit_note" | "initial" | "invoice_overpaid" | "invoice_too_large" | "invoice_too_small" | "migration" | "unapplied_from_invoice" | "unspent_receiver_credit";
        };
        /**
         * CustomerCashBalanceTransaction
         * @description Customers with certain payments enabled have a cash balance, representing funds that were paid
         *     by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions
         *     represent when funds are moved into or out of this balance. This includes funding by the customer, allocation
         *     to payments, and refunds to the customer.
         */
        customer_cash_balance_transaction: {
            adjusted_for_overdraft?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft"];
            applied_to_payment?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description The customer whose available cash balance changed as a result of this transaction. */
            customer: string | components["schemas"]["customer"];
            /** @description The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            ending_balance: number;
            funded?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance. */
            net_amount: number;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "customer_cash_balance_transaction";
            refunded_from_payment?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction"];
            transferred_to_balance?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance"];
            /**
             * @description The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types.
             * @enum {string}
             */
            type: "adjusted_for_overdraft" | "applied_to_payment" | "funded" | "funding_reversed" | "refunded_from_payment" | "return_canceled" | "return_initiated" | "transferred_to_balance" | "unapplied_from_payment";
            unapplied_from_payment?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction"];
        };
        /**
         * CustomerSessionResourceCustomerSession
         * @description A Customer Session allows you to grant Stripe's frontend SDKs (like Stripe.js) client-side access
         *     control over a Customer.
         *
         *     Related guides: [Customer Session with the Payment Element](/payments/accept-a-payment-deferred?platform=web&type=payment#save-payment-methods),
         *     [Customer Session with the Pricing Table](/payments/checkout/pricing-table#customer-session),
         *     [Customer Session with the Buy Button](/payment-links/buy-button#pass-an-existing-customer).
         */
        customer_session: {
            /** @description The client secret of this Customer Session. Used on the client to set up secure access to the given `customer`.
             *
             *     The client secret can be used to provide access to `customer` from your frontend. It should not be stored, logged, or exposed to anyone other than the relevant customer. Make sure that you have TLS enabled on any page that includes the client secret. */
            client_secret: string;
            components?: components["schemas"]["customer_session_resource_components"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The Customer the Customer Session was created for. */
            customer: string | components["schemas"]["customer"];
            /**
             * Format: unix-time
             * @description The timestamp at which this Customer Session will expire.
             */
            expires_at: number;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "customer_session";
        };
        /**
         * CustomerSessionResourceComponents
         * @description Configuration for the components supported by this Customer Session.
         */
        customer_session_resource_components: {
            buy_button: components["schemas"]["customer_session_resource_components_resource_buy_button"];
            payment_element: components["schemas"]["customer_session_resource_components_resource_payment_element"];
            pricing_table: components["schemas"]["customer_session_resource_components_resource_pricing_table"];
        };
        /**
         * CustomerSessionResourceComponentsResourceBuyButton
         * @description This hash contains whether the buy button is enabled.
         */
        customer_session_resource_components_resource_buy_button: {
            /** @description Whether the buy button is enabled. */
            enabled: boolean;
        };
        /**
         * CustomerSessionResourceComponentsResourcePaymentElement
         * @description This hash contains whether the Payment Element is enabled and the features it supports.
         */
        customer_session_resource_components_resource_payment_element: {
            /** @description Whether the Payment Element is enabled. */
            enabled: boolean;
            /** @description This hash defines whether the Payment Element supports certain features. */
            features?: components["schemas"]["customer_session_resource_components_resource_payment_element_resource_features"] | null;
        };
        /**
         * CustomerSessionResourceComponentsResourcePaymentElementResourceFeatures
         * @description This hash contains the features the Payment Element supports.
         */
        customer_session_resource_components_resource_payment_element_resource_features: {
            /** @description A list of [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) values that controls which saved payment methods the Payment Element displays by filtering to only show payment methods with an `allow_redisplay` value that is present in this list.
             *
             *     If not specified, defaults to ["always"]. In order to display all saved payment methods, specify ["always", "limited", "unspecified"]. */
            payment_method_allow_redisplay_filters: ("always" | "limited" | "unspecified")[];
            /**
             * @description Controls whether or not the Payment Element shows saved payment methods. This parameter defaults to `disabled`.
             * @enum {string}
             */
            payment_method_redisplay: "disabled" | "enabled";
            /** @description Determines the max number of saved payment methods for the Payment Element to display. This parameter defaults to `3`. */
            payment_method_redisplay_limit?: number | null;
            /**
             * @description Controls whether the Payment Element displays the option to remove a saved payment method. This parameter defaults to `disabled`.
             *
             *     Allowing buyers to remove their saved payment methods impacts subscriptions that depend on that payment method. Removing the payment method detaches the [`customer` object](https://docs.stripe.com/api/payment_methods/object#payment_method_object-customer) from that [PaymentMethod](https://docs.stripe.com/api/payment_methods).
             * @enum {string}
             */
            payment_method_remove: "disabled" | "enabled";
            /**
             * @description Controls whether the Payment Element displays a checkbox offering to save a new payment method. This parameter defaults to `disabled`.
             *
             *     If a customer checks the box, the [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) value on the PaymentMethod is set to `'always'` at confirmation time. For PaymentIntents, the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value is also set to the value defined in `payment_method_save_usage`.
             * @enum {string}
             */
            payment_method_save: "disabled" | "enabled";
            /**
             * @description When using PaymentIntents and the customer checks the save checkbox, this field determines the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value used to confirm the PaymentIntent.
             *
             *     When using SetupIntents, directly configure the [`usage`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) value on SetupIntent creation.
             * @enum {string|null}
             */
            payment_method_save_usage?: "off_session" | "on_session" | null;
        };
        /**
         * CustomerSessionResourceComponentsResourcePricingTable
         * @description This hash contains whether the pricing table is enabled.
         */
        customer_session_resource_components_resource_pricing_table: {
            /** @description Whether the pricing table is enabled. */
            enabled: boolean;
        };
        /** CustomerTax */
        customer_tax: {
            /**
             * @description Surfaces if automatic tax computation is possible given the current customer location information.
             * @enum {string}
             */
            automatic_tax: "failed" | "not_collecting" | "supported" | "unrecognized_location";
            /** @description A recent IP address of the customer used for tax reporting and tax location inference. */
            ip_address?: string | null;
            /** @description The customer's location as identified by Stripe Tax. */
            location?: components["schemas"]["customer_tax_location"] | null;
        };
        /** CustomerTaxLocation */
        customer_tax_location: {
            /** @description The customer's country as identified by Stripe Tax. */
            country: string;
            /**
             * @description The data source used to infer the customer's location.
             * @enum {string}
             */
            source: "billing_address" | "ip_address" | "payment_method" | "shipping_destination";
            /** @description The customer's state, county, province, or region as identified by Stripe Tax. */
            state?: string | null;
        };
        /** DeletedAccount */
        deleted_account: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "account";
        };
        /** DeletedApplePayDomain */
        deleted_apple_pay_domain: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "apple_pay_domain";
        };
        /** DeletedApplication */
        deleted_application: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The name of the application. */
            name?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "application";
        };
        /** DeletedBankAccount */
        deleted_bank_account: {
            /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
            currency?: string | null;
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "bank_account";
        };
        /** DeletedCard */
        deleted_card: {
            /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
            currency?: string | null;
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "card";
        };
        /** DeletedCoupon */
        deleted_coupon: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "coupon";
        };
        /** DeletedCustomer */
        deleted_customer: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "customer";
        };
        /** DeletedDiscount */
        deleted_discount: {
            /** @description The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
            checkout_session?: string | null;
            coupon: components["schemas"]["coupon"];
            /** @description The ID of the customer associated with this discount. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
            id: string;
            /** @description The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
            invoice?: string | null;
            /** @description The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
            invoice_item?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "discount";
            /** @description The promotion code applied to create this discount. */
            promotion_code?: (string | components["schemas"]["promotion_code"]) | null;
            /**
             * Format: unix-time
             * @description Date that the coupon was applied.
             */
            start: number;
            /** @description The subscription that this coupon is applied to, if it is applied to a particular subscription. */
            subscription?: string | null;
            /** @description The subscription item that this coupon is applied to, if it is applied to a particular subscription item. */
            subscription_item?: string | null;
        };
        /** Polymorphic */
        deleted_external_account: components["schemas"]["deleted_bank_account"] | components["schemas"]["deleted_card"];
        /** DeletedInvoice */
        deleted_invoice: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "invoice";
        };
        /** DeletedInvoiceItem */
        deleted_invoiceitem: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "invoiceitem";
        };
        /** Polymorphic */
        deleted_payment_source: components["schemas"]["deleted_bank_account"] | components["schemas"]["deleted_card"];
        /** DeletedPerson */
        deleted_person: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "person";
        };
        /** DeletedPlan */
        deleted_plan: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "plan";
        };
        /** DeletedPrice */
        deleted_price: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "price";
        };
        /** DeletedProduct */
        deleted_product: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "product";
        };
        /** DeletedProductFeature */
        deleted_product_feature: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "product_feature";
        };
        /** RadarListDeletedList */
        "deleted_radar.value_list": {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "radar.value_list";
        };
        /** RadarListDeletedListItem */
        "deleted_radar.value_list_item": {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "radar.value_list_item";
        };
        /** DeletedSubscriptionItem */
        deleted_subscription_item: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "subscription_item";
        };
        /** deleted_tax_id */
        deleted_tax_id: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax_id";
        };
        /** TerminalConfigurationDeletedConfiguration */
        "deleted_terminal.configuration": {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "terminal.configuration";
        };
        /** TerminalLocationDeletedLocation */
        "deleted_terminal.location": {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "terminal.location";
        };
        /** TerminalReaderDeletedReader */
        "deleted_terminal.reader": {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "terminal.reader";
        };
        /** DeletedTestClock */
        "deleted_test_helpers.test_clock": {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "test_helpers.test_clock";
        };
        /** NotificationWebhookEndpointDeleted */
        deleted_webhook_endpoint: {
            /**
             * @description Always true for a deleted object
             * @enum {boolean}
             */
            deleted: true;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "webhook_endpoint";
        };
        /** destination_details_unimplemented */
        destination_details_unimplemented: Record<string, never>;
        /**
         * Discount
         * @description A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
         *     It contains information about when the discount began, when it will end, and what it is applied to.
         *
         *     Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
         */
        discount: {
            /** @description The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
            checkout_session?: string | null;
            coupon: components["schemas"]["coupon"];
            /** @description The ID of the customer associated with this discount. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /**
             * Format: unix-time
             * @description If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
             */
            end?: number | null;
            /** @description The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
            id: string;
            /** @description The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
            invoice?: string | null;
            /** @description The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
            invoice_item?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "discount";
            /** @description The promotion code applied to create this discount. */
            promotion_code?: (string | components["schemas"]["promotion_code"]) | null;
            /**
             * Format: unix-time
             * @description Date that the coupon was applied.
             */
            start: number;
            /** @description The subscription that this coupon is applied to, if it is applied to a particular subscription. */
            subscription?: string | null;
            /** @description The subscription item that this coupon is applied to, if it is applied to a particular subscription item. */
            subscription_item?: string | null;
        };
        /** DiscountsResourceDiscountAmount */
        discounts_resource_discount_amount: {
            /** @description The amount, in cents (or local equivalent), of the discount. */
            amount: number;
            /** @description The discount that was applied to get this discount amount. */
            discount: string | components["schemas"]["discount"] | components["schemas"]["deleted_discount"];
        };
        /** DiscountsResourceStackableDiscount */
        discounts_resource_stackable_discount: {
            /** @description ID of the coupon to create a new discount for. */
            coupon?: (string | components["schemas"]["coupon"]) | null;
            /** @description ID of an existing discount on the object (or one of its ancestors) to reuse. */
            discount?: (string | components["schemas"]["discount"]) | null;
            /** @description ID of the promotion code to create a new discount for. */
            promotion_code?: (string | components["schemas"]["promotion_code"]) | null;
        };
        /**
         * Dispute
         * @description A dispute occurs when a customer questions your charge with their card issuer.
         *     When this happens, you have the opportunity to respond to the dispute with
         *     evidence that shows that the charge is legitimate.
         *
         *     Related guide: [Disputes and fraud](https://stripe.com/docs/disputes)
         */
        dispute: {
            /** @description Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed). */
            amount: number;
            /** @description List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
            balance_transactions: components["schemas"]["balance_transaction"][];
            /** @description ID of the charge that's disputed. */
            charge: string | components["schemas"]["charge"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description List of eligibility types that are included in `enhanced_evidence`. */
            enhanced_eligibility_types: "visa_compelling_evidence_3"[];
            evidence: components["schemas"]["dispute_evidence"];
            evidence_details: components["schemas"]["dispute_evidence_details"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute. */
            is_charge_refundable: boolean;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "dispute";
            /** @description ID of the PaymentIntent that's disputed. */
            payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
            payment_method_details?: components["schemas"]["dispute_payment_method_details"];
            /** @description Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
            reason: string;
            /**
             * @description Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`.
             * @enum {string}
             */
            status: "lost" | "needs_response" | "under_review" | "warning_closed" | "warning_needs_response" | "warning_under_review" | "won";
        };
        /** DisputeEnhancedEligibility */
        dispute_enhanced_eligibility: {
            visa_compelling_evidence_3?: components["schemas"]["dispute_enhanced_eligibility_visa_compelling_evidence3"];
        };
        /** DisputeEnhancedEligibilityVisaCompellingEvidence3 */
        dispute_enhanced_eligibility_visa_compelling_evidence3: {
            /** @description List of actions required to qualify dispute for Visa Compelling Evidence 3.0 evidence submission. */
            required_actions: ("missing_customer_identifiers" | "missing_disputed_transaction_description" | "missing_merchandise_or_services" | "missing_prior_undisputed_transaction_description" | "missing_prior_undisputed_transactions")[];
            /**
             * @description Visa Compelling Evidence 3.0 eligibility status.
             * @enum {string}
             */
            status: "not_qualified" | "qualified" | "requires_action";
        };
        /** DisputeEnhancedEvidence */
        dispute_enhanced_evidence: {
            visa_compelling_evidence_3?: components["schemas"]["dispute_enhanced_evidence_visa_compelling_evidence3"];
        };
        /** DisputeEnhancedEvidenceVisaCompellingEvidence3 */
        dispute_enhanced_evidence_visa_compelling_evidence3: {
            /** @description Disputed transaction details for Visa Compelling Evidence 3.0 evidence submission. */
            disputed_transaction?: components["schemas"]["dispute_visa_compelling_evidence3_disputed_transaction"] | null;
            /** @description List of exactly two prior undisputed transaction objects for Visa Compelling Evidence 3.0 evidence submission. */
            prior_undisputed_transactions: components["schemas"]["dispute_visa_compelling_evidence3_prior_undisputed_transaction"][];
        };
        /** DisputeEvidence */
        dispute_evidence: {
            /** @description Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. */
            access_activity_log?: string | null;
            /** @description The billing address provided by the customer. */
            billing_address?: string | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer. */
            cancellation_policy?: (string | components["schemas"]["file"]) | null;
            /** @description An explanation of how and when the customer was shown your refund policy prior to purchase. */
            cancellation_policy_disclosure?: string | null;
            /** @description A justification for why the customer's subscription was not canceled. */
            cancellation_rebuttal?: string | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service. */
            customer_communication?: (string | components["schemas"]["file"]) | null;
            /** @description The email address of the customer. */
            customer_email_address?: string | null;
            /** @description The name of the customer. */
            customer_name?: string | null;
            /** @description The IP address that the customer used when making the purchase. */
            customer_purchase_ip?: string | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature. */
            customer_signature?: (string | components["schemas"]["file"]) | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate. */
            duplicate_charge_documentation?: (string | components["schemas"]["file"]) | null;
            /** @description An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. */
            duplicate_charge_explanation?: string | null;
            /** @description The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. */
            duplicate_charge_id?: string | null;
            enhanced_evidence: components["schemas"]["dispute_enhanced_evidence"];
            /** @description A description of the product or service that was sold. */
            product_description?: string | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge. */
            receipt?: (string | components["schemas"]["file"]) | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer. */
            refund_policy?: (string | components["schemas"]["file"]) | null;
            /** @description Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
            refund_policy_disclosure?: string | null;
            /** @description A justification for why the customer is not entitled to a refund. */
            refund_refusal_explanation?: string | null;
            /** @description The date on which the customer received or began receiving the purchased service, in a clear human-readable format. */
            service_date?: string | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement. */
            service_documentation?: (string | components["schemas"]["file"]) | null;
            /** @description The address to which a physical product was shipped. You should try to include as complete address information as possible. */
            shipping_address?: string | null;
            /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. */
            shipping_carrier?: string | null;
            /** @description The date on which a physical product began its route to the shipping address, in a clear human-readable format. */
            shipping_date?: string | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible. */
            shipping_documentation?: (string | components["schemas"]["file"]) | null;
            /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
            shipping_tracking_number?: string | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements. */
            uncategorized_file?: (string | components["schemas"]["file"]) | null;
            /** @description Any additional evidence or statements. */
            uncategorized_text?: string | null;
        };
        /** DisputeEvidenceDetails */
        dispute_evidence_details: {
            /**
             * Format: unix-time
             * @description Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer's bank or credit card company doesn't allow a response for this particular dispute.
             */
            due_by?: number | null;
            enhanced_eligibility: components["schemas"]["dispute_enhanced_eligibility"];
            /** @description Whether evidence has been staged for this dispute. */
            has_evidence: boolean;
            /** @description Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. */
            past_due: boolean;
            /** @description The number of times evidence has been submitted. Typically, you may only submit evidence once. */
            submission_count: number;
        };
        /** DisputePaymentMethodDetails */
        dispute_payment_method_details: {
            amazon_pay?: components["schemas"]["dispute_payment_method_details_amazon_pay"];
            card?: components["schemas"]["dispute_payment_method_details_card"];
            klarna?: components["schemas"]["dispute_payment_method_details_klarna"];
            paypal?: components["schemas"]["dispute_payment_method_details_paypal"];
            /**
             * @description Payment method type.
             * @enum {string}
             */
            type: "amazon_pay" | "card" | "klarna" | "paypal";
        };
        /** DisputePaymentMethodDetailsAmazonPay */
        dispute_payment_method_details_amazon_pay: {
            /**
             * @description The AmazonPay dispute type, chargeback or claim
             * @enum {string|null}
             */
            dispute_type?: "chargeback" | "claim" | null;
        };
        /** DisputePaymentMethodDetailsCard */
        dispute_payment_method_details_card: {
            /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
            brand: string;
            /**
             * @description The type of dispute opened. Different case types may have varying fees and financial impact.
             * @enum {string}
             */
            case_type: "chargeback" | "inquiry";
            /** @description The card network's specific dispute reason code, which maps to one of Stripe's primary dispute categories to simplify response guidance. The [Network code map](https://stripe.com/docs/disputes/categories#network-code-map) lists all available dispute reason codes by network. */
            network_reason_code?: string | null;
        };
        /** DisputePaymentMethodDetailsKlarna */
        dispute_payment_method_details_klarna: {
            /** @description The reason for the dispute as defined by Klarna */
            reason_code?: string | null;
        };
        /** DisputePaymentMethodDetailsPaypal */
        dispute_payment_method_details_paypal: {
            /** @description The ID of the dispute in PayPal. */
            case_id?: string | null;
            /** @description The reason for the dispute as defined by PayPal */
            reason_code?: string | null;
        };
        /** DisputeTransactionShippingAddress */
        dispute_transaction_shipping_address: {
            /** @description City, district, suburb, town, or village. */
            city?: string | null;
            /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string | null;
            /** @description Address line 1 (e.g., street, PO Box, or company name). */
            line1?: string | null;
            /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
            line2?: string | null;
            /** @description ZIP or postal code. */
            postal_code?: string | null;
            /** @description State, county, province, or region. */
            state?: string | null;
        };
        /** DisputeVisaCompellingEvidence3DisputedTransaction */
        dispute_visa_compelling_evidence3_disputed_transaction: {
            /** @description User Account ID used to log into business platform. Must be recognizable by the user. */
            customer_account_id?: string | null;
            /** @description Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters. */
            customer_device_fingerprint?: string | null;
            /** @description Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters. */
            customer_device_id?: string | null;
            /** @description The email address of the customer. */
            customer_email_address?: string | null;
            /** @description The IP address that the customer used when making the purchase. */
            customer_purchase_ip?: string | null;
            /**
             * @description Categorization of disputed payment.
             * @enum {string|null}
             */
            merchandise_or_services?: "merchandise" | "services" | null;
            /** @description A description of the product or service that was sold. */
            product_description?: string | null;
            /** @description The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission. */
            shipping_address?: components["schemas"]["dispute_transaction_shipping_address"] | null;
        };
        /** DisputeVisaCompellingEvidence3PriorUndisputedTransaction */
        dispute_visa_compelling_evidence3_prior_undisputed_transaction: {
            /** @description Stripe charge ID for the Visa Compelling Evidence 3.0 eligible prior charge. */
            charge: string;
            /** @description User Account ID used to log into business platform. Must be recognizable by the user. */
            customer_account_id?: string | null;
            /** @description Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters. */
            customer_device_fingerprint?: string | null;
            /** @description Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters. */
            customer_device_id?: string | null;
            /** @description The email address of the customer. */
            customer_email_address?: string | null;
            /** @description The IP address that the customer used when making the purchase. */
            customer_purchase_ip?: string | null;
            /** @description A description of the product or service that was sold. */
            product_description?: string | null;
            /** @description The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission. */
            shipping_address?: components["schemas"]["dispute_transaction_shipping_address"] | null;
        };
        /** EmailSent */
        email_sent: {
            /**
             * Format: unix-time
             * @description The timestamp when the email was sent.
             */
            email_sent_at: number;
            /** @description The recipient's email address. */
            email_sent_to: string;
        };
        /**
         * ActiveEntitlement
         * @description An active entitlement describes access to a feature for a customer.
         */
        "entitlements.active_entitlement": {
            /** @description The [Feature](https://stripe.com/docs/api/entitlements/feature) that the customer is entitled to. */
            feature: string | components["schemas"]["entitlements.feature"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description A unique key you provide as your own system identifier. This may be up to 80 characters. */
            lookup_key: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "entitlements.active_entitlement";
        };
        /**
         * Feature
         * @description A feature represents a monetizable ability or functionality in your system.
         *     Features can be assigned to products, and when those products are purchased, Stripe will create an entitlement to the feature for the purchasing customer.
         */
        "entitlements.feature": {
            /** @description Inactive features cannot be attached to new products and will not be returned from the features list endpoint. */
            active: boolean;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description A unique key you provide as your own system identifier. This may be up to 80 characters. */
            lookup_key: string;
            /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description The feature's name, for your own purpose, not meant to be displayable to the customer. */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "entitlements.feature";
        };
        /** EphemeralKey */
        ephemeral_key: {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /**
             * Format: unix-time
             * @description Time at which the key will expire. Measured in seconds since the Unix epoch.
             */
            expires: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "ephemeral_key";
            /** @description The key's secret. You can use this value to make authorized requests to the Stripe API. */
            secret?: string;
        };
        /** @description An error response from the Stripe API */
        error: {
            error: components["schemas"]["api_errors"];
        };
        /**
         * NotificationEvent
         * @description Events are our way of letting you know when something interesting happens in
         *     your account. When an interesting event occurs, we create a new `Event`
         *     object. For example, when a charge succeeds, we create a `charge.succeeded`
         *     event, and when an invoice payment attempt fails, we create an
         *     `invoice.payment_failed` event. Certain API requests might create multiple
         *     events. For example, if you create a new subscription for a
         *     customer, you receive both a `customer.subscription.created` event and a
         *     `charge.succeeded` event.
         *
         *     Events occur when the state of another API resource changes. The event's data
         *     field embeds the resource's state at the time of the change. For
         *     example, a `charge.succeeded` event contains a charge, and an
         *     `invoice.payment_failed` event contains an invoice.
         *
         *     As with other API resources, you can use endpoints to retrieve an
         *     [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
         *     from the API. We also have a separate
         *     [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
         *     `Event` objects directly to an endpoint on your server. You can manage
         *     webhooks in your
         *     [account settings](https://dashboard.stripe.com/account/webhooks). Learn how
         *     to [listen for events](https://docs.stripe.com/webhooks)
         *     so that your integration can automatically trigger reactions.
         *
         *     When using [Connect](https://docs.stripe.com/connect), you can also receive event notifications
         *     that occur in connected accounts. For these events, there's an
         *     additional `account` attribute in the received `Event` object.
         *
         *     We only guarantee access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event)
         *     for 30 days.
         */
        event: {
            /** @description The connected account that originates the event. */
            account?: string;
            /** @description The Stripe API version used to render `data`. This property is populated only for events on or after October 31, 2014. */
            api_version?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            data: components["schemas"]["notification_event_data"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "event";
            /** @description Number of webhooks that haven't been successfully delivered (for example, to return a 20x response) to the URLs you specify. */
            pending_webhooks: number;
            /** @description Information on the API request that triggers the event. */
            request?: components["schemas"]["notification_event_request"] | null;
            /** @description Description of the event (for example, `invoice.created` or `charge.refunded`). */
            type: string;
        };
        /**
         * ExchangeRate
         * @description `ExchangeRate` objects allow you to determine the rates that Stripe is currently
         *     using to convert from one currency to another. Since this number is variable
         *     throughout the day, there are various reasons why you might want to know the current
         *     rate (for example, to dynamically price an item for a user with a default
         *     payment in a foreign currency).
         *
         *     Please refer to our [Exchange Rates API](https://stripe.com/docs/fx-rates) guide for more details.
         *
         *     *[Note: this integration path is supported but no longer recommended]* Additionally,
         *     you can guarantee that a charge is made with an exchange rate that you expect is
         *     current. To do so, you must pass in the exchange_rate to charges endpoints. If the
         *     value is no longer up to date, the charge won't go through. Please refer to our
         *     [Using with charges](https://stripe.com/docs/exchange-rates) guide for more details.
         *
         *     -----
         *
         *     &nbsp;
         *
         *     *This Exchange Rates API is a Beta Service and is subject to Stripe's terms of service. You may use the API solely for the purpose of transacting on Stripe. For example, the API may be queried in order to:*
         *
         *     - *localize prices for processing payments on Stripe*
         *     - *reconcile Stripe transactions*
         *     - *determine how much money to send to a connected account*
         *     - *determine app fees to charge a connected account*
         *
         *     *Using this Exchange Rates API beta for any purpose other than to transact on Stripe is strictly prohibited and constitutes a violation of Stripe's terms of service.*
         */
        exchange_rate: {
            /** @description Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "exchange_rate";
            /** @description Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency. */
            rates: {
                [key: string]: number;
            };
        };
        /** Polymorphic */
        external_account: components["schemas"]["bank_account"] | components["schemas"]["card"];
        /** ExternalAccountRequirements */
        external_account_requirements: {
            /** @description Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
            currently_due?: string[] | null;
            /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
            errors?: components["schemas"]["account_requirements_error"][] | null;
            /** @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account. */
            past_due?: string[] | null;
            /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
            pending_verification?: string[] | null;
        };
        /** Fee */
        fee: {
            /** @description Amount of the fee, in cents. */
            amount: number;
            /** @description ID of the Connect application that earned the fee. */
            application?: string | null;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Type of the fee, one of: `application_fee`, `payment_method_passthrough_fee`, `stripe_fee` or `tax`. */
            type: string;
        };
        /**
         * FeeRefund
         * @description `Application Fee Refund` objects allow you to refund an application fee that
         *     has previously been created but not yet refunded. Funds will be refunded to
         *     the Stripe account from which the fee was originally collected.
         *
         *     Related guide: [Refunding application fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee)
         */
        fee_refund: {
            /** @description Amount, in cents (or local equivalent). */
            amount: number;
            /** @description Balance transaction that describes the impact on your account balance. */
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description ID of the application fee that was refunded. */
            fee: string | components["schemas"]["application_fee"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "fee_refund";
        };
        /**
         * File
         * @description This object represents files hosted on Stripe's servers. You can upload
         *     files with the [create file](https://stripe.com/docs/api#create_file) request
         *     (for example, when uploading dispute evidence). Stripe also
         *     creates files independently (for example, the results of a [Sigma scheduled
         *     query](#scheduled_queries)).
         *
         *     Related guide: [File upload guide](https://stripe.com/docs/file-upload)
         */
        file: {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /**
             * Format: unix-time
             * @description The file expires and isn't available at this time in epoch seconds.
             */
            expires_at?: number | null;
            /** @description The suitable name for saving the file to a filesystem. */
            filename?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * FileResourceFileLinkList
             * @description A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
             */
            links?: {
                /** @description Details about each object. */
                data: components["schemas"]["file_link"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "file";
            /**
             * @description The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
             * @enum {string}
             */
            purpose: "account_requirement" | "additional_verification" | "business_icon" | "business_logo" | "customer_signature" | "dispute_evidence" | "document_provider_identity_document" | "finance_report_run" | "financial_account_statement" | "identity_document" | "identity_document_downloadable" | "issuing_regulatory_reporting" | "pci_document" | "selfie" | "sigma_scheduled_query" | "tax_document_user_upload" | "terminal_reader_splashscreen";
            /** @description The size of the file object in bytes. */
            size: number;
            /** @description A suitable title for the document. */
            title?: string | null;
            /** @description The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`). */
            type?: string | null;
            /** @description Use your live secret API key to download the file from this URL. */
            url?: string | null;
        };
        /**
         * FileLink
         * @description To share the contents of a `File` object with non-Stripe users, you can
         *     create a `FileLink`. `FileLink`s contain a URL that you can use to
         *     retrieve the contents of the file without authentication.
         */
        file_link: {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Returns if the link is already expired. */
            expired: boolean;
            /**
             * Format: unix-time
             * @description Time that the link expires.
             */
            expires_at?: number | null;
            /** @description The file object this link points to. */
            file: string | components["schemas"]["file"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "file_link";
            /** @description The publicly accessible URL to download the file. */
            url?: string | null;
        };
        /**
         * BankConnectionsResourceLinkedAccount
         * @description A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
         */
        "financial_connections.account": {
            /** @description The account holder that this account belongs to. */
            account_holder?: components["schemas"]["bank_connections_resource_accountholder"] | null;
            /** @description The most recent information about the account's balance. */
            balance?: components["schemas"]["bank_connections_resource_balance"] | null;
            /** @description The state of the most recent attempt to refresh the account balance. */
            balance_refresh?: components["schemas"]["bank_connections_resource_balance_refresh"] | null;
            /**
             * @description The type of the account. Account category is further divided in `subcategory`.
             * @enum {string}
             */
            category: "cash" | "credit" | "investment" | "other";
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description A human-readable name that has been assigned to this account, either by the account holder or by the institution. */
            display_name?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The name of the institution that holds this account. */
            institution_name: string;
            /** @description The last 4 digits of the account number. If present, this will be 4 numeric characters. */
            last4?: string | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "financial_connections.account";
            /** @description The most recent information about the account's owners. */
            ownership?: (string | components["schemas"]["financial_connections.account_ownership"]) | null;
            /** @description The state of the most recent attempt to refresh the account owners. */
            ownership_refresh?: components["schemas"]["bank_connections_resource_ownership_refresh"] | null;
            /** @description The list of permissions granted by this account. */
            permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[] | null;
            /**
             * @description The status of the link to the account.
             * @enum {string}
             */
            status: "active" | "disconnected" | "inactive";
            /**
             * @description If `category` is `cash`, one of:
             *
             *      - `checking`
             *      - `savings`
             *      - `other`
             *
             *     If `category` is `credit`, one of:
             *
             *      - `mortgage`
             *      - `line_of_credit`
             *      - `credit_card`
             *      - `other`
             *
             *     If `category` is `investment` or `other`, this will be `other`.
             * @enum {string}
             */
            subcategory: "checking" | "credit_card" | "line_of_credit" | "mortgage" | "other" | "savings";
            /** @description The list of data refresh subscriptions requested on this account. */
            subscriptions?: "transactions"[] | null;
            /** @description The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account. */
            supported_payment_method_types: ("link" | "us_bank_account")[];
            /** @description The state of the most recent attempt to refresh the account transactions. */
            transaction_refresh?: components["schemas"]["bank_connections_resource_transaction_refresh"] | null;
        };
        /**
         * BankConnectionsResourceOwner
         * @description Describes an owner of an account.
         */
        "financial_connections.account_owner": {
            /** @description The email address of the owner. */
            email?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The full name of the owner. */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "financial_connections.account_owner";
            /** @description The ownership object that this owner belongs to. */
            ownership: string;
            /** @description The raw phone number of the owner. */
            phone?: string | null;
            /** @description The raw physical address of the owner. */
            raw_address?: string | null;
            /**
             * Format: unix-time
             * @description The timestamp of the refresh that updated this owner.
             */
            refreshed_at?: number | null;
        };
        /**
         * BankConnectionsResourceOwnership
         * @description Describes a snapshot of the owners of an account at a particular point in time.
         */
        "financial_connections.account_ownership": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "financial_connections.account_ownership";
            /**
             * BankConnectionsResourceOwnerList
             * @description A paginated list of owners for this account.
             */
            owners: {
                /** @description Details about each object. */
                data: components["schemas"]["financial_connections.account_owner"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
        };
        /**
         * BankConnectionsResourceLinkAccountSession
         * @description A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.
         */
        "financial_connections.session": {
            /** @description The account holder for whom accounts are collected in this session. */
            account_holder?: components["schemas"]["bank_connections_resource_accountholder"] | null;
            /**
             * BankConnectionsResourceLinkedAccountList
             * @description The accounts that were collected as part of this Session.
             */
            accounts: {
                /** @description Details about each object. */
                data: components["schemas"]["financial_connections.account"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /** @description A value that will be passed to the client to launch the authentication flow. */
            client_secret: string;
            filters?: components["schemas"]["bank_connections_resource_link_account_session_filters"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "financial_connections.session";
            /** @description Permissions requested for accounts collected during this session. */
            permissions: ("balances" | "ownership" | "payment_method" | "transactions")[];
            /** @description Data features requested to be retrieved upon account creation. */
            prefetch?: ("balances" | "ownership" | "transactions")[] | null;
            /** @description For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app. */
            return_url?: string;
        };
        /**
         * BankConnectionsResourceTransaction
         * @description A Transaction represents a real transaction that affects a Financial Connections Account balance.
         */
        "financial_connections.transaction": {
            /** @description The ID of the Financial Connections Account this transaction belongs to. */
            account: string;
            /** @description The amount of this transaction, in cents (or local equivalent). */
            amount: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description The description of this transaction. */
            description: string;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "financial_connections.transaction";
            /**
             * @description The status of the transaction.
             * @enum {string}
             */
            status: "pending" | "posted" | "void";
            status_transitions: components["schemas"]["bank_connections_resource_transaction_resource_status_transitions"];
            /**
             * Format: unix-time
             * @description Time at which the transaction was transacted. Measured in seconds since the Unix epoch.
             */
            transacted_at: number;
            /** @description The token of the transaction refresh that last updated or created this transaction. */
            transaction_refresh: string;
            /**
             * Format: unix-time
             * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
             */
            updated: number;
        };
        /** FinancialReportingFinanceReportRunRunParameters */
        financial_reporting_finance_report_run_run_parameters: {
            /** @description The set of output columns requested for inclusion in the report run. */
            columns?: string[];
            /** @description Connected account ID by which to filter the report run. */
            connected_account?: string;
            /** @description Currency of objects to be included in the report run. */
            currency?: string;
            /**
             * Format: unix-time
             * @description Ending timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after the user specified `interval_start` and 1 second before this report's last `data_available_end` value.
             */
            interval_end?: number;
            /**
             * Format: unix-time
             * @description Starting timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after this report's `data_available_start` and 1 second before the user specified `interval_end` value.
             */
            interval_start?: number;
            /** @description Payout ID by which to filter the report run. */
            payout?: string;
            /** @description Category of balance transactions to be included in the report run. */
            reporting_category?: string;
            /** @description Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`. */
            timezone?: string;
        };
        /**
         * ForwardedRequestContext
         * @description Metadata about the forwarded request.
         */
        forwarded_request_context: {
            /** @description The time it took in milliseconds for the destination endpoint to respond. */
            destination_duration: number;
            /** @description The IP address of the destination. */
            destination_ip_address: string;
        };
        /**
         * ForwardedRequestDetails
         * @description Details about the request forwarded to the destination endpoint.
         */
        forwarded_request_details: {
            /** @description The body payload to send to the destination endpoint. */
            body: string;
            /** @description The headers to include in the forwarded request. Can be omitted if no additional headers (excluding Stripe-generated ones such as the Content-Type header) should be included. */
            headers: components["schemas"]["forwarded_request_header"][];
            /**
             * @description The HTTP method used to call the destination endpoint.
             * @enum {string}
             */
            http_method: "POST";
        };
        /**
         * ForwardedRequestHeader
         * @description Header data.
         */
        forwarded_request_header: {
            /** @description The header name. */
            name: string;
            /** @description The header value. */
            value: string;
        };
        /**
         * ForwardedResponseDetails
         * @description Details about the response from the destination endpoint.
         */
        forwarded_response_details: {
            /** @description The response body from the destination endpoint to Stripe. */
            body: string;
            /** @description HTTP headers that the destination endpoint returned. */
            headers: components["schemas"]["forwarded_request_header"][];
            /** @description The HTTP status code that the destination endpoint returned. */
            status: number;
        };
        /**
         * ForwardingRequest
         * @description Instructs Stripe to make a request on your behalf using the destination URL. The destination URL
         *     is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials
         *     provided during onboarding, and injects card details from the payment_method into the request.
         *
         *     Stripe redacts all sensitive fields and headers, including authentication credentials and card numbers,
         *     before storing the request and response data in the forwarding Request object, which are subject to a
         *     30-day retention period.
         *
         *     You can provide a Stripe idempotency key to make sure that requests with the same key result in only one
         *     outbound request. The Stripe idempotency key provided should be unique and different from any idempotency
         *     keys provided on the underlying third-party request.
         *
         *     Forwarding Requests are synchronous requests that return a response or time out according to
         *     Stripe’s limits.
         *
         *     Related guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).
         */
        "forwarding.request": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "forwarding.request";
            /** @description The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed. */
            payment_method: string;
            /** @description The field kinds to be replaced in the forwarded request. */
            replacements: ("card_cvc" | "card_expiry" | "card_number" | "cardholder_name")[];
            /** @description Context about the request from Stripe's servers to the destination endpoint. */
            request_context?: components["schemas"]["forwarded_request_context"] | null;
            /** @description The request that was sent to the destination endpoint. We redact any sensitive fields. */
            request_details?: components["schemas"]["forwarded_request_details"] | null;
            /** @description The response that the destination endpoint returned to us. We redact any sensitive fields. */
            response_details?: components["schemas"]["forwarded_response_details"] | null;
            /** @description The destination URL for the forwarded request. Must be supported by the config. */
            url?: string | null;
        };
        /**
         * CustomerBalanceFundingInstructionsCustomerBalanceFundingInstructions
         * @description Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) that is
         *     automatically applied to future invoices and payments using the `customer_balance` payment method.
         *     Customers can fund this balance by initiating a bank transfer to any account in the
         *     `financial_addresses` field.
         *     Related guide: [Customer balance funding instructions](https://stripe.com/docs/payments/customer-balance/funding-instructions)
         */
        funding_instructions: {
            bank_transfer: components["schemas"]["funding_instructions_bank_transfer"];
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /**
             * @description The `funding_type` of the returned instructions
             * @enum {string}
             */
            funding_type: "bank_transfer";
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "funding_instructions";
        };
        /** FundingInstructionsBankTransfer */
        funding_instructions_bank_transfer: {
            /** @description The country of the bank account to fund */
            country: string;
            /** @description A list of financial addresses that can be used to fund a particular balance */
            financial_addresses: components["schemas"]["funding_instructions_bank_transfer_financial_address"][];
            /**
             * @description The bank_transfer type
             * @enum {string}
             */
            type: "eu_bank_transfer" | "jp_bank_transfer";
        };
        /**
         * FundingInstructionsBankTransferABARecord
         * @description ABA Records contain U.S. bank account details per the ABA format.
         */
        funding_instructions_bank_transfer_aba_record: {
            account_holder_address: components["schemas"]["address"];
            /** @description The account holder name */
            account_holder_name: string;
            /** @description The ABA account number */
            account_number: string;
            /** @description The account type */
            account_type: string;
            bank_address: components["schemas"]["address"];
            /** @description The bank name */
            bank_name: string;
            /** @description The ABA routing number */
            routing_number: string;
        };
        /**
         * FundingInstructionsBankTransferFinancialAddress
         * @description FinancialAddresses contain identifying information that resolves to a FinancialAccount.
         */
        funding_instructions_bank_transfer_financial_address: {
            aba?: components["schemas"]["funding_instructions_bank_transfer_aba_record"];
            iban?: components["schemas"]["funding_instructions_bank_transfer_iban_record"];
            sort_code?: components["schemas"]["funding_instructions_bank_transfer_sort_code_record"];
            spei?: components["schemas"]["funding_instructions_bank_transfer_spei_record"];
            /** @description The payment networks supported by this FinancialAddress */
            supported_networks?: ("ach" | "bacs" | "domestic_wire_us" | "fps" | "sepa" | "spei" | "swift" | "zengin")[];
            swift?: components["schemas"]["funding_instructions_bank_transfer_swift_record"];
            /**
             * @description The type of financial address
             * @enum {string}
             */
            type: "aba" | "iban" | "sort_code" | "spei" | "swift" | "zengin";
            zengin?: components["schemas"]["funding_instructions_bank_transfer_zengin_record"];
        };
        /**
         * FundingInstructionsBankTransferIbanRecord
         * @description Iban Records contain E.U. bank account details per the SEPA format.
         */
        funding_instructions_bank_transfer_iban_record: {
            /** @description The name of the person or business that owns the bank account */
            account_holder_name: string;
            /** @description The BIC/SWIFT code of the account. */
            bic: string;
            /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country: string;
            /** @description The IBAN of the account. */
            iban: string;
        };
        /**
         * FundingInstructionsBankTransferSortCodeRecord
         * @description Sort Code Records contain U.K. bank account details per the sort code format.
         */
        funding_instructions_bank_transfer_sort_code_record: {
            /** @description The name of the person or business that owns the bank account */
            account_holder_name: string;
            /** @description The account number */
            account_number: string;
            /** @description The six-digit sort code */
            sort_code: string;
        };
        /**
         * FundingInstructionsBankTransferSpeiRecord
         * @description SPEI Records contain Mexico bank account details per the SPEI format.
         */
        funding_instructions_bank_transfer_spei_record: {
            /** @description The three-digit bank code */
            bank_code: string;
            /** @description The short banking institution name */
            bank_name: string;
            /** @description The CLABE number */
            clabe: string;
        };
        /**
         * FundingInstructionsBankTransferSwiftRecord
         * @description SWIFT Records contain U.S. bank account details per the SWIFT format.
         */
        funding_instructions_bank_transfer_swift_record: {
            account_holder_address: components["schemas"]["address"];
            /** @description The account holder name */
            account_holder_name: string;
            /** @description The account number */
            account_number: string;
            /** @description The account type */
            account_type: string;
            bank_address: components["schemas"]["address"];
            /** @description The bank name */
            bank_name: string;
            /** @description The SWIFT code */
            swift_code: string;
        };
        /**
         * FundingInstructionsBankTransferZenginRecord
         * @description Zengin Records contain Japan bank account details per the Zengin format.
         */
        funding_instructions_bank_transfer_zengin_record: {
            /** @description The account holder name */
            account_holder_name?: string | null;
            /** @description The account number */
            account_number?: string | null;
            /** @description The bank account type. In Japan, this can only be `futsu` or `toza`. */
            account_type?: string | null;
            /** @description The bank code of the account */
            bank_code?: string | null;
            /** @description The bank name of the account */
            bank_name?: string | null;
            /** @description The branch code of the account */
            branch_code?: string | null;
            /** @description The branch name of the account */
            branch_name?: string | null;
        };
        /**
         * GelatoDataDocumentReportDateOfBirth
         * @description Point in Time
         */
        gelato_data_document_report_date_of_birth: {
            /** @description Numerical day between 1 and 31. */
            day?: number | null;
            /** @description Numerical month between 1 and 12. */
            month?: number | null;
            /** @description The four-digit year. */
            year?: number | null;
        };
        /**
         * GelatoDataDocumentReportExpirationDate
         * @description Point in Time
         */
        gelato_data_document_report_expiration_date: {
            /** @description Numerical day between 1 and 31. */
            day?: number | null;
            /** @description Numerical month between 1 and 12. */
            month?: number | null;
            /** @description The four-digit year. */
            year?: number | null;
        };
        /**
         * GelatoDataDocumentReportIssuedDate
         * @description Point in Time
         */
        gelato_data_document_report_issued_date: {
            /** @description Numerical day between 1 and 31. */
            day?: number | null;
            /** @description Numerical month between 1 and 12. */
            month?: number | null;
            /** @description The four-digit year. */
            year?: number | null;
        };
        /**
         * GelatoDataIdNumberReportDate
         * @description Point in Time
         */
        gelato_data_id_number_report_date: {
            /** @description Numerical day between 1 and 31. */
            day?: number | null;
            /** @description Numerical month between 1 and 12. */
            month?: number | null;
            /** @description The four-digit year. */
            year?: number | null;
        };
        /**
         * GelatoDataVerifiedOutputsDate
         * @description Point in Time
         */
        gelato_data_verified_outputs_date: {
            /** @description Numerical day between 1 and 31. */
            day?: number | null;
            /** @description Numerical month between 1 and 12. */
            month?: number | null;
            /** @description The four-digit year. */
            year?: number | null;
        };
        /**
         * GelatoDocumentReport
         * @description Result from a document check
         */
        gelato_document_report: {
            /** @description Address as it appears in the document. */
            address?: components["schemas"]["address"] | null;
            /** @description Date of birth as it appears in the document. */
            dob?: components["schemas"]["gelato_data_document_report_date_of_birth"] | null;
            /** @description Details on the verification error. Present when status is `unverified`. */
            error?: components["schemas"]["gelato_document_report_error"] | null;
            /** @description Expiration date of the document. */
            expiration_date?: components["schemas"]["gelato_data_document_report_expiration_date"] | null;
            /** @description Array of [File](https://stripe.com/docs/api/files) ids containing images for this document. */
            files?: string[] | null;
            /** @description First name as it appears in the document. */
            first_name?: string | null;
            /** @description Issued date of the document. */
            issued_date?: components["schemas"]["gelato_data_document_report_issued_date"] | null;
            /** @description Issuing country of the document. */
            issuing_country?: string | null;
            /** @description Last name as it appears in the document. */
            last_name?: string | null;
            /** @description Document ID number. */
            number?: string | null;
            /**
             * @description Status of this `document` check.
             * @enum {string}
             */
            status: "unverified" | "verified";
            /**
             * @description Type of the document.
             * @enum {string|null}
             */
            type?: "driving_license" | "id_card" | "passport" | null;
        };
        /** GelatoDocumentReportError */
        gelato_document_report_error: {
            /**
             * @description A short machine-readable string giving the reason for the verification failure.
             * @enum {string|null}
             */
            code?: "document_expired" | "document_type_not_supported" | "document_unverified_other" | null;
            /** @description A human-readable message giving the reason for the failure. These messages can be shown to your users. */
            reason?: string | null;
        };
        /**
         * GelatoEmailReport
         * @description Result from a email check
         */
        gelato_email_report: {
            /** @description Email to be verified. */
            email?: string | null;
            /** @description Details on the verification error. Present when status is `unverified`. */
            error?: components["schemas"]["gelato_email_report_error"] | null;
            /**
             * @description Status of this `email` check.
             * @enum {string}
             */
            status: "unverified" | "verified";
        };
        /** GelatoEmailReportError */
        gelato_email_report_error: {
            /**
             * @description A short machine-readable string giving the reason for the verification failure.
             * @enum {string|null}
             */
            code?: "email_unverified_other" | "email_verification_declined" | null;
            /** @description A human-readable message giving the reason for the failure. These messages can be shown to your users. */
            reason?: string | null;
        };
        /**
         * GelatoIdNumberReport
         * @description Result from an id_number check
         */
        gelato_id_number_report: {
            /** @description Date of birth. */
            dob?: components["schemas"]["gelato_data_id_number_report_date"] | null;
            /** @description Details on the verification error. Present when status is `unverified`. */
            error?: components["schemas"]["gelato_id_number_report_error"] | null;
            /** @description First name. */
            first_name?: string | null;
            /** @description ID number. When `id_number_type` is `us_ssn`, only the last 4 digits are present. */
            id_number?: string | null;
            /**
             * @description Type of ID number.
             * @enum {string|null}
             */
            id_number_type?: "br_cpf" | "sg_nric" | "us_ssn" | null;
            /** @description Last name. */
            last_name?: string | null;
            /**
             * @description Status of this `id_number` check.
             * @enum {string}
             */
            status: "unverified" | "verified";
        };
        /** GelatoIdNumberReportError */
        gelato_id_number_report_error: {
            /**
             * @description A short machine-readable string giving the reason for the verification failure.
             * @enum {string|null}
             */
            code?: "id_number_insufficient_document_data" | "id_number_mismatch" | "id_number_unverified_other" | null;
            /** @description A human-readable message giving the reason for the failure. These messages can be shown to your users. */
            reason?: string | null;
        };
        /**
         * GelatoPhoneReport
         * @description Result from a phone check
         */
        gelato_phone_report: {
            /** @description Details on the verification error. Present when status is `unverified`. */
            error?: components["schemas"]["gelato_phone_report_error"] | null;
            /** @description Phone to be verified. */
            phone?: string | null;
            /**
             * @description Status of this `phone` check.
             * @enum {string}
             */
            status: "unverified" | "verified";
        };
        /** GelatoPhoneReportError */
        gelato_phone_report_error: {
            /**
             * @description A short machine-readable string giving the reason for the verification failure.
             * @enum {string|null}
             */
            code?: "phone_unverified_other" | "phone_verification_declined" | null;
            /** @description A human-readable message giving the reason for the failure. These messages can be shown to your users. */
            reason?: string | null;
        };
        /** GelatoProvidedDetails */
        gelato_provided_details: {
            /** @description Email of user being verified */
            email?: string;
            /** @description Phone number of user being verified */
            phone?: string;
        };
        /** GelatoReportDocumentOptions */
        gelato_report_document_options: {
            /** @description Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code. */
            allowed_types?: ("driving_license" | "id_card" | "passport")[];
            /** @description Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth. */
            require_id_number?: boolean;
            /** @description Disable image uploads, identity document images have to be captured using the device’s camera. */
            require_live_capture?: boolean;
            /** @description Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie). */
            require_matching_selfie?: boolean;
        };
        /** GelatoReportIdNumberOptions */
        gelato_report_id_number_options: Record<string, never>;
        /**
         * GelatoSelfieReport
         * @description Result from a selfie check
         */
        gelato_selfie_report: {
            /** @description ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check. */
            document?: string | null;
            /** @description Details on the verification error. Present when status is `unverified`. */
            error?: components["schemas"]["gelato_selfie_report_error"] | null;
            /** @description ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check. */
            selfie?: string | null;
            /**
             * @description Status of this `selfie` check.
             * @enum {string}
             */
            status: "unverified" | "verified";
        };
        /** GelatoSelfieReportError */
        gelato_selfie_report_error: {
            /**
             * @description A short machine-readable string giving the reason for the verification failure.
             * @enum {string|null}
             */
            code?: "selfie_document_missing_photo" | "selfie_face_mismatch" | "selfie_manipulated" | "selfie_unverified_other" | null;
            /** @description A human-readable message giving the reason for the failure. These messages can be shown to your users. */
            reason?: string | null;
        };
        /** GelatoSessionDocumentOptions */
        gelato_session_document_options: {
            /** @description Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code. */
            allowed_types?: ("driving_license" | "id_card" | "passport")[];
            /** @description Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth. */
            require_id_number?: boolean;
            /** @description Disable image uploads, identity document images have to be captured using the device’s camera. */
            require_live_capture?: boolean;
            /** @description Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie). */
            require_matching_selfie?: boolean;
        };
        /** GelatoSessionEmailOptions */
        gelato_session_email_options: {
            /** @description Request one time password verification of `provided_details.email`. */
            require_verification?: boolean;
        };
        /** GelatoSessionIdNumberOptions */
        gelato_session_id_number_options: Record<string, never>;
        /**
         * GelatoSessionLastError
         * @description Shows last VerificationSession error
         */
        gelato_session_last_error: {
            /**
             * @description A short machine-readable string giving the reason for the verification or user-session failure.
             * @enum {string|null}
             */
            code?: "abandoned" | "consent_declined" | "country_not_supported" | "device_not_supported" | "document_expired" | "document_type_not_supported" | "document_unverified_other" | "email_unverified_other" | "email_verification_declined" | "id_number_insufficient_document_data" | "id_number_mismatch" | "id_number_unverified_other" | "phone_unverified_other" | "phone_verification_declined" | "selfie_document_missing_photo" | "selfie_face_mismatch" | "selfie_manipulated" | "selfie_unverified_other" | "under_supported_age" | null;
            /** @description A message that explains the reason for verification or user-session failure. */
            reason?: string | null;
        };
        /** GelatoSessionPhoneOptions */
        gelato_session_phone_options: {
            /** @description Request one time password verification of `provided_details.phone`. */
            require_verification?: boolean;
        };
        /** GelatoVerificationReportOptions */
        gelato_verification_report_options: {
            document?: components["schemas"]["gelato_report_document_options"];
            id_number?: components["schemas"]["gelato_report_id_number_options"];
        };
        /** GelatoVerificationSessionOptions */
        gelato_verification_session_options: {
            document?: components["schemas"]["gelato_session_document_options"];
            email?: components["schemas"]["gelato_session_email_options"];
            id_number?: components["schemas"]["gelato_session_id_number_options"];
            phone?: components["schemas"]["gelato_session_phone_options"];
        };
        /** GelatoVerifiedOutputs */
        gelato_verified_outputs: {
            /** @description The user's verified address. */
            address?: components["schemas"]["address"] | null;
            /** @description The user’s verified date of birth. */
            dob?: components["schemas"]["gelato_data_verified_outputs_date"] | null;
            /** @description The user's verified email address */
            email?: string | null;
            /** @description The user's verified first name. */
            first_name?: string | null;
            /** @description The user's verified id number. */
            id_number?: string | null;
            /**
             * @description The user's verified id number type.
             * @enum {string|null}
             */
            id_number_type?: "br_cpf" | "sg_nric" | "us_ssn" | null;
            /** @description The user's verified last name. */
            last_name?: string | null;
            /** @description The user's verified phone number */
            phone?: string | null;
        };
        /**
         * GelatoVerificationReport
         * @description A VerificationReport is the result of an attempt to collect and verify data from a user.
         *     The collection of verification checks performed is determined from the `type` and `options`
         *     parameters used. You can find the result of each verification check performed in the
         *     appropriate sub-resource: `document`, `id_number`, `selfie`.
         *
         *     Each VerificationReport contains a copy of any data collected by the user as well as
         *     reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
         *     API. To configure and create VerificationReports, use the
         *     [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
         *
         *     Related guide: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
         */
        "identity.verification_report": {
            /** @description A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems. */
            client_reference_id?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            document?: components["schemas"]["gelato_document_report"];
            email?: components["schemas"]["gelato_email_report"];
            /** @description Unique identifier for the object. */
            id: string;
            id_number?: components["schemas"]["gelato_id_number_report"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "identity.verification_report";
            options?: components["schemas"]["gelato_verification_report_options"];
            phone?: components["schemas"]["gelato_phone_report"];
            selfie?: components["schemas"]["gelato_selfie_report"];
            /**
             * @description Type of report.
             * @enum {string}
             */
            type: "document" | "id_number" | "verification_flow";
            /** @description The configuration token of a verification flow from the dashboard. */
            verification_flow?: string;
            /** @description ID of the VerificationSession that created this report. */
            verification_session?: string | null;
        };
        /**
         * GelatoVerificationSession
         * @description A VerificationSession guides you through the process of collecting and verifying the identities
         *     of your users. It contains details about the type of verification, such as what [verification
         *     check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
         *     each verification in your system.
         *
         *     A VerificationSession transitions through [multiple
         *     statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
         *     the verification flow. The VerificationSession contains the user's verified data after
         *     verification checks are complete.
         *
         *     Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
         */
        "identity.verification_session": {
            /** @description A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems. */
            client_reference_id?: string | null;
            /** @description The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more. */
            client_secret?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description If present, this property tells you the last error encountered when processing the verification. */
            last_error?: components["schemas"]["gelato_session_last_error"] | null;
            /** @description ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results) */
            last_verification_report?: (string | components["schemas"]["identity.verification_report"]) | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "identity.verification_session";
            /** @description A set of options for the session’s verification checks. */
            options?: components["schemas"]["gelato_verification_session_options"] | null;
            /** @description Details provided about the user being verified. These details may be shown to the user. */
            provided_details?: components["schemas"]["gelato_provided_details"] | null;
            /** @description Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null. */
            redaction?: components["schemas"]["verification_session_redaction"] | null;
            /** @description Token referencing a Customer resource. */
            related_customer?: string | null;
            /**
             * @description Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
             * @enum {string}
             */
            status: "canceled" | "processing" | "requires_input" | "verified";
            /**
             * @description The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
             * @enum {string}
             */
            type: "document" | "id_number" | "verification_flow";
            /** @description The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe. */
            url?: string | null;
            /** @description The configuration token of a verification flow from the dashboard. */
            verification_flow?: string;
            /** @description The user’s verified data. */
            verified_outputs?: components["schemas"]["gelato_verified_outputs"] | null;
        };
        /** InboundTransfers */
        inbound_transfers: {
            billing_details: components["schemas"]["treasury_shared_resource_billing_details"];
            /**
             * @description The type of the payment method used in the InboundTransfer.
             * @enum {string}
             */
            type: "us_bank_account";
            us_bank_account?: components["schemas"]["inbound_transfers_payment_method_details_us_bank_account"];
        };
        /** inbound_transfers_payment_method_details_us_bank_account */
        inbound_transfers_payment_method_details_us_bank_account: {
            /**
             * @description Account holder type: individual or company.
             * @enum {string|null}
             */
            account_holder_type?: "company" | "individual" | null;
            /**
             * @description Account type: checkings or savings. Defaults to checking if omitted.
             * @enum {string|null}
             */
            account_type?: "checking" | "savings" | null;
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description ID of the mandate used to make this payment. */
            mandate?: string | components["schemas"]["mandate"];
            /**
             * @description The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
             * @enum {string}
             */
            network: "ach";
            /** @description Routing number of the bank account. */
            routing_number?: string | null;
        };
        /** internal_card */
        internal_card: {
            /** @description Brand of the card used in the transaction */
            brand?: string | null;
            /** @description Two-letter ISO code representing the country of the card */
            country?: string | null;
            /** @description Two digit number representing the card's expiration month */
            exp_month?: number | null;
            /** @description Two digit number representing the card's expiration year */
            exp_year?: number | null;
            /** @description The last 4 digits of the card */
            last4?: string | null;
        };
        /**
         * Invoice
         * @description Invoices are statements of amounts owed by a customer, and are either
         *     generated one-off, or generated periodically from a subscription.
         *
         *     They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
         *     that may be caused by subscription upgrades/downgrades (if necessary).
         *
         *     If your invoice is configured to be billed through automatic charges,
         *     Stripe automatically finalizes your invoice and attempts payment. Note
         *     that finalizing the invoice,
         *     [when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does
         *     not happen immediately as the invoice is created. Stripe waits
         *     until one hour after the last webhook was successfully sent (or the last
         *     webhook timed out after failing). If you (and the platforms you may have
         *     connected to) have no webhooks configured, Stripe waits one hour after
         *     creation to finalize the invoice.
         *
         *     If your invoice is configured to be billed by sending an email, then based on your
         *     [email settings](https://dashboard.stripe.com/account/billing/automatic),
         *     Stripe will email the invoice to your customer and await payment. These
         *     emails can contain a link to a hosted page to pay the invoice.
         *
         *     Stripe applies any customer credit on the account before determining the
         *     amount due for the invoice (i.e., the amount that will be actually
         *     charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
         *     per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
         *     invoice is automatically marked paid, and we add the amount due to the
         *     customer's credit balance which is applied to the next invoice.
         *
         *     More details on the customer's credit balance are
         *     [here](https://stripe.com/docs/billing/customer/balance).
         *
         *     Related guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)
         */
        invoice: {
            /** @description The country of the business associated with this invoice, most often the business creating the invoice. */
            account_country?: string | null;
            /** @description The public name of the business associated with this invoice, most often the business creating the invoice. */
            account_name?: string | null;
            /** @description The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
            account_tax_ids?: (string | components["schemas"]["tax_id"] | components["schemas"]["deleted_tax_id"])[] | null;
            /** @description Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`. */
            amount_due: number;
            /** @description The amount, in cents (or local equivalent), that was paid. */
            amount_paid: number;
            /** @description The difference between amount_due and amount_paid, in cents (or local equivalent). */
            amount_remaining: number;
            /** @description This is the sum of all the shipping amounts. */
            amount_shipping: number;
            /** @description ID of the Connect Application that created the invoice. */
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            /** @description The fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid. */
            application_fee_amount?: number | null;
            /** @description Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. If a failure is returned with a non-retryable return code, the invoice can no longer be retried unless a new payment method is obtained. Retries will continue to be scheduled, and attempt_count will continue to increment, but retries will only be executed if a new payment method is obtained. */
            attempt_count: number;
            /** @description Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
            attempted: boolean;
            /** @description Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action. */
            auto_advance?: boolean;
            automatic_tax: components["schemas"]["automatic_tax"];
            /**
             * Format: unix-time
             * @description The time when this invoice is currently scheduled to be automatically finalized. The field will be `null` if the invoice is not scheduled to finalize in the future. If the invoice is not in the draft state, this field will always be `null` - see `finalized_at` for the time when an already-finalized invoice was finalized.
             */
            automatically_finalizes_at?: number | null;
            /**
             * @description Indicates the reason why the invoice was created.
             *
             *     * `manual`: Unrelated to a subscription, for example, created via the invoice editor.
             *     * `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.
             *     * `subscription_create`: A new subscription was created.
             *     * `subscription_cycle`: A subscription advanced into a new period.
             *     * `subscription_threshold`: A subscription reached a billing threshold.
             *     * `subscription_update`: A subscription was updated.
             *     * `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint.
             * @enum {string|null}
             */
            billing_reason?: "automatic_pending_invoice_item_invoice" | "manual" | "quote_accept" | "subscription" | "subscription_create" | "subscription_cycle" | "subscription_threshold" | "subscription_update" | "upcoming" | null;
            /** @description ID of the latest charge generated for this invoice, if any. */
            charge?: (string | components["schemas"]["charge"]) | null;
            /**
             * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
             * @enum {string}
             */
            collection_method: "charge_automatically" | "send_invoice";
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description Custom fields displayed on the invoice. */
            custom_fields?: components["schemas"]["invoice_setting_custom_field"][] | null;
            /** @description The ID of the customer who will be billed. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /** @description The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated. */
            customer_address?: components["schemas"]["address"] | null;
            /** @description The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
            customer_email?: string | null;
            /** @description The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
            customer_name?: string | null;
            /** @description The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
            customer_phone?: string | null;
            /** @description The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated. */
            customer_shipping?: components["schemas"]["shipping"] | null;
            /**
             * @description The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
             * @enum {string|null}
             */
            customer_tax_exempt?: "exempt" | "none" | "reverse" | null;
            /** @description The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
            customer_tax_ids?: components["schemas"]["invoices_resource_invoice_tax_id"][] | null;
            /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
            default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
            /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
            default_source?: (string | components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"]) | null;
            /** @description The tax rates applied to this invoice, if any. */
            default_tax_rates: components["schemas"]["tax_rate"][];
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
            description?: string | null;
            /** @description Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts. */
            discount?: components["schemas"]["discount"] | null;
            /** @description The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
            discounts: (string | components["schemas"]["discount"] | components["schemas"]["deleted_discount"])[];
            /**
             * Format: unix-time
             * @description The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
             */
            due_date?: number | null;
            /**
             * Format: unix-time
             * @description The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
             */
            effective_at?: number | null;
            /** @description Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null. */
            ending_balance?: number | null;
            /** @description Footer displayed on the invoice. */
            footer?: string | null;
            /** @description Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details. */
            from_invoice?: components["schemas"]["invoices_resource_from_invoice"] | null;
            /** @description The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
            hosted_invoice_url?: string | null;
            /** @description Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details. */
            id?: string;
            /** @description The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
            invoice_pdf?: string | null;
            issuer: components["schemas"]["connect_account_reference"];
            /** @description The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized. */
            last_finalization_error?: components["schemas"]["api_errors"] | null;
            /** @description The ID of the most recent non-draft revision of this invoice */
            latest_revision?: (string | components["schemas"]["invoice"]) | null;
            /**
             * InvoiceLinesList
             * @description The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.
             */
            lines: {
                /** @description Details about each object. */
                data: components["schemas"]["line_item"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * Format: unix-time
             * @description The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
             */
            next_payment_attempt?: number | null;
            /** @description A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
            number?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "invoice";
            /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            /** @description Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
            paid: boolean;
            /** @description Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe. */
            paid_out_of_band: boolean;
            /** @description The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent. */
            payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
            payment_settings: components["schemas"]["invoices_payment_settings"];
            /**
             * Format: unix-time
             * @description End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
             */
            period_end: number;
            /**
             * Format: unix-time
             * @description Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
             */
            period_start: number;
            /** @description Total amount of all post-payment credit notes issued for this invoice. */
            post_payment_credit_notes_amount: number;
            /** @description Total amount of all pre-payment credit notes issued for this invoice. */
            pre_payment_credit_notes_amount: number;
            /** @description The quote this invoice was generated from. */
            quote?: (string | components["schemas"]["quote"]) | null;
            /** @description This is the transaction number that appears on email receipts sent for this invoice. */
            receipt_number?: string | null;
            /** @description The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page. */
            rendering?: components["schemas"]["invoices_resource_invoice_rendering"] | null;
            /** @description The details of the cost of shipping, including the ShippingRate applied on the invoice. */
            shipping_cost?: components["schemas"]["invoices_resource_shipping_cost"] | null;
            /** @description Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer. */
            shipping_details?: components["schemas"]["shipping"] | null;
            /** @description Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice. */
            starting_balance: number;
            /** @description Extra information about an invoice for the customer's credit card statement. */
            statement_descriptor?: string | null;
            /**
             * @description The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
             * @enum {string|null}
             */
            status?: "draft" | "open" | "paid" | "uncollectible" | "void" | null;
            status_transitions: components["schemas"]["invoices_resource_status_transitions"];
            /** @description The subscription that this invoice was prepared for, if any. */
            subscription?: (string | components["schemas"]["subscription"]) | null;
            /** @description Details about the subscription that created this invoice. */
            subscription_details?: components["schemas"]["subscription_details_data"] | null;
            /** @description Only set for upcoming invoices that preview prorations. The time used to calculate prorations. */
            subscription_proration_date?: number;
            /** @description Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated */
            subtotal: number;
            /** @description The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated */
            subtotal_excluding_tax?: number | null;
            /** @description The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice. */
            tax?: number | null;
            /** @description ID of the test clock this invoice belongs to. */
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
            threshold_reason?: components["schemas"]["invoice_threshold_reason"];
            /** @description Total after discounts and taxes. */
            total: number;
            /** @description The aggregate amounts calculated per discount across all line items. */
            total_discount_amounts?: components["schemas"]["discounts_resource_discount_amount"][] | null;
            /** @description The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax. */
            total_excluding_tax?: number | null;
            /** @description Contains pretax credit amounts (ex: discount, credit grants, etc) that apply to this invoice. This is a combined list of total_pretax_credit_amounts across all invoice line items. */
            total_pretax_credit_amounts?: components["schemas"]["invoices_resource_pretax_credit_amount"][] | null;
            /** @description The aggregate amounts calculated per tax rate for all line items. */
            total_tax_amounts: components["schemas"]["invoice_tax_amount"][];
            /** @description The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice. */
            transfer_data?: components["schemas"]["invoice_transfer_data"] | null;
            /**
             * Format: unix-time
             * @description Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
             */
            webhooks_delivered_at?: number | null;
        };
        /** invoice_installments_card */
        invoice_installments_card: {
            /** @description Whether Installments are enabled for this Invoice. */
            enabled?: boolean | null;
        };
        /** InvoiceItemThresholdReason */
        invoice_item_threshold_reason: {
            /** @description The IDs of the line items that triggered the threshold invoice. */
            line_item_ids: string[];
            /** @description The quantity threshold boundary that applied to the given line item. */
            usage_gte: number;
        };
        /** InvoiceLineItemPeriod */
        invoice_line_item_period: {
            /**
             * Format: unix-time
             * @description The end of the period, which must be greater than or equal to the start. This value is inclusive.
             */
            end: number;
            /**
             * Format: unix-time
             * @description The start of the period. This value is inclusive.
             */
            start: number;
        };
        /** invoice_mandate_options_card */
        invoice_mandate_options_card: {
            /** @description Amount to be charged for future payments. */
            amount?: number | null;
            /**
             * @description One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
             * @enum {string|null}
             */
            amount_type?: "fixed" | "maximum" | null;
            /** @description A description of the mandate or subscription that is meant to be displayed to the customer. */
            description?: string | null;
        };
        /** invoice_payment_method_options_acss_debit */
        invoice_payment_method_options_acss_debit: {
            mandate_options?: components["schemas"]["invoice_payment_method_options_acss_debit_mandate_options"];
            /**
             * @description Bank account verification method.
             * @enum {string}
             */
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        /** invoice_payment_method_options_acss_debit_mandate_options */
        invoice_payment_method_options_acss_debit_mandate_options: {
            /**
             * @description Transaction type of the mandate.
             * @enum {string|null}
             */
            transaction_type?: "business" | "personal" | null;
        };
        /** invoice_payment_method_options_bancontact */
        invoice_payment_method_options_bancontact: {
            /**
             * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
             * @enum {string}
             */
            preferred_language: "de" | "en" | "fr" | "nl";
        };
        /** invoice_payment_method_options_card */
        invoice_payment_method_options_card: {
            installments?: components["schemas"]["invoice_installments_card"];
            /**
             * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
             * @enum {string|null}
             */
            request_three_d_secure?: "any" | "automatic" | "challenge" | null;
        };
        /** invoice_payment_method_options_customer_balance */
        invoice_payment_method_options_customer_balance: {
            bank_transfer?: components["schemas"]["invoice_payment_method_options_customer_balance_bank_transfer"];
            /**
             * @description The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
             * @enum {string|null}
             */
            funding_type?: "bank_transfer" | null;
        };
        /** invoice_payment_method_options_customer_balance_bank_transfer */
        invoice_payment_method_options_customer_balance_bank_transfer: {
            eu_bank_transfer?: components["schemas"]["invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer"];
            /** @description The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
            type?: string | null;
        };
        /** invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer */
        invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer: {
            /**
             * @description The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.
             * @enum {string}
             */
            country: "BE" | "DE" | "ES" | "FR" | "IE" | "NL";
        };
        /** invoice_payment_method_options_konbini */
        invoice_payment_method_options_konbini: Record<string, never>;
        /** invoice_payment_method_options_sepa_debit */
        invoice_payment_method_options_sepa_debit: Record<string, never>;
        /** invoice_payment_method_options_us_bank_account */
        invoice_payment_method_options_us_bank_account: {
            financial_connections?: components["schemas"]["invoice_payment_method_options_us_bank_account_linked_account_options"];
            /**
             * @description Bank account verification method.
             * @enum {string}
             */
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        /** invoice_payment_method_options_us_bank_account_linked_account_options */
        invoice_payment_method_options_us_bank_account_linked_account_options: {
            filters?: components["schemas"]["invoice_payment_method_options_us_bank_account_linked_account_options_filters"];
            /** @description The list of permissions to request. The `payment_method` permission must be included. */
            permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
            /** @description Data features requested to be retrieved upon account creation. */
            prefetch?: ("balances" | "ownership" | "transactions")[] | null;
        };
        /** invoice_payment_method_options_us_bank_account_linked_account_options_filters */
        invoice_payment_method_options_us_bank_account_linked_account_options_filters: {
            /** @description The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`. */
            account_subcategories?: ("checking" | "savings")[];
        };
        /** InvoiceRenderingPdf */
        invoice_rendering_pdf: {
            /**
             * @description Page size of invoice pdf. Options include a4, letter, and auto. If set to auto, page size will be switched to a4 or letter based on customer locale.
             * @enum {string|null}
             */
            page_size?: "a4" | "auto" | "letter" | null;
        };
        /**
         * InvoiceRenderingTemplate
         * @description Invoice Rendering Templates are used to configure how invoices are rendered on surfaces like the PDF. Invoice Rendering Templates
         *     can be created from within the Dashboard, and they can be used over the API when creating invoices.
         */
        invoice_rendering_template: {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description A brief description of the template, hidden from customers */
            nickname?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "invoice_rendering_template";
            /**
             * @description The status of the template, one of `active` or `archived`.
             * @enum {string}
             */
            status: "active" | "archived";
            /** @description Version of this template; version increases by one when an update on the template changes any field that controls invoice rendering */
            version: number;
        };
        /** InvoiceSettingCustomField */
        invoice_setting_custom_field: {
            /** @description The name of the custom field. */
            name: string;
            /** @description The value of the custom field. */
            value: string;
        };
        /** InvoiceSettingCustomerRenderingOptions */
        invoice_setting_customer_rendering_options: {
            /** @description How line-item prices and amounts will be displayed with respect to tax on invoice PDFs. */
            amount_tax_display?: string | null;
            /** @description ID of the invoice rendering template to be used for this customer's invoices. If set, the template will be used on all invoices for this customer unless a template is set directly on the invoice. */
            template?: string | null;
        };
        /** InvoiceSettingCustomerSetting */
        invoice_setting_customer_setting: {
            /** @description Default custom fields to be displayed on invoices for this customer. */
            custom_fields?: components["schemas"]["invoice_setting_custom_field"][] | null;
            /** @description ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices. */
            default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
            /** @description Default footer to be displayed on invoices for this customer. */
            footer?: string | null;
            /** @description Default options for invoice PDF rendering for this customer. */
            rendering_options?: components["schemas"]["invoice_setting_customer_rendering_options"] | null;
        };
        /** InvoiceSettingQuoteSetting */
        invoice_setting_quote_setting: {
            /** @description Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`. */
            days_until_due?: number | null;
            issuer: components["schemas"]["connect_account_reference"];
        };
        /** InvoiceSettingRenderingOptions */
        invoice_setting_rendering_options: {
            /** @description How line-item prices and amounts will be displayed with respect to tax on invoice PDFs. */
            amount_tax_display?: string | null;
        };
        /** InvoiceSettingSubscriptionSchedulePhaseSetting */
        invoice_setting_subscription_schedule_phase_setting: {
            /** @description The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule. */
            account_tax_ids?: (string | components["schemas"]["tax_id"] | components["schemas"]["deleted_tax_id"])[] | null;
            /** @description Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
            days_until_due?: number | null;
            /** @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
            issuer?: components["schemas"]["connect_account_reference"] | null;
        };
        /** InvoiceSettingSubscriptionScheduleSetting */
        invoice_setting_subscription_schedule_setting: {
            /** @description The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule. */
            account_tax_ids?: (string | components["schemas"]["tax_id"] | components["schemas"]["deleted_tax_id"])[] | null;
            /** @description Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
            days_until_due?: number | null;
            issuer: components["schemas"]["connect_account_reference"];
        };
        /** InvoiceTaxAmount */
        invoice_tax_amount: {
            /** @description The amount, in cents (or local equivalent), of the tax. */
            amount: number;
            /** @description Whether this tax amount is inclusive or exclusive. */
            inclusive: boolean;
            /** @description The tax rate that was applied to get this tax amount. */
            tax_rate: string | components["schemas"]["tax_rate"];
            /**
             * @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
             * @enum {string|null}
             */
            taxability_reason?: "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated" | null;
            /** @description The amount on which tax is calculated, in cents (or local equivalent). */
            taxable_amount?: number | null;
        };
        /** InvoiceThresholdReason */
        invoice_threshold_reason: {
            /** @description The total invoice amount threshold boundary if it triggered the threshold invoice. */
            amount_gte?: number | null;
            /** @description Indicates which line items triggered a threshold invoice. */
            item_reasons: components["schemas"]["invoice_item_threshold_reason"][];
        };
        /** InvoiceTransferData */
        invoice_transfer_data: {
            /** @description The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
            amount?: number | null;
            /** @description The account where funds from the payment will be transferred to upon payment success. */
            destination: string | components["schemas"]["account"];
        };
        /**
         * InvoiceItem
         * @description Invoice Items represent the component lines of an [invoice](https://stripe.com/docs/api/invoices). An invoice item is added to an
         *     invoice by creating or updating it with an `invoice` field, at which point it will be included as
         *     [an invoice line item](https://stripe.com/docs/api/invoices/line_item) within
         *     [invoice.lines](https://stripe.com/docs/api/invoices/object#invoice_object-lines).
         *
         *     Invoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined
         *     with a [subscription](https://stripe.com/docs/api/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge
         *     or credit the customer’s card only at the end of a regular billing cycle. This is useful for combining several charges
         *     (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.
         *
         *     Related guides: [Integrate with the Invoicing API](https://stripe.com/docs/invoicing/integration), [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
         */
        invoiceitem: {
            /** @description Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. */
            amount: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description The ID of the customer who will be billed when this invoice item is billed. */
            customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            date: number;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description If true, discounts will apply to this invoice item. Always false for prorations. */
            discountable: boolean;
            /** @description The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
            discounts?: (string | components["schemas"]["discount"])[] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The ID of the invoice this invoice item belongs to. */
            invoice?: (string | components["schemas"]["invoice"]) | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "invoiceitem";
            period: components["schemas"]["invoice_line_item_period"];
            /** @description The price of the invoice item. */
            price?: components["schemas"]["price"] | null;
            /** @description Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. */
            proration: boolean;
            /** @description Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. */
            quantity: number;
            /** @description The subscription that this invoice item has been created for, if any. */
            subscription?: (string | components["schemas"]["subscription"]) | null;
            /** @description The subscription item that this invoice item has been created for, if any. */
            subscription_item?: string;
            /** @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
            tax_rates?: components["schemas"]["tax_rate"][] | null;
            /** @description ID of the test clock this invoice item belongs to. */
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
            /** @description Unit amount (in the `currency` specified) of the invoice item. */
            unit_amount?: number | null;
            /**
             * Format: decimal
             * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
             */
            unit_amount_decimal?: string | null;
        };
        /** InvoicesPaymentMethodOptions */
        invoices_payment_method_options: {
            /** @description If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent. */
            acss_debit?: components["schemas"]["invoice_payment_method_options_acss_debit"] | null;
            /** @description If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent. */
            bancontact?: components["schemas"]["invoice_payment_method_options_bancontact"] | null;
            /** @description If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent. */
            card?: components["schemas"]["invoice_payment_method_options_card"] | null;
            /** @description If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice’s PaymentIntent. */
            customer_balance?: components["schemas"]["invoice_payment_method_options_customer_balance"] | null;
            /** @description If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice’s PaymentIntent. */
            konbini?: components["schemas"]["invoice_payment_method_options_konbini"] | null;
            /** @description If paying by `sepa_debit`, this sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoice’s PaymentIntent. */
            sepa_debit?: components["schemas"]["invoice_payment_method_options_sepa_debit"] | null;
            /** @description If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice’s PaymentIntent. */
            us_bank_account?: components["schemas"]["invoice_payment_method_options_us_bank_account"] | null;
        };
        /** InvoicesPaymentSettings */
        invoices_payment_settings: {
            /** @description ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set. */
            default_mandate?: string | null;
            /** @description Payment-method-specific configuration to provide to the invoice’s PaymentIntent. */
            payment_method_options?: components["schemas"]["invoices_payment_method_options"] | null;
            /** @description The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
            payment_method_types?: ("ach_credit_transfer" | "ach_debit" | "acss_debit" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "jp_credit_transfer" | "kakao_pay" | "konbini" | "kr_card" | "link" | "multibanco" | "naver_pay" | "p24" | "payco" | "paynow" | "paypal" | "promptpay" | "revolut_pay" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "swish" | "us_bank_account" | "wechat_pay")[] | null;
        };
        /** InvoicesResourceFromInvoice */
        invoices_resource_from_invoice: {
            /** @description The relation between this invoice and the cloned invoice */
            action: string;
            /** @description The invoice that was cloned. */
            invoice: string | components["schemas"]["invoice"];
        };
        /** InvoicesResourceInvoiceRendering */
        invoices_resource_invoice_rendering: {
            /** @description How line-item prices and amounts will be displayed with respect to tax on invoice PDFs. */
            amount_tax_display?: string | null;
            /** @description Invoice pdf rendering options */
            pdf?: components["schemas"]["invoice_rendering_pdf"] | null;
            /** @description ID of the rendering template that the invoice is formatted by. */
            template?: string | null;
            /** @description Version of the rendering template that the invoice is using. */
            template_version?: number | null;
        };
        /** InvoicesResourceInvoiceTaxID */
        invoices_resource_invoice_tax_id: {
            /**
             * @description The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, or `unknown`
             * @enum {string}
             */
            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "unknown" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
            /** @description The value of the tax ID. */
            value?: string | null;
        };
        /** InvoicesResourceLineItemsCreditedItems */
        invoices_resource_line_items_credited_items: {
            /** @description Invoice containing the credited invoice line items */
            invoice: string;
            /** @description Credited invoice line items */
            invoice_line_items: string[];
        };
        /** InvoicesResourceLineItemsProrationDetails */
        invoices_resource_line_items_proration_details: {
            /** @description For a credit proration `line_item`, the original debit line_items to which the credit proration applies. */
            credited_items?: components["schemas"]["invoices_resource_line_items_credited_items"] | null;
        };
        /** InvoicesResourcePretaxCreditAmount */
        invoices_resource_pretax_credit_amount: {
            /** @description The amount, in cents (or local equivalent), of the pretax credit amount. */
            amount: number;
            /** @description The credit balance transaction that was applied to get this pretax credit amount. */
            credit_balance_transaction?: (string | components["schemas"]["billing.credit_balance_transaction"]) | null;
            /** @description The discount that was applied to get this pretax credit amount. */
            discount?: string | components["schemas"]["discount"] | components["schemas"]["deleted_discount"];
            /**
             * @description Type of the pretax credit amount referenced.
             * @enum {string}
             */
            type: "credit_balance_transaction" | "discount";
        };
        /** InvoicesResourceShippingCost */
        invoices_resource_shipping_cost: {
            /** @description Total shipping cost before any taxes are applied. */
            amount_subtotal: number;
            /** @description Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0. */
            amount_tax: number;
            /** @description Total shipping cost after taxes are applied. */
            amount_total: number;
            /** @description The ID of the ShippingRate for this invoice. */
            shipping_rate?: (string | components["schemas"]["shipping_rate"]) | null;
            /** @description The taxes applied to the shipping rate. */
            taxes?: components["schemas"]["line_items_tax_amount"][];
        };
        /** InvoicesResourceStatusTransitions */
        invoices_resource_status_transitions: {
            /**
             * Format: unix-time
             * @description The time that the invoice draft was finalized.
             */
            finalized_at?: number | null;
            /**
             * Format: unix-time
             * @description The time that the invoice was marked uncollectible.
             */
            marked_uncollectible_at?: number | null;
            /**
             * Format: unix-time
             * @description The time that the invoice was paid.
             */
            paid_at?: number | null;
            /**
             * Format: unix-time
             * @description The time that the invoice was voided.
             */
            voided_at?: number | null;
        };
        /**
         * IssuingAuthorization
         * @description When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
         *     object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
         *     purchase to be completed successfully.
         *
         *     Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
         */
        "issuing.authorization": {
            /** @description The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different. */
            amount: number;
            /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount_details?: components["schemas"]["issuing_authorization_amount_details"] | null;
            /** @description Whether the authorization has been approved. */
            approved: boolean;
            /**
             * @description How the card details were provided.
             * @enum {string}
             */
            authorization_method: "chip" | "contactless" | "keyed_in" | "online" | "swipe";
            /** @description List of balance transactions associated with this authorization. */
            balance_transactions: components["schemas"]["balance_transaction"][];
            card: components["schemas"]["issuing.card"];
            /** @description The cardholder to whom this authorization belongs. */
            cardholder?: (string | components["schemas"]["issuing.cardholder"]) | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description Fleet-specific information for authorizations using Fleet cards. */
            fleet?: components["schemas"]["issuing_authorization_fleet_data"] | null;
            /** @description Fraud challenges sent to the cardholder, if this authorization was declined for fraud risk reasons. */
            fraud_challenges?: components["schemas"]["issuing_authorization_fraud_challenge"][] | null;
            /** @description Information about fuel that was purchased with this transaction. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. */
            fuel?: components["schemas"]["issuing_authorization_fuel_data"] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different. */
            merchant_amount: number;
            /** @description The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            merchant_currency: string;
            merchant_data: components["schemas"]["issuing_authorization_merchant_data"];
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description Details about the authorization, such as identifiers, set by the card network. */
            network_data?: components["schemas"]["issuing_authorization_network_data"] | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "issuing.authorization";
            /** @description The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook. */
            pending_request?: components["schemas"]["issuing_authorization_pending_request"] | null;
            /** @description History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined. */
            request_history: components["schemas"]["issuing_authorization_request"][];
            /**
             * @description The current status of the authorization in its lifecycle.
             * @enum {string}
             */
            status: "closed" | "pending" | "reversed";
            /** @description [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this authorization. If a network token was not used for this authorization, this field will be null. */
            token?: (string | components["schemas"]["issuing.token"]) | null;
            /** @description List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. */
            transactions: components["schemas"]["issuing.transaction"][];
            /** @description [Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts). */
            treasury?: components["schemas"]["issuing_authorization_treasury"] | null;
            verification_data: components["schemas"]["issuing_authorization_verification_data"];
            /** @description Whether the authorization bypassed fraud risk checks because the cardholder has previously completed a fraud challenge on a similar high-risk authorization from the same merchant. */
            verified_by_fraud_challenge?: boolean | null;
            /** @description The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized. */
            wallet?: string | null;
        };
        /**
         * IssuingCard
         * @description You can [create physical or virtual cards](https://stripe.com/docs/issuing) that are issued to cardholders.
         */
        "issuing.card": {
            /** @description The brand of the card. */
            brand: string;
            /**
             * @description The reason why the card was canceled.
             * @enum {string|null}
             */
            cancellation_reason?: "design_rejected" | "lost" | "stolen" | null;
            cardholder: components["schemas"]["issuing.cardholder"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK. */
            currency: string;
            /** @description The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
            cvc?: string;
            /** @description The expiration month of the card. */
            exp_month: number;
            /** @description The expiration year of the card. */
            exp_year: number;
            /** @description The financial account this card is attached to. */
            financial_account?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The last 4 digits of the card number. */
            last4: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
            number?: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "issuing.card";
            /** @description The personalization design object belonging to this card. */
            personalization_design?: (string | components["schemas"]["issuing.personalization_design"]) | null;
            /** @description The latest card that replaces this card, if any. */
            replaced_by?: (string | components["schemas"]["issuing.card"]) | null;
            /** @description The card this card replaces, if any. */
            replacement_for?: (string | components["schemas"]["issuing.card"]) | null;
            /**
             * @description The reason why the previous card needed to be replaced.
             * @enum {string|null}
             */
            replacement_reason?: "damaged" | "expired" | "lost" | "stolen" | null;
            /** @description Where and how the card will be shipped. */
            shipping?: components["schemas"]["issuing_card_shipping"] | null;
            spending_controls: components["schemas"]["issuing_card_authorization_controls"];
            /**
             * @description Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.
             * @enum {string}
             */
            status: "active" | "canceled" | "inactive";
            /**
             * @description The type of the card.
             * @enum {string}
             */
            type: "physical" | "virtual";
            /** @description Information relating to digital wallets (like Apple Pay and Google Pay). */
            wallets?: components["schemas"]["issuing_card_wallets"] | null;
        };
        /**
         * IssuingCardholder
         * @description An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
         *
         *     Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards/virtual/issue-cards#create-cardholder)
         */
        "issuing.cardholder": {
            billing: components["schemas"]["issuing_cardholder_address"];
            /** @description Additional information about a `company` cardholder. */
            company?: components["schemas"]["issuing_cardholder_company"] | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The cardholder's email address. */
            email?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Additional information about an `individual` cardholder. */
            individual?: components["schemas"]["issuing_cardholder_individual"] | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description The cardholder's name. This will be printed on cards issued to them. */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "issuing.cardholder";
            /** @description The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details. */
            phone_number?: string | null;
            /** @description The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.
             *      This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder. */
            preferred_locales?: ("de" | "en" | "es" | "fr" | "it")[] | null;
            requirements: components["schemas"]["issuing_cardholder_requirements"];
            /** @description Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
            spending_controls?: components["schemas"]["issuing_cardholder_authorization_controls"] | null;
            /**
             * @description Specifies whether to permit authorizations on this cardholder's cards.
             * @enum {string}
             */
            status: "active" | "blocked" | "inactive";
            /**
             * @description One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
             * @enum {string}
             */
            type: "company" | "individual";
        };
        /**
         * IssuingDispute
         * @description As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
         *
         *     Related guide: [Issuing disputes](https://stripe.com/docs/issuing/purchases/disputes)
         */
        "issuing.dispute": {
            /** @description Disputed amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation). */
            amount: number;
            /** @description List of balance transactions associated with the dispute. */
            balance_transactions?: components["schemas"]["balance_transaction"][] | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The currency the `transaction` was made in. */
            currency: string;
            evidence: components["schemas"]["issuing_dispute_evidence"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description The enum that describes the dispute loss outcome. If the dispute is not lost, this field will be absent. New enum values may be added in the future, so be sure to handle unknown values.
             * @enum {string}
             */
            loss_reason?: "cardholder_authentication_issuer_liability" | "eci5_token_transaction_with_tavv" | "excess_disputes_in_timeframe" | "has_not_met_the_minimum_dispute_amount_requirements" | "invalid_duplicate_dispute" | "invalid_incorrect_amount_dispute" | "invalid_no_authorization" | "invalid_use_of_disputes" | "merchandise_delivered_or_shipped" | "merchandise_or_service_as_described" | "not_cancelled" | "other" | "refund_issued" | "submitted_beyond_allowable_time_limit" | "transaction_3ds_required" | "transaction_approved_after_prior_fraud_dispute" | "transaction_authorized" | "transaction_electronically_read" | "transaction_qualifies_for_visa_easy_payment_service" | "transaction_unattended";
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "issuing.dispute";
            /**
             * @description Current status of the dispute.
             * @enum {string}
             */
            status: "expired" | "lost" | "submitted" | "unsubmitted" | "won";
            /** @description The transaction being disputed. */
            transaction: string | components["schemas"]["issuing.transaction"];
            /** @description [Treasury](https://stripe.com/docs/api/treasury) details related to this dispute if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts */
            treasury?: components["schemas"]["issuing_dispute_treasury"] | null;
        };
        /**
         * IssuingPersonalizationDesign
         * @description A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line.
         */
        "issuing.personalization_design": {
            /** @description The file for the card logo to use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`. */
            card_logo?: (string | components["schemas"]["file"]) | null;
            /** @description Hash containing carrier text, for use with physical bundles that support carrier text. */
            carrier_text?: components["schemas"]["issuing_personalization_design_carrier_text"] | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters. */
            lookup_key?: string | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description Friendly display name. */
            name?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "issuing.personalization_design";
            /** @description The physical bundle object belonging to this personalization design. */
            physical_bundle: string | components["schemas"]["issuing.physical_bundle"];
            preferences: components["schemas"]["issuing_personalization_design_preferences"];
            rejection_reasons: components["schemas"]["issuing_personalization_design_rejection_reasons"];
            /**
             * @description Whether this personalization design can be used to create cards.
             * @enum {string}
             */
            status: "active" | "inactive" | "rejected" | "review";
        };
        /**
         * IssuingPhysicalBundle
         * @description A Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.
         */
        "issuing.physical_bundle": {
            features: components["schemas"]["issuing_physical_bundle_features"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Friendly display name. */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "issuing.physical_bundle";
            /**
             * @description Whether this physical bundle can be used to create cards.
             * @enum {string}
             */
            status: "active" | "inactive" | "review";
            /**
             * @description Whether this physical bundle is a standard Stripe offering or custom-made for you.
             * @enum {string}
             */
            type: "custom" | "standard";
        };
        /**
         * IssuingSettlement
         * @description When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
         */
        "issuing.settlement": {
            /** @description The Bank Identification Number reflecting this settlement record. */
            bin: string;
            /**
             * Format: unix-time
             * @description The date that the transactions are cleared and posted to user's accounts.
             */
            clearing_date: number;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The total interchange received as reimbursement for the transactions. */
            interchange_fees: number;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description The total net amount required to settle with the network. */
            net_total: number;
            /**
             * @description The card network for this settlement report. One of ["visa", "maestro"]
             * @enum {string}
             */
            network: "maestro" | "visa";
            /** @description The total amount of fees owed to the network. */
            network_fees: number;
            /** @description The Settlement Identification Number assigned by the network. */
            network_settlement_identifier: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "issuing.settlement";
            /** @description One of `international` or `uk_national_net`. */
            settlement_service: string;
            /**
             * @description The current processing status of this settlement.
             * @enum {string}
             */
            status: "complete" | "pending";
            /** @description The total number of transactions reflected in this settlement. */
            transaction_count: number;
            /** @description The total transaction amount reflected in this settlement. */
            transaction_volume: number;
        };
        /**
         * IssuingNetworkToken
         * @description An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe.
         */
        "issuing.token": {
            /** @description Card associated with this token. */
            card: string | components["schemas"]["issuing.card"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The hashed ID derived from the device ID from the card network associated with the token. */
            device_fingerprint?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The last four digits of the token. */
            last4?: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description The token service provider / card network associated with the token.
             * @enum {string}
             */
            network: "mastercard" | "visa";
            network_data?: components["schemas"]["issuing_network_token_network_data"];
            /**
             * Format: unix-time
             * @description Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.
             */
            network_updated_at: number;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "issuing.token";
            /**
             * @description The usage state of the token.
             * @enum {string}
             */
            status: "active" | "deleted" | "requested" | "suspended";
            /**
             * @description The digital wallet for this token, if one was used.
             * @enum {string}
             */
            wallet_provider?: "apple_pay" | "google_pay" | "samsung_pay";
        };
        /**
         * IssuingTransaction
         * @description Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
         *     your Stripe account, such as a completed purchase or refund, is represented by an Issuing
         *     `Transaction` object.
         *
         *     Related guide: [Issued card transactions](https://stripe.com/docs/issuing/purchases/transactions)
         */
        "issuing.transaction": {
            /** @description The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount: number;
            /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount_details?: components["schemas"]["issuing_transaction_amount_details"] | null;
            /** @description The `Authorization` object that led to this transaction. */
            authorization?: (string | components["schemas"]["issuing.authorization"]) | null;
            /** @description ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction. */
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            /** @description The card used to make this transaction. */
            card: string | components["schemas"]["issuing.card"];
            /** @description The cardholder to whom this transaction belongs. */
            cardholder?: (string | components["schemas"]["issuing.cardholder"]) | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description If you've disputed the transaction, the ID of the dispute. */
            dispute?: (string | components["schemas"]["issuing.dispute"]) | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency. */
            merchant_amount: number;
            /** @description The currency with which the merchant is taking payment. */
            merchant_currency: string;
            merchant_data: components["schemas"]["issuing_authorization_merchant_data"];
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description Details about the transaction, such as processing dates, set by the card network. */
            network_data?: components["schemas"]["issuing_transaction_network_data"] | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "issuing.transaction";
            /** @description Additional purchase information that is optionally provided by the merchant. */
            purchase_details?: components["schemas"]["issuing_transaction_purchase_details"] | null;
            /** @description [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this transaction. If a network token was not used for this transaction, this field will be null. */
            token?: (string | components["schemas"]["issuing.token"]) | null;
            /** @description [Treasury](https://stripe.com/docs/api/treasury) details related to this transaction if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts */
            treasury?: components["schemas"]["issuing_transaction_treasury"] | null;
            /**
             * @description The nature of the transaction.
             * @enum {string}
             */
            type: "capture" | "refund";
            /**
             * @description The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
             * @enum {string|null}
             */
            wallet?: "apple_pay" | "google_pay" | "samsung_pay" | null;
        };
        /** IssuingAuthorizationAmountDetails */
        issuing_authorization_amount_details: {
            /** @description The fee charged by the ATM for the cash withdrawal. */
            atm_fee?: number | null;
            /** @description The amount of cash requested by the cardholder. */
            cashback_amount?: number | null;
        };
        /** IssuingAuthorizationAuthenticationExemption */
        issuing_authorization_authentication_exemption: {
            /**
             * @description The entity that requested the exemption, either the acquiring merchant or the Issuing user.
             * @enum {string}
             */
            claimed_by: "acquirer" | "issuer";
            /**
             * @description The specific exemption claimed for this authorization.
             * @enum {string}
             */
            type: "low_value_transaction" | "transaction_risk_analysis" | "unknown";
        };
        /** IssuingAuthorizationFleetCardholderPromptData */
        issuing_authorization_fleet_cardholder_prompt_data: {
            /** @description [Deprecated] An alphanumeric ID, though typical point of sales only support numeric entry. The card program can be configured to prompt for a vehicle ID, driver ID, or generic ID. */
            alphanumeric_id?: string | null;
            /** @description Driver ID. */
            driver_id?: string | null;
            /** @description Odometer reading. */
            odometer?: number | null;
            /** @description An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type. */
            unspecified_id?: string | null;
            /** @description User ID. */
            user_id?: string | null;
            /** @description Vehicle number. */
            vehicle_number?: string | null;
        };
        /** IssuingAuthorizationFleetData */
        issuing_authorization_fleet_data: {
            /** @description Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry. */
            cardholder_prompt_data?: components["schemas"]["issuing_authorization_fleet_cardholder_prompt_data"] | null;
            /**
             * @description The type of purchase.
             * @enum {string|null}
             */
            purchase_type?: "fuel_and_non_fuel_purchase" | "fuel_purchase" | "non_fuel_purchase" | null;
            /** @description More information about the total amount. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. This information is not guaranteed to be accurate as some merchants may provide unreliable data. */
            reported_breakdown?: components["schemas"]["issuing_authorization_fleet_reported_breakdown"] | null;
            /**
             * @description The type of fuel service.
             * @enum {string|null}
             */
            service_type?: "full_service" | "non_fuel_transaction" | "self_service" | null;
        };
        /** IssuingAuthorizationFleetFuelPriceData */
        issuing_authorization_fleet_fuel_price_data: {
            /**
             * Format: decimal
             * @description Gross fuel amount that should equal Fuel Quantity multiplied by Fuel Unit Cost, inclusive of taxes.
             */
            gross_amount_decimal?: string | null;
        };
        /** IssuingAuthorizationFleetNonFuelPriceData */
        issuing_authorization_fleet_non_fuel_price_data: {
            /**
             * Format: decimal
             * @description Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.
             */
            gross_amount_decimal?: string | null;
        };
        /** IssuingAuthorizationFleetReportedBreakdown */
        issuing_authorization_fleet_reported_breakdown: {
            /** @description Breakdown of fuel portion of the purchase. */
            fuel?: components["schemas"]["issuing_authorization_fleet_fuel_price_data"] | null;
            /** @description Breakdown of non-fuel portion of the purchase. */
            non_fuel?: components["schemas"]["issuing_authorization_fleet_non_fuel_price_data"] | null;
            /** @description Information about tax included in this transaction. */
            tax?: components["schemas"]["issuing_authorization_fleet_tax_data"] | null;
        };
        /** IssuingAuthorizationFleetTaxData */
        issuing_authorization_fleet_tax_data: {
            /**
             * Format: decimal
             * @description Amount of state or provincial Sales Tax included in the transaction amount. `null` if not reported by merchant or not subject to tax.
             */
            local_amount_decimal?: string | null;
            /**
             * Format: decimal
             * @description Amount of national Sales Tax or VAT included in the transaction amount. `null` if not reported by merchant or not subject to tax.
             */
            national_amount_decimal?: string | null;
        };
        /** IssuingAuthorizationFraudChallenge */
        issuing_authorization_fraud_challenge: {
            /**
             * @description The method by which the fraud challenge was delivered to the cardholder.
             * @enum {string}
             */
            channel: "sms";
            /**
             * @description The status of the fraud challenge.
             * @enum {string}
             */
            status: "expired" | "pending" | "rejected" | "undeliverable" | "verified";
            /**
             * @description If the challenge is not deliverable, the reason why.
             * @enum {string|null}
             */
            undeliverable_reason?: "no_phone_number" | "unsupported_phone_number" | null;
        };
        /** IssuingAuthorizationFuelData */
        issuing_authorization_fuel_data: {
            /** @description [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased. */
            industry_product_code?: string | null;
            /**
             * Format: decimal
             * @description The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places.
             */
            quantity_decimal?: string | null;
            /**
             * @description The type of fuel that was purchased.
             * @enum {string|null}
             */
            type?: "diesel" | "other" | "unleaded_plus" | "unleaded_regular" | "unleaded_super" | null;
            /**
             * @description The units for `quantity_decimal`.
             * @enum {string|null}
             */
            unit?: "charging_minute" | "imperial_gallon" | "kilogram" | "kilowatt_hour" | "liter" | "other" | "pound" | "us_gallon" | null;
            /**
             * Format: decimal
             * @description The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
             */
            unit_cost_decimal?: string | null;
        };
        /** IssuingAuthorizationMerchantData */
        issuing_authorization_merchant_data: {
            /** @description A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
            category: string;
            /** @description The merchant category code for the seller’s business */
            category_code: string;
            /** @description City where the seller is located */
            city?: string | null;
            /** @description Country where the seller is located */
            country?: string | null;
            /** @description Name of the seller */
            name?: string | null;
            /** @description Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant. */
            network_id: string;
            /** @description Postal code where the seller is located */
            postal_code?: string | null;
            /** @description State where the seller is located */
            state?: string | null;
            /** @description An ID assigned by the seller to the location of the sale. */
            terminal_id?: string | null;
            /** @description URL provided by the merchant on a 3DS request */
            url?: string | null;
        };
        /** IssuingAuthorizationNetworkData */
        issuing_authorization_network_data: {
            /** @description Identifier assigned to the acquirer by the card network. Sometimes this value is not provided by the network; in this case, the value will be `null`. */
            acquiring_institution_id?: string | null;
            /** @description The System Trace Audit Number (STAN) is a 6-digit identifier assigned by the acquirer. Prefer `network_data.transaction_id` if present, unless you have special requirements. */
            system_trace_audit_number?: string | null;
            /** @description Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions. */
            transaction_id?: string | null;
        };
        /** IssuingAuthorizationPendingRequest */
        issuing_authorization_pending_request: {
            /** @description The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount: number;
            /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount_details?: components["schemas"]["issuing_authorization_amount_details"] | null;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
            is_amount_controllable: boolean;
            /** @description The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            merchant_amount: number;
            /** @description The local currency the merchant is requesting to authorize. */
            merchant_currency: string;
            /** @description The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99. */
            network_risk_score?: number | null;
        };
        /** IssuingAuthorizationRequest */
        issuing_authorization_request: {
            /** @description The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved. */
            amount: number;
            /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount_details?: components["schemas"]["issuing_authorization_amount_details"] | null;
            /** @description Whether this request was approved. */
            approved: boolean;
            /** @description A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations. */
            authorization_code?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            merchant_amount: number;
            /** @description The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            merchant_currency: string;
            /** @description The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99. */
            network_risk_score?: number | null;
            /**
             * @description When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome.
             * @enum {string}
             */
            reason: "account_disabled" | "card_active" | "card_canceled" | "card_expired" | "card_inactive" | "cardholder_blocked" | "cardholder_inactive" | "cardholder_verification_required" | "insecure_authorization_method" | "insufficient_funds" | "not_allowed" | "pin_blocked" | "spending_controls" | "suspected_fraud" | "verification_failed" | "webhook_approved" | "webhook_declined" | "webhook_error" | "webhook_timeout";
            /** @description If the `request_history.reason` is `webhook_error` because the direct webhook response is invalid (for example, parsing errors or missing parameters), we surface a more detailed error message via this field. */
            reason_message?: string | null;
            /**
             * Format: unix-time
             * @description Time when the card network received an authorization request from the acquirer in UTC. Referred to by networks as transmission time.
             */
            requested_at?: number | null;
        };
        /** IssuingAuthorizationThreeDSecure */
        issuing_authorization_three_d_secure: {
            /**
             * @description The outcome of the 3D Secure authentication request.
             * @enum {string}
             */
            result: "attempt_acknowledged" | "authenticated" | "failed" | "required";
        };
        /** IssuingAuthorizationTreasury */
        issuing_authorization_treasury: {
            /** @description The array of [ReceivedCredits](https://stripe.com/docs/api/treasury/received_credits) associated with this authorization */
            received_credits: string[];
            /** @description The array of [ReceivedDebits](https://stripe.com/docs/api/treasury/received_debits) associated with this authorization */
            received_debits: string[];
            /** @description The Treasury [Transaction](https://stripe.com/docs/api/treasury/transactions) associated with this authorization */
            transaction?: string | null;
        };
        /** IssuingAuthorizationVerificationData */
        issuing_authorization_verification_data: {
            /**
             * @description Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
             * @enum {string}
             */
            address_line1_check: "match" | "mismatch" | "not_provided";
            /**
             * @description Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
             * @enum {string}
             */
            address_postal_code_check: "match" | "mismatch" | "not_provided";
            /** @description The exemption applied to this authorization. */
            authentication_exemption?: components["schemas"]["issuing_authorization_authentication_exemption"] | null;
            /**
             * @description Whether the cardholder provided a CVC and if it matched Stripe’s record.
             * @enum {string}
             */
            cvc_check: "match" | "mismatch" | "not_provided";
            /**
             * @description Whether the cardholder provided an expiry date and if it matched Stripe’s record.
             * @enum {string}
             */
            expiry_check: "match" | "mismatch" | "not_provided";
            /** @description The postal code submitted as part of the authorization used for postal code verification. */
            postal_code?: string | null;
            /** @description 3D Secure details. */
            three_d_secure?: components["schemas"]["issuing_authorization_three_d_secure"] | null;
        };
        /** IssuingCardApplePay */
        issuing_card_apple_pay: {
            /** @description Apple Pay Eligibility */
            eligible: boolean;
            /**
             * @description Reason the card is ineligible for Apple Pay
             * @enum {string|null}
             */
            ineligible_reason?: "missing_agreement" | "missing_cardholder_contact" | "unsupported_region" | null;
        };
        /** IssuingCardAuthorizationControls */
        issuing_card_authorization_controls: {
            /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
            allowed_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[] | null;
            /** @description Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control. */
            allowed_merchant_countries?: string[] | null;
            /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
            blocked_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[] | null;
            /** @description Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control. */
            blocked_merchant_countries?: string[] | null;
            /** @description Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain). */
            spending_limits?: components["schemas"]["issuing_card_spending_limit"][] | null;
            /** @description Currency of the amounts within `spending_limits`. Always the same as the currency of the card. */
            spending_limits_currency?: string | null;
        };
        /** IssuingCardGooglePay */
        issuing_card_google_pay: {
            /** @description Google Pay Eligibility */
            eligible: boolean;
            /**
             * @description Reason the card is ineligible for Google Pay
             * @enum {string|null}
             */
            ineligible_reason?: "missing_agreement" | "missing_cardholder_contact" | "unsupported_region" | null;
        };
        /** IssuingCardShipping */
        issuing_card_shipping: {
            address: components["schemas"]["address"];
            /** @description Address validation details for the shipment. */
            address_validation?: components["schemas"]["issuing_card_shipping_address_validation"] | null;
            /**
             * @description The delivery company that shipped a card.
             * @enum {string|null}
             */
            carrier?: "dhl" | "fedex" | "royal_mail" | "usps" | null;
            /** @description Additional information that may be required for clearing customs. */
            customs?: components["schemas"]["issuing_card_shipping_customs"] | null;
            /**
             * Format: unix-time
             * @description A unix timestamp representing a best estimate of when the card will be delivered.
             */
            eta?: number | null;
            /** @description Recipient name. */
            name: string;
            /** @description The phone number of the receiver of the shipment. Our courier partners will use this number to contact you in the event of card delivery issues. For individual shipments to the EU/UK, if this field is empty, we will provide them with the phone number provided when the cardholder was initially created. */
            phone_number?: string | null;
            /** @description Whether a signature is required for card delivery. This feature is only supported for US users. Standard shipping service does not support signature on delivery. The default value for standard shipping service is false and for express and priority services is true. */
            require_signature?: boolean | null;
            /**
             * @description Shipment service, such as `standard` or `express`.
             * @enum {string}
             */
            service: "express" | "priority" | "standard";
            /**
             * @description The delivery status of the card.
             * @enum {string|null}
             */
            status?: "canceled" | "delivered" | "failure" | "pending" | "returned" | "shipped" | "submitted" | null;
            /** @description A tracking number for a card shipment. */
            tracking_number?: string | null;
            /** @description A link to the shipping carrier's site where you can view detailed information about a card shipment. */
            tracking_url?: string | null;
            /**
             * @description Packaging options.
             * @enum {string}
             */
            type: "bulk" | "individual";
        };
        /** IssuingCardShippingAddressValidation */
        issuing_card_shipping_address_validation: {
            /**
             * @description The address validation capabilities to use.
             * @enum {string}
             */
            mode: "disabled" | "normalization_only" | "validation_and_normalization";
            /** @description The normalized shipping address. */
            normalized_address?: components["schemas"]["address"] | null;
            /**
             * @description The validation result for the shipping address.
             * @enum {string|null}
             */
            result?: "indeterminate" | "likely_deliverable" | "likely_undeliverable" | null;
        };
        /** IssuingCardShippingCustoms */
        issuing_card_shipping_customs: {
            /** @description A registration number used for customs in Europe. See [https://www.gov.uk/eori](https://www.gov.uk/eori) for the UK and [https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en](https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en) for the EU. */
            eori_number?: string | null;
        };
        /** IssuingCardSpendingLimit */
        issuing_card_spending_limit: {
            /** @description Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount: number;
            /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
            categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[] | null;
            /**
             * @description Interval (or event) to which the amount applies.
             * @enum {string}
             */
            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
        };
        /** IssuingCardWallets */
        issuing_card_wallets: {
            apple_pay: components["schemas"]["issuing_card_apple_pay"];
            google_pay: components["schemas"]["issuing_card_google_pay"];
            /** @description Unique identifier for a card used with digital wallets */
            primary_account_identifier?: string | null;
        };
        /** IssuingCardholderAddress */
        issuing_cardholder_address: {
            address: components["schemas"]["address"];
        };
        /** IssuingCardholderAuthorizationControls */
        issuing_cardholder_authorization_controls: {
            /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
            allowed_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[] | null;
            /** @description Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control. */
            allowed_merchant_countries?: string[] | null;
            /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
            blocked_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[] | null;
            /** @description Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control. */
            blocked_merchant_countries?: string[] | null;
            /** @description Limit spending with amount-based rules that apply across this cardholder's cards. */
            spending_limits?: components["schemas"]["issuing_cardholder_spending_limit"][] | null;
            /** @description Currency of the amounts within `spending_limits`. */
            spending_limits_currency?: string | null;
        };
        /** IssuingCardholderCardIssuing */
        issuing_cardholder_card_issuing: {
            /** @description Information about cardholder acceptance of Celtic [Authorized User Terms](https://stripe.com/docs/issuing/cards#accept-authorized-user-terms). Required for cards backed by a Celtic program. */
            user_terms_acceptance?: components["schemas"]["issuing_cardholder_user_terms_acceptance"] | null;
        };
        /** IssuingCardholderCompany */
        issuing_cardholder_company: {
            /** @description Whether the company's business ID number was provided. */
            tax_id_provided: boolean;
        };
        /** IssuingCardholderIdDocument */
        issuing_cardholder_id_document: {
            /** @description The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
            back?: (string | components["schemas"]["file"]) | null;
            /** @description The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
            front?: (string | components["schemas"]["file"]) | null;
        };
        /** IssuingCardholderIndividual */
        issuing_cardholder_individual: {
            /** @description Information related to the card_issuing program for this cardholder. */
            card_issuing?: components["schemas"]["issuing_cardholder_card_issuing"] | null;
            /** @description The date of birth of this cardholder. */
            dob?: components["schemas"]["issuing_cardholder_individual_dob"] | null;
            /** @description The first name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters. */
            first_name?: string | null;
            /** @description The last name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters. */
            last_name?: string | null;
            /** @description Government-issued ID document for this cardholder. */
            verification?: components["schemas"]["issuing_cardholder_verification"] | null;
        };
        /** IssuingCardholderIndividualDOB */
        issuing_cardholder_individual_dob: {
            /** @description The day of birth, between 1 and 31. */
            day?: number | null;
            /** @description The month of birth, between 1 and 12. */
            month?: number | null;
            /** @description The four-digit year of birth. */
            year?: number | null;
        };
        /** IssuingCardholderRequirements */
        issuing_cardholder_requirements: {
            /**
             * @description If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
             * @enum {string|null}
             */
            disabled_reason?: "listed" | "rejected.listed" | "requirements.past_due" | "under_review" | null;
            /** @description Array of fields that need to be collected in order to verify and re-enable the cardholder. */
            past_due?: ("company.tax_id" | "individual.card_issuing.user_terms_acceptance.date" | "individual.card_issuing.user_terms_acceptance.ip" | "individual.dob.day" | "individual.dob.month" | "individual.dob.year" | "individual.first_name" | "individual.last_name" | "individual.verification.document")[] | null;
        };
        /** IssuingCardholderSpendingLimit */
        issuing_cardholder_spending_limit: {
            /** @description Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount: number;
            /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
            categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[] | null;
            /**
             * @description Interval (or event) to which the amount applies.
             * @enum {string}
             */
            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
        };
        /** IssuingCardholderUserTermsAcceptance */
        issuing_cardholder_user_terms_acceptance: {
            /**
             * Format: unix-time
             * @description The Unix timestamp marking when the cardholder accepted the Authorized User Terms.
             */
            date?: number | null;
            /** @description The IP address from which the cardholder accepted the Authorized User Terms. */
            ip?: string | null;
            /** @description The user agent of the browser from which the cardholder accepted the Authorized User Terms. */
            user_agent?: string | null;
        };
        /** IssuingCardholderVerification */
        issuing_cardholder_verification: {
            /** @description An identifying document, either a passport or local ID card. */
            document?: components["schemas"]["issuing_cardholder_id_document"] | null;
        };
        /** IssuingDisputeCanceledEvidence */
        issuing_dispute_canceled_evidence: {
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            /**
             * Format: unix-time
             * @description Date when order was canceled.
             */
            canceled_at?: number | null;
            /** @description Whether the cardholder was provided with a cancellation policy. */
            cancellation_policy_provided?: boolean | null;
            /** @description Reason for canceling the order. */
            cancellation_reason?: string | null;
            /**
             * Format: unix-time
             * @description Date when the cardholder expected to receive the product.
             */
            expected_at?: number | null;
            /** @description Explanation of why the cardholder is disputing this transaction. */
            explanation?: string | null;
            /** @description Description of the merchandise or service that was purchased. */
            product_description?: string | null;
            /**
             * @description Whether the product was a merchandise or service.
             * @enum {string|null}
             */
            product_type?: "merchandise" | "service" | null;
            /**
             * @description Result of cardholder's attempt to return the product.
             * @enum {string|null}
             */
            return_status?: "merchant_rejected" | "successful" | null;
            /**
             * Format: unix-time
             * @description Date when the product was returned or attempted to be returned.
             */
            returned_at?: number | null;
        };
        /** IssuingDisputeDuplicateEvidence */
        issuing_dispute_duplicate_evidence: {
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for. */
            card_statement?: (string | components["schemas"]["file"]) | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash. */
            cash_receipt?: (string | components["schemas"]["file"]) | null;
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product. */
            check_image?: (string | components["schemas"]["file"]) | null;
            /** @description Explanation of why the cardholder is disputing this transaction. */
            explanation?: string | null;
            /** @description Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one. */
            original_transaction?: string | null;
        };
        /** IssuingDisputeEvidence */
        issuing_dispute_evidence: {
            canceled?: components["schemas"]["issuing_dispute_canceled_evidence"];
            duplicate?: components["schemas"]["issuing_dispute_duplicate_evidence"];
            fraudulent?: components["schemas"]["issuing_dispute_fraudulent_evidence"];
            merchandise_not_as_described?: components["schemas"]["issuing_dispute_merchandise_not_as_described_evidence"];
            no_valid_authorization?: components["schemas"]["issuing_dispute_no_valid_authorization_evidence"];
            not_received?: components["schemas"]["issuing_dispute_not_received_evidence"];
            other?: components["schemas"]["issuing_dispute_other_evidence"];
            /**
             * @description The reason for filing the dispute. Its value will match the field containing the evidence.
             * @enum {string}
             */
            reason: "canceled" | "duplicate" | "fraudulent" | "merchandise_not_as_described" | "no_valid_authorization" | "not_received" | "other" | "service_not_as_described";
            service_not_as_described?: components["schemas"]["issuing_dispute_service_not_as_described_evidence"];
        };
        /** IssuingDisputeFraudulentEvidence */
        issuing_dispute_fraudulent_evidence: {
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            /** @description Explanation of why the cardholder is disputing this transaction. */
            explanation?: string | null;
        };
        /** IssuingDisputeMerchandiseNotAsDescribedEvidence */
        issuing_dispute_merchandise_not_as_described_evidence: {
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            /** @description Explanation of why the cardholder is disputing this transaction. */
            explanation?: string | null;
            /**
             * Format: unix-time
             * @description Date when the product was received.
             */
            received_at?: number | null;
            /** @description Description of the cardholder's attempt to return the product. */
            return_description?: string | null;
            /**
             * @description Result of cardholder's attempt to return the product.
             * @enum {string|null}
             */
            return_status?: "merchant_rejected" | "successful" | null;
            /**
             * Format: unix-time
             * @description Date when the product was returned or attempted to be returned.
             */
            returned_at?: number | null;
        };
        /** IssuingDisputeNoValidAuthorizationEvidence */
        issuing_dispute_no_valid_authorization_evidence: {
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            /** @description Explanation of why the cardholder is disputing this transaction. */
            explanation?: string | null;
        };
        /** IssuingDisputeNotReceivedEvidence */
        issuing_dispute_not_received_evidence: {
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            /**
             * Format: unix-time
             * @description Date when the cardholder expected to receive the product.
             */
            expected_at?: number | null;
            /** @description Explanation of why the cardholder is disputing this transaction. */
            explanation?: string | null;
            /** @description Description of the merchandise or service that was purchased. */
            product_description?: string | null;
            /**
             * @description Whether the product was a merchandise or service.
             * @enum {string|null}
             */
            product_type?: "merchandise" | "service" | null;
        };
        /** IssuingDisputeOtherEvidence */
        issuing_dispute_other_evidence: {
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            /** @description Explanation of why the cardholder is disputing this transaction. */
            explanation?: string | null;
            /** @description Description of the merchandise or service that was purchased. */
            product_description?: string | null;
            /**
             * @description Whether the product was a merchandise or service.
             * @enum {string|null}
             */
            product_type?: "merchandise" | "service" | null;
        };
        /** IssuingDisputeServiceNotAsDescribedEvidence */
        issuing_dispute_service_not_as_described_evidence: {
            /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            /**
             * Format: unix-time
             * @description Date when order was canceled.
             */
            canceled_at?: number | null;
            /** @description Reason for canceling the order. */
            cancellation_reason?: string | null;
            /** @description Explanation of why the cardholder is disputing this transaction. */
            explanation?: string | null;
            /**
             * Format: unix-time
             * @description Date when the product was received.
             */
            received_at?: number | null;
        };
        /** IssuingDisputeTreasury */
        issuing_dispute_treasury: {
            /** @description The Treasury [DebitReversal](https://stripe.com/docs/api/treasury/debit_reversals) representing this Issuing dispute */
            debit_reversal?: string | null;
            /** @description The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) that is being disputed. */
            received_debit: string;
        };
        /** IssuingNetworkTokenAddress */
        issuing_network_token_address: {
            /** @description The street address of the cardholder tokenizing the card. */
            line1: string;
            /** @description The postal code of the cardholder tokenizing the card. */
            postal_code: string;
        };
        /** IssuingNetworkTokenDevice */
        issuing_network_token_device: {
            /** @description An obfuscated ID derived from the device ID. */
            device_fingerprint?: string;
            /** @description The IP address of the device at provisioning time. */
            ip_address?: string;
            /** @description The geographic latitude/longitude coordinates of the device at provisioning time. The format is [+-]decimal/[+-]decimal. */
            location?: string;
            /** @description The name of the device used for tokenization. */
            name?: string;
            /** @description The phone number of the device used for tokenization. */
            phone_number?: string;
            /**
             * @description The type of device used for tokenization.
             * @enum {string}
             */
            type?: "other" | "phone" | "watch";
        };
        /** IssuingNetworkTokenMastercard */
        issuing_network_token_mastercard: {
            /** @description A unique reference ID from MasterCard to represent the card account number. */
            card_reference_id?: string;
            /** @description The network-unique identifier for the token. */
            token_reference_id: string;
            /** @description The ID of the entity requesting tokenization, specific to MasterCard. */
            token_requestor_id: string;
            /** @description The name of the entity requesting tokenization, if known. This is directly provided from MasterCard. */
            token_requestor_name?: string;
        };
        /** IssuingNetworkTokenNetworkData */
        issuing_network_token_network_data: {
            device?: components["schemas"]["issuing_network_token_device"];
            mastercard?: components["schemas"]["issuing_network_token_mastercard"];
            /**
             * @description The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network.
             * @enum {string}
             */
            type: "mastercard" | "visa";
            visa?: components["schemas"]["issuing_network_token_visa"];
            wallet_provider?: components["schemas"]["issuing_network_token_wallet_provider"];
        };
        /** IssuingNetworkTokenVisa */
        issuing_network_token_visa: {
            /** @description A unique reference ID from Visa to represent the card account number. */
            card_reference_id: string;
            /** @description The network-unique identifier for the token. */
            token_reference_id: string;
            /** @description The ID of the entity requesting tokenization, specific to Visa. */
            token_requestor_id: string;
            /** @description Degree of risk associated with the token between `01` and `99`, with higher number indicating higher risk. A `00` value indicates the token was not scored by Visa. */
            token_risk_score?: string;
        };
        /** IssuingNetworkTokenWalletProvider */
        issuing_network_token_wallet_provider: {
            /** @description The wallet provider-given account ID of the digital wallet the token belongs to. */
            account_id?: string;
            /** @description An evaluation on the trustworthiness of the wallet account between 1 and 5. A higher score indicates more trustworthy. */
            account_trust_score?: number;
            /**
             * @description The method used for tokenizing a card.
             * @enum {string}
             */
            card_number_source?: "app" | "manual" | "on_file" | "other";
            cardholder_address?: components["schemas"]["issuing_network_token_address"];
            /** @description The name of the cardholder tokenizing the card. */
            cardholder_name?: string;
            /** @description An evaluation on the trustworthiness of the device. A higher score indicates more trustworthy. */
            device_trust_score?: number;
            /** @description The hashed email address of the cardholder's account with the wallet provider. */
            hashed_account_email_address?: string;
            /** @description The reasons for suggested tokenization given by the card network. */
            reason_codes?: ("account_card_too_new" | "account_recently_changed" | "account_too_new" | "account_too_new_since_launch" | "additional_device" | "data_expired" | "defer_id_v_decision" | "device_recently_lost" | "good_activity_history" | "has_suspended_tokens" | "high_risk" | "inactive_account" | "long_account_tenure" | "low_account_score" | "low_device_score" | "low_phone_number_score" | "network_service_error" | "outside_home_territory" | "provisioning_cardholder_mismatch" | "provisioning_device_and_cardholder_mismatch" | "provisioning_device_mismatch" | "same_device_no_prior_authentication" | "same_device_successful_prior_authentication" | "software_update" | "suspicious_activity" | "too_many_different_cardholders" | "too_many_recent_attempts" | "too_many_recent_tokens")[];
            /**
             * @description The recommendation on responding to the tokenization request.
             * @enum {string}
             */
            suggested_decision?: "approve" | "decline" | "require_auth";
            /** @description The version of the standard for mapping reason codes followed by the wallet provider. */
            suggested_decision_version?: string;
        };
        /** IssuingPersonalizationDesignCarrierText */
        issuing_personalization_design_carrier_text: {
            /** @description The footer body text of the carrier letter. */
            footer_body?: string | null;
            /** @description The footer title text of the carrier letter. */
            footer_title?: string | null;
            /** @description The header body text of the carrier letter. */
            header_body?: string | null;
            /** @description The header title text of the carrier letter. */
            header_title?: string | null;
        };
        /** IssuingPersonalizationDesignPreferences */
        issuing_personalization_design_preferences: {
            /** @description Whether we use this personalization design to create cards when one isn't specified. A connected account uses the Connect platform's default design if no personalization design is set as the default design. */
            is_default: boolean;
            /** @description Whether this personalization design is used to create cards when one is not specified and a default for this connected account does not exist. */
            is_platform_default?: boolean | null;
        };
        /** IssuingPersonalizationDesignRejectionReasons */
        issuing_personalization_design_rejection_reasons: {
            /** @description The reason(s) the card logo was rejected. */
            card_logo?: ("geographic_location" | "inappropriate" | "network_name" | "non_binary_image" | "non_fiat_currency" | "other" | "other_entity" | "promotional_material")[] | null;
            /** @description The reason(s) the carrier text was rejected. */
            carrier_text?: ("geographic_location" | "inappropriate" | "network_name" | "non_fiat_currency" | "other" | "other_entity" | "promotional_material")[] | null;
        };
        /** IssuingPhysicalBundleFeatures */
        issuing_physical_bundle_features: {
            /**
             * @description The policy for how to use card logo images in a card design with this physical bundle.
             * @enum {string}
             */
            card_logo: "optional" | "required" | "unsupported";
            /**
             * @description The policy for how to use carrier letter text in a card design with this physical bundle.
             * @enum {string}
             */
            carrier_text: "optional" | "required" | "unsupported";
            /**
             * @description The policy for how to use a second line on a card with this physical bundle.
             * @enum {string}
             */
            second_line: "optional" | "required" | "unsupported";
        };
        /** IssuingTransactionAmountDetails */
        issuing_transaction_amount_details: {
            /** @description The fee charged by the ATM for the cash withdrawal. */
            atm_fee?: number | null;
            /** @description The amount of cash requested by the cardholder. */
            cashback_amount?: number | null;
        };
        /** IssuingTransactionFleetCardholderPromptData */
        issuing_transaction_fleet_cardholder_prompt_data: {
            /** @description Driver ID. */
            driver_id?: string | null;
            /** @description Odometer reading. */
            odometer?: number | null;
            /** @description An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type. */
            unspecified_id?: string | null;
            /** @description User ID. */
            user_id?: string | null;
            /** @description Vehicle number. */
            vehicle_number?: string | null;
        };
        /** IssuingTransactionFleetData */
        issuing_transaction_fleet_data: {
            /** @description Answers to prompts presented to cardholder at point of sale. */
            cardholder_prompt_data?: components["schemas"]["issuing_transaction_fleet_cardholder_prompt_data"] | null;
            /** @description The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`. */
            purchase_type?: string | null;
            /** @description More information about the total amount. This information is not guaranteed to be accurate as some merchants may provide unreliable data. */
            reported_breakdown?: components["schemas"]["issuing_transaction_fleet_reported_breakdown"] | null;
            /** @description The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`. */
            service_type?: string | null;
        };
        /** IssuingTransactionFleetFuelPriceData */
        issuing_transaction_fleet_fuel_price_data: {
            /**
             * Format: decimal
             * @description Gross fuel amount that should equal Fuel Volume multipled by Fuel Unit Cost, inclusive of taxes.
             */
            gross_amount_decimal?: string | null;
        };
        /** IssuingTransactionFleetNonFuelPriceData */
        issuing_transaction_fleet_non_fuel_price_data: {
            /**
             * Format: decimal
             * @description Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.
             */
            gross_amount_decimal?: string | null;
        };
        /** IssuingTransactionFleetReportedBreakdown */
        issuing_transaction_fleet_reported_breakdown: {
            /** @description Breakdown of fuel portion of the purchase. */
            fuel?: components["schemas"]["issuing_transaction_fleet_fuel_price_data"] | null;
            /** @description Breakdown of non-fuel portion of the purchase. */
            non_fuel?: components["schemas"]["issuing_transaction_fleet_non_fuel_price_data"] | null;
            /** @description Information about tax included in this transaction. */
            tax?: components["schemas"]["issuing_transaction_fleet_tax_data"] | null;
        };
        /** IssuingTransactionFleetTaxData */
        issuing_transaction_fleet_tax_data: {
            /**
             * Format: decimal
             * @description Amount of state or provincial Sales Tax included in the transaction amount. Null if not reported by merchant or not subject to tax.
             */
            local_amount_decimal?: string | null;
            /**
             * Format: decimal
             * @description Amount of national Sales Tax or VAT included in the transaction amount. Null if not reported by merchant or not subject to tax.
             */
            national_amount_decimal?: string | null;
        };
        /** IssuingTransactionFlightData */
        issuing_transaction_flight_data: {
            /** @description The time that the flight departed. */
            departure_at?: number | null;
            /** @description The name of the passenger. */
            passenger_name?: string | null;
            /** @description Whether the ticket is refundable. */
            refundable?: boolean | null;
            /** @description The legs of the trip. */
            segments?: components["schemas"]["issuing_transaction_flight_data_leg"][] | null;
            /** @description The travel agency that issued the ticket. */
            travel_agency?: string | null;
        };
        /** IssuingTransactionFlightDataLeg */
        issuing_transaction_flight_data_leg: {
            /** @description The three-letter IATA airport code of the flight's destination. */
            arrival_airport_code?: string | null;
            /** @description The airline carrier code. */
            carrier?: string | null;
            /** @description The three-letter IATA airport code that the flight departed from. */
            departure_airport_code?: string | null;
            /** @description The flight number. */
            flight_number?: string | null;
            /** @description The flight's service class. */
            service_class?: string | null;
            /** @description Whether a stopover is allowed on this flight. */
            stopover_allowed?: boolean | null;
        };
        /** IssuingTransactionFuelData */
        issuing_transaction_fuel_data: {
            /** @description [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased. */
            industry_product_code?: string | null;
            /**
             * Format: decimal
             * @description The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places.
             */
            quantity_decimal?: string | null;
            /** @description The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`. */
            type: string;
            /** @description The units for `quantity_decimal`. One of `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, `liter`, `pound`, `us_gallon`, or `other`. */
            unit: string;
            /**
             * Format: decimal
             * @description The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
             */
            unit_cost_decimal: string;
        };
        /** IssuingTransactionLodgingData */
        issuing_transaction_lodging_data: {
            /** @description The time of checking into the lodging. */
            check_in_at?: number | null;
            /** @description The number of nights stayed at the lodging. */
            nights?: number | null;
        };
        /** IssuingTransactionNetworkData */
        issuing_transaction_network_data: {
            /** @description A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations. */
            authorization_code?: string | null;
            /** @description The date the transaction was processed by the card network. This can be different from the date the seller recorded the transaction depending on when the acquirer submits the transaction to the network. */
            processing_date?: string | null;
            /** @description Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions. */
            transaction_id?: string | null;
        };
        /** IssuingTransactionPurchaseDetails */
        issuing_transaction_purchase_details: {
            /** @description Fleet-specific information for transactions using Fleet cards. */
            fleet?: components["schemas"]["issuing_transaction_fleet_data"] | null;
            /** @description Information about the flight that was purchased with this transaction. */
            flight?: components["schemas"]["issuing_transaction_flight_data"] | null;
            /** @description Information about fuel that was purchased with this transaction. */
            fuel?: components["schemas"]["issuing_transaction_fuel_data"] | null;
            /** @description Information about lodging that was purchased with this transaction. */
            lodging?: components["schemas"]["issuing_transaction_lodging_data"] | null;
            /** @description The line items in the purchase. */
            receipt?: components["schemas"]["issuing_transaction_receipt_data"][] | null;
            /** @description A merchant-specific order number. */
            reference?: string | null;
        };
        /** IssuingTransactionReceiptData */
        issuing_transaction_receipt_data: {
            /** @description The description of the item. The maximum length of this field is 26 characters. */
            description?: string | null;
            /** @description The quantity of the item. */
            quantity?: number | null;
            /** @description The total for this line item in cents. */
            total?: number | null;
            /** @description The unit cost of the item in cents. */
            unit_cost?: number | null;
        };
        /** IssuingTransactionTreasury */
        issuing_transaction_treasury: {
            /** @description The Treasury [ReceivedCredit](https://stripe.com/docs/api/treasury/received_credits) representing this Issuing transaction if it is a refund */
            received_credit?: string | null;
            /** @description The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) representing this Issuing transaction if it is a capture */
            received_debit?: string | null;
        };
        /**
         * LineItem
         * @description A line item.
         */
        item: {
            /** @description Total discount amount applied. If no discounts were applied, defaults to 0. */
            amount_discount: number;
            /** @description Total before any discounts or taxes are applied. */
            amount_subtotal: number;
            /** @description Total tax amount applied. If no tax was applied, defaults to 0. */
            amount_tax: number;
            /** @description Total after discounts and taxes. */
            amount_total: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name. */
            description?: string;
            /** @description The discounts applied to the line item. */
            discounts?: components["schemas"]["line_items_discount_amount"][];
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "item";
            /** @description The price used to generate the line item. */
            price?: components["schemas"]["price"] | null;
            /** @description The quantity of products being purchased. */
            quantity?: number | null;
            /** @description The taxes applied to the line item. */
            taxes?: components["schemas"]["line_items_tax_amount"][];
        };
        /** klarna_address */
        klarna_address: {
            /** @description The payer address country */
            country?: string | null;
        };
        /** klarna_payer_details */
        klarna_payer_details: {
            /** @description The payer's address */
            address?: components["schemas"]["klarna_address"] | null;
        };
        /** LegalEntityCompany */
        legal_entity_company: {
            address?: components["schemas"]["address"];
            /** @description The Kana variation of the company's primary address (Japan only). */
            address_kana?: components["schemas"]["legal_entity_japan_address"] | null;
            /** @description The Kanji variation of the company's primary address (Japan only). */
            address_kanji?: components["schemas"]["legal_entity_japan_address"] | null;
            /** @description Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
            directors_provided?: boolean;
            /** @description Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
            executives_provided?: boolean;
            /** @description The export license ID number of the company, also referred as Import Export Code (India only). */
            export_license_id?: string;
            /** @description The purpose code to use for export transactions (India only). */
            export_purpose_code?: string;
            /** @description The company's legal name. */
            name?: string | null;
            /** @description The Kana variation of the company's legal name (Japan only). */
            name_kana?: string | null;
            /** @description The Kanji variation of the company's legal name (Japan only). */
            name_kanji?: string | null;
            /** @description Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
            owners_provided?: boolean;
            /** @description This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct. */
            ownership_declaration?: components["schemas"]["legal_entity_ubo_declaration"] | null;
            /** @description The company's phone number (used for verification). */
            phone?: string | null;
            /**
             * @description The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
             * @enum {string}
             */
            structure?: "free_zone_establishment" | "free_zone_llc" | "government_instrumentality" | "governmental_unit" | "incorporated_non_profit" | "incorporated_partnership" | "limited_liability_partnership" | "llc" | "multi_member_llc" | "private_company" | "private_corporation" | "private_partnership" | "public_company" | "public_corporation" | "public_partnership" | "registered_charity" | "single_member_llc" | "sole_establishment" | "sole_proprietorship" | "tax_exempt_government_instrumentality" | "unincorporated_association" | "unincorporated_non_profit" | "unincorporated_partnership";
            /** @description Whether the company's business ID number was provided. */
            tax_id_provided?: boolean;
            /** @description The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
            tax_id_registrar?: string;
            /** @description Whether the company's business VAT number was provided. */
            vat_id_provided?: boolean;
            /** @description Information on the verification state of the company. */
            verification?: components["schemas"]["legal_entity_company_verification"] | null;
        };
        /** LegalEntityCompanyVerification */
        legal_entity_company_verification: {
            document: components["schemas"]["legal_entity_company_verification_document"];
        };
        /** LegalEntityCompanyVerificationDocument */
        legal_entity_company_verification_document: {
            /** @description The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
            back?: (string | components["schemas"]["file"]) | null;
            /** @description A user-displayable string describing the verification state of this document. */
            details?: string | null;
            /** @description One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. */
            details_code?: string | null;
            /** @description The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
            front?: (string | components["schemas"]["file"]) | null;
        };
        /** LegalEntityDOB */
        legal_entity_dob: {
            /** @description The day of birth, between 1 and 31. */
            day?: number | null;
            /** @description The month of birth, between 1 and 12. */
            month?: number | null;
            /** @description The four-digit year of birth. */
            year?: number | null;
        };
        /** LegalEntityJapanAddress */
        legal_entity_japan_address: {
            /** @description City/Ward. */
            city?: string | null;
            /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string | null;
            /** @description Block/Building number. */
            line1?: string | null;
            /** @description Building details. */
            line2?: string | null;
            /** @description ZIP or postal code. */
            postal_code?: string | null;
            /** @description Prefecture. */
            state?: string | null;
            /** @description Town/cho-me. */
            town?: string | null;
        };
        /** LegalEntityPersonVerification */
        legal_entity_person_verification: {
            /** @description A document showing address, either a passport, local ID card, or utility bill from a well-known utility company. */
            additional_document?: components["schemas"]["legal_entity_person_verification_document"] | null;
            /** @description A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". */
            details?: string | null;
            /** @description One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. */
            details_code?: string | null;
            document?: components["schemas"]["legal_entity_person_verification_document"];
            /** @description The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. */
            status: string;
        };
        /** LegalEntityPersonVerificationDocument */
        legal_entity_person_verification_document: {
            /** @description The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
            back?: (string | components["schemas"]["file"]) | null;
            /** @description A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
            details?: string | null;
            /** @description One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
            details_code?: string | null;
            /** @description The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
            front?: (string | components["schemas"]["file"]) | null;
        };
        /** LegalEntityUBODeclaration */
        legal_entity_ubo_declaration: {
            /**
             * Format: unix-time
             * @description The Unix timestamp marking when the beneficial owner attestation was made.
             */
            date?: number | null;
            /** @description The IP address from which the beneficial owner attestation was made. */
            ip?: string | null;
            /** @description The user-agent string from the browser where the beneficial owner attestation was made. */
            user_agent?: string | null;
        };
        /**
         * InvoiceLineItem
         * @description Invoice Line Items represent the individual lines within an [invoice](https://stripe.com/docs/api/invoices) and only exist within the context of an invoice.
         *
         *     Each line item is backed by either an [invoice item](https://stripe.com/docs/api/invoiceitems) or a [subscription item](https://stripe.com/docs/api/subscription_items).
         */
        line_item: {
            /** @description The amount, in cents (or local equivalent). */
            amount: number;
            /** @description The integer amount in cents (or local equivalent) representing the amount for this line item, excluding all tax and discounts. */
            amount_excluding_tax?: number | null;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description The amount of discount calculated per discount for this line item. */
            discount_amounts?: components["schemas"]["discounts_resource_discount_amount"][] | null;
            /** @description If true, discounts will apply to this line item. Always false for prorations. */
            discountable: boolean;
            /** @description The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
            discounts: (string | components["schemas"]["discount"])[];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The ID of the invoice that contains this line item. */
            invoice?: string | null;
            /** @description The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. */
            invoice_item?: string | components["schemas"]["invoiceitem"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "line_item";
            period: components["schemas"]["invoice_line_item_period"];
            /** @description Contains pretax credit amounts (ex: discount, credit grants, etc) that apply to this line item. */
            pretax_credit_amounts?: components["schemas"]["invoices_resource_pretax_credit_amount"][] | null;
            /** @description The price of the line item. */
            price?: components["schemas"]["price"] | null;
            /** @description Whether this is a proration. */
            proration: boolean;
            /** @description Additional details for proration line items */
            proration_details?: components["schemas"]["invoices_resource_line_items_proration_details"] | null;
            /** @description The quantity of the subscription, if the line item is a subscription or a proration. */
            quantity?: number | null;
            /** @description The subscription that the invoice item pertains to, if any. */
            subscription?: (string | components["schemas"]["subscription"]) | null;
            /** @description The subscription item that generated this line item. Left empty if the line item is not an explicit result of a subscription. */
            subscription_item?: string | components["schemas"]["subscription_item"];
            /** @description The amount of tax calculated per tax rate for this line item */
            tax_amounts: components["schemas"]["invoice_tax_amount"][];
            /** @description The tax rates which apply to the line item. */
            tax_rates: components["schemas"]["tax_rate"][];
            /**
             * @description A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
             * @enum {string}
             */
            type: "invoiceitem" | "subscription";
            /**
             * Format: decimal
             * @description The amount in cents (or local equivalent) representing the unit amount for this line item, excluding all tax and discounts.
             */
            unit_amount_excluding_tax?: string | null;
        };
        /** LineItemsDiscountAmount */
        line_items_discount_amount: {
            /** @description The amount discounted. */
            amount: number;
            discount: components["schemas"]["discount"];
        };
        /** LineItemsTaxAmount */
        line_items_tax_amount: {
            /** @description Amount of tax applied for this rate. */
            amount: number;
            rate: components["schemas"]["tax_rate"];
            /**
             * @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
             * @enum {string|null}
             */
            taxability_reason?: "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated" | null;
            /** @description The amount on which tax is calculated, in cents (or local equivalent). */
            taxable_amount?: number | null;
        };
        /** linked_account_options_us_bank_account */
        linked_account_options_us_bank_account: {
            filters?: components["schemas"]["payment_flows_private_payment_methods_us_bank_account_linked_account_options_filters"];
            /** @description The list of permissions to request. The `payment_method` permission must be included. */
            permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
            /** @description Data features requested to be retrieved upon account creation. */
            prefetch?: ("balances" | "ownership" | "transactions")[] | null;
            /** @description For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app. */
            return_url?: string;
        };
        /**
         * LoginLink
         * @description Login Links are single-use URLs for a connected account to access the Express Dashboard. The connected account's [account.controller.stripe_dashboard.type](/api/accounts/object#account_object-controller-stripe_dashboard-type) must be `express` to have access to the Express Dashboard.
         */
        login_link: {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "login_link";
            /** @description The URL for the login link. */
            url: string;
        };
        /**
         * Mandate
         * @description A Mandate is a record of the permission that your customer gives you to debit their payment method.
         */
        mandate: {
            customer_acceptance: components["schemas"]["customer_acceptance"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            multi_use?: components["schemas"]["mandate_multi_use"];
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "mandate";
            /** @description The account (if any) that the mandate is intended for. */
            on_behalf_of?: string;
            /** @description ID of the payment method associated with this mandate. */
            payment_method: string | components["schemas"]["payment_method"];
            payment_method_details: components["schemas"]["mandate_payment_method_details"];
            single_use?: components["schemas"]["mandate_single_use"];
            /**
             * @description The mandate status indicates whether or not you can use it to initiate a payment.
             * @enum {string}
             */
            status: "active" | "inactive" | "pending";
            /**
             * @description The type of the mandate.
             * @enum {string}
             */
            type: "multi_use" | "single_use";
        };
        /** mandate_acss_debit */
        mandate_acss_debit: {
            /** @description List of Stripe products where this mandate can be selected automatically. */
            default_for?: ("invoice" | "subscription")[];
            /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
            interval_description?: string | null;
            /**
             * @description Payment schedule for the mandate.
             * @enum {string}
             */
            payment_schedule: "combined" | "interval" | "sporadic";
            /**
             * @description Transaction type of the mandate.
             * @enum {string}
             */
            transaction_type: "business" | "personal";
        };
        /** mandate_amazon_pay */
        mandate_amazon_pay: Record<string, never>;
        /** mandate_au_becs_debit */
        mandate_au_becs_debit: {
            /** @description The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
            url: string;
        };
        /** mandate_bacs_debit */
        mandate_bacs_debit: {
            /**
             * @description The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
             * @enum {string}
             */
            network_status: "accepted" | "pending" | "refused" | "revoked";
            /** @description The unique reference identifying the mandate on the Bacs network. */
            reference: string;
            /**
             * @description When the mandate is revoked on the Bacs network this field displays the reason for the revocation.
             * @enum {string|null}
             */
            revocation_reason?: "account_closed" | "bank_account_restricted" | "bank_ownership_changed" | "could_not_process" | "debit_not_authorized" | null;
            /** @description The URL that will contain the mandate that the customer has signed. */
            url: string;
        };
        /** mandate_cashapp */
        mandate_cashapp: Record<string, never>;
        /** mandate_kakao_pay */
        mandate_kakao_pay: Record<string, never>;
        /** mandate_kr_card */
        mandate_kr_card: Record<string, never>;
        /** mandate_link */
        mandate_link: Record<string, never>;
        /** mandate_multi_use */
        mandate_multi_use: Record<string, never>;
        /** mandate_payment_method_details */
        mandate_payment_method_details: {
            acss_debit?: components["schemas"]["mandate_acss_debit"];
            amazon_pay?: components["schemas"]["mandate_amazon_pay"];
            au_becs_debit?: components["schemas"]["mandate_au_becs_debit"];
            bacs_debit?: components["schemas"]["mandate_bacs_debit"];
            card?: components["schemas"]["card_mandate_payment_method_details"];
            cashapp?: components["schemas"]["mandate_cashapp"];
            kakao_pay?: components["schemas"]["mandate_kakao_pay"];
            kr_card?: components["schemas"]["mandate_kr_card"];
            link?: components["schemas"]["mandate_link"];
            paypal?: components["schemas"]["mandate_paypal"];
            revolut_pay?: components["schemas"]["mandate_revolut_pay"];
            sepa_debit?: components["schemas"]["mandate_sepa_debit"];
            /** @description This mandate corresponds with a specific payment method type. The `payment_method_details` includes an additional hash with the same name and contains mandate information that's specific to that payment method. */
            type: string;
            us_bank_account?: components["schemas"]["mandate_us_bank_account"];
        };
        /** mandate_paypal */
        mandate_paypal: {
            /** @description The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer. */
            billing_agreement_id?: string | null;
            /** @description PayPal account PayerID. This identifier uniquely identifies the PayPal customer. */
            payer_id?: string | null;
        };
        /** mandate_revolut_pay */
        mandate_revolut_pay: Record<string, never>;
        /** mandate_sepa_debit */
        mandate_sepa_debit: {
            /** @description The unique reference of the mandate. */
            reference: string;
            /** @description The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
            url: string;
        };
        /** mandate_single_use */
        mandate_single_use: {
            /** @description The amount of the payment on a single use mandate. */
            amount: number;
            /** @description The currency of the payment on a single use mandate. */
            currency: string;
        };
        /** mandate_us_bank_account */
        mandate_us_bank_account: {
            /**
             * @description Mandate collection method
             * @enum {string}
             */
            collection_method?: "paper";
        };
        /** networks */
        networks: {
            /** @description All available networks for the card. */
            available: string[];
            /** @description The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card. */
            preferred?: string | null;
        };
        /** NotificationEventData */
        notification_event_data: {
            /** @description Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key. */
            object: Record<string, never>;
            /** @description Object containing the names of the updated attributes and their values prior to the event (only included in events of type `*.updated`). If an array attribute has any updated elements, this object contains the entire array. In Stripe API versions 2017-04-06 or earlier, an updated array attribute in this object includes only the updated array elements. */
            previous_attributes?: Record<string, never>;
        };
        /** NotificationEventRequest */
        notification_event_request: {
            /** @description ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API. */
            id?: string | null;
            /** @description The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*. */
            idempotency_key?: string | null;
        };
        /** offline_acceptance */
        offline_acceptance: Record<string, never>;
        /** online_acceptance */
        online_acceptance: {
            /** @description The customer accepts the mandate from this IP address. */
            ip_address?: string | null;
            /** @description The customer accepts the mandate using the user agent of the browser. */
            user_agent?: string | null;
        };
        /** OutboundPaymentsPaymentMethodDetails */
        outbound_payments_payment_method_details: {
            billing_details: components["schemas"]["treasury_shared_resource_billing_details"];
            financial_account?: components["schemas"]["outbound_payments_payment_method_details_financial_account"];
            /**
             * @description The type of the payment method used in the OutboundPayment.
             * @enum {string}
             */
            type: "financial_account" | "us_bank_account";
            us_bank_account?: components["schemas"]["outbound_payments_payment_method_details_us_bank_account"];
        };
        /** outbound_payments_payment_method_details_financial_account */
        outbound_payments_payment_method_details_financial_account: {
            /** @description Token of the FinancialAccount. */
            id: string;
            /**
             * @description The rails used to send funds.
             * @enum {string}
             */
            network: "stripe";
        };
        /** outbound_payments_payment_method_details_us_bank_account */
        outbound_payments_payment_method_details_us_bank_account: {
            /**
             * @description Account holder type: individual or company.
             * @enum {string|null}
             */
            account_holder_type?: "company" | "individual" | null;
            /**
             * @description Account type: checkings or savings. Defaults to checking if omitted.
             * @enum {string|null}
             */
            account_type?: "checking" | "savings" | null;
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description ID of the mandate used to make this payment. */
            mandate?: string | components["schemas"]["mandate"];
            /**
             * @description The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
             * @enum {string}
             */
            network: "ach" | "us_domestic_wire";
            /** @description Routing number of the bank account. */
            routing_number?: string | null;
        };
        /** OutboundTransfersPaymentMethodDetails */
        outbound_transfers_payment_method_details: {
            billing_details: components["schemas"]["treasury_shared_resource_billing_details"];
            /**
             * @description The type of the payment method used in the OutboundTransfer.
             * @enum {string}
             */
            type: "us_bank_account";
            us_bank_account?: components["schemas"]["outbound_transfers_payment_method_details_us_bank_account"];
        };
        /** outbound_transfers_payment_method_details_us_bank_account */
        outbound_transfers_payment_method_details_us_bank_account: {
            /**
             * @description Account holder type: individual or company.
             * @enum {string|null}
             */
            account_holder_type?: "company" | "individual" | null;
            /**
             * @description Account type: checkings or savings. Defaults to checking if omitted.
             * @enum {string|null}
             */
            account_type?: "checking" | "savings" | null;
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description ID of the mandate used to make this payment. */
            mandate?: string | components["schemas"]["mandate"];
            /**
             * @description The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
             * @enum {string}
             */
            network: "ach" | "us_domestic_wire";
            /** @description Routing number of the bank account. */
            routing_number?: string | null;
        };
        /** PackageDimensions */
        package_dimensions: {
            /** @description Height, in inches. */
            height: number;
            /** @description Length, in inches. */
            length: number;
            /** @description Weight, in ounces. */
            weight: number;
            /** @description Width, in inches. */
            width: number;
        };
        /** PaymentFlowsAmountDetails */
        payment_flows_amount_details: {
            tip?: components["schemas"]["payment_flows_amount_details_client_resource_tip"];
        };
        /** PaymentFlowsAmountDetailsClient */
        payment_flows_amount_details_client: {
            tip?: components["schemas"]["payment_flows_amount_details_client_resource_tip"];
        };
        /** PaymentFlowsAmountDetailsClientResourceTip */
        payment_flows_amount_details_client_resource_tip: {
            /** @description Portion of the amount that corresponds to a tip. */
            amount?: number;
        };
        /** PaymentFlowsAutomaticPaymentMethodsPaymentIntent */
        payment_flows_automatic_payment_methods_payment_intent: {
            /**
             * @description Controls whether this PaymentIntent will accept redirect-based payment methods.
             *
             *     Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment.
             * @enum {string}
             */
            allow_redirects?: "always" | "never";
            /** @description Automatically calculates compatible payment methods */
            enabled: boolean;
        };
        /** PaymentFlowsAutomaticPaymentMethodsSetupIntent */
        payment_flows_automatic_payment_methods_setup_intent: {
            /**
             * @description Controls whether this SetupIntent will accept redirect-based payment methods.
             *
             *     Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/setup_intents/confirm) this SetupIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the setup.
             * @enum {string}
             */
            allow_redirects?: "always" | "never";
            /** @description Automatically calculates compatible payment methods */
            enabled?: boolean | null;
        };
        /** PaymentFlowsInstallmentOptions */
        payment_flows_installment_options: {
            enabled: boolean;
            plan?: components["schemas"]["payment_method_details_card_installments_plan"];
        };
        /** PaymentFlowsPrivatePaymentMethodsAlipay */
        payment_flows_private_payment_methods_alipay: Record<string, never>;
        /** PaymentFlowsPrivatePaymentMethodsAlipayDetails */
        payment_flows_private_payment_methods_alipay_details: {
            /** @description Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
            buyer_id?: string;
            /** @description Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
            fingerprint?: string | null;
            /** @description Transaction ID of this particular Alipay transaction. */
            transaction_id?: string | null;
        };
        /** PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorization */
        payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_extended_authorization_extended_authorization: {
            /**
             * @description Indicates whether or not the capture window is extended beyond the standard authorization.
             * @enum {string}
             */
            status: "disabled" | "enabled";
        };
        /** PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorization */
        payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_incremental_authorization_incremental_authorization: {
            /**
             * @description Indicates whether or not the incremental authorization feature is supported.
             * @enum {string}
             */
            status: "available" | "unavailable";
        };
        /** PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesOvercaptureOvercapture */
        payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_overcapture_overcapture: {
            /** @description The maximum amount that can be captured. */
            maximum_amount_capturable: number;
            /**
             * @description Indicates whether or not the authorized amount can be over-captured.
             * @enum {string}
             */
            status: "available" | "unavailable";
        };
        /** PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceMulticapture */
        payment_flows_private_payment_methods_card_details_api_resource_multicapture: {
            /**
             * @description Indicates whether or not multiple captures are supported.
             * @enum {string}
             */
            status: "available" | "unavailable";
        };
        /** PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet */
        payment_flows_private_payment_methods_card_present_common_wallet: {
            /**
             * @description The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`.
             * @enum {string}
             */
            type: "apple_pay" | "google_pay" | "samsung_pay" | "unknown";
        };
        /** PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptions */
        payment_flows_private_payment_methods_kakao_pay_payment_method_options: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** PaymentFlowsPrivatePaymentMethodsKlarnaDOB */
        payment_flows_private_payment_methods_klarna_dob: {
            /** @description The day of birth, between 1 and 31. */
            day?: number | null;
            /** @description The month of birth, between 1 and 12. */
            month?: number | null;
            /** @description The four-digit year of birth. */
            year?: number | null;
        };
        /** PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptions */
        payment_flows_private_payment_methods_naver_pay_payment_method_options: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
        };
        /** PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptions */
        payment_flows_private_payment_methods_payco_payment_method_options: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
        };
        /** PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptions */
        payment_flows_private_payment_methods_samsung_pay_payment_method_options: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
        };
        /** PaymentFlowsPrivatePaymentMethodsUsBankAccountLinkedAccountOptionsFilters */
        payment_flows_private_payment_methods_us_bank_account_linked_account_options_filters: {
            /** @description The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`. */
            account_subcategories?: ("checking" | "savings")[];
        };
        /**
         * PaymentIntent
         * @description A PaymentIntent guides you through the process of collecting a payment from your customer.
         *     We recommend that you create exactly one PaymentIntent for each order or
         *     customer session in your system. You can reference the PaymentIntent later to
         *     see the history of payment attempts for a particular session.
         *
         *     A PaymentIntent transitions through
         *     [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
         *     throughout its lifetime as it interfaces with Stripe.js to perform
         *     authentication flows and ultimately creates at most one successful charge.
         *
         *     Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
         */
        payment_intent: {
            /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
            amount: number;
            /** @description Amount that can be captured from this PaymentIntent. */
            amount_capturable?: number;
            amount_details?: components["schemas"]["payment_flows_amount_details"] | components["schemas"]["payment_flows_amount_details_client"];
            /** @description Amount that this PaymentIntent collects. */
            amount_received?: number;
            /** @description ID of the Connect application that created the PaymentIntent. */
            application?: (string | components["schemas"]["application"]) | null;
            /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
            application_fee_amount?: number | null;
            /** @description Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) */
            automatic_payment_methods?: components["schemas"]["payment_flows_automatic_payment_methods_payment_intent"] | null;
            /**
             * Format: unix-time
             * @description Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
             */
            canceled_at?: number | null;
            /**
             * @description Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
             * @enum {string|null}
             */
            cancellation_reason?: "abandoned" | "automatic" | "duplicate" | "failed_invoice" | "fraudulent" | "requested_by_customer" | "void_invoice" | null;
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method: "automatic" | "automatic_async" | "manual";
            /** @description The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
             *
             *     The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
             *
             *     Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled. */
            client_secret?: string | null;
            /**
             * @description Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
             * @enum {string}
             */
            confirmation_method: "automatic" | "manual";
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description ID of the Customer this PaymentIntent belongs to, if one exists.
             *
             *     Payment methods attached to other Customers cannot be used with this PaymentIntent.
             *
             *     If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description ID of the invoice that created this PaymentIntent, if it exists. */
            invoice?: (string | components["schemas"]["invoice"]) | null;
            /** @description The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason. */
            last_payment_error?: components["schemas"]["api_errors"] | null;
            /** @description ID of the latest [Charge object](https://stripe.com/docs/api/charges) created by this PaymentIntent. This property is `null` until PaymentIntent confirmation is attempted. */
            latest_charge?: (string | components["schemas"]["charge"]) | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). */
            metadata?: {
                [key: string]: string;
            };
            /** @description If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source. */
            next_action?: components["schemas"]["payment_intent_next_action"] | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "payment_intent";
            /** @description The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            /** @description ID of the payment method used in this PaymentIntent. */
            payment_method?: (string | components["schemas"]["payment_method"]) | null;
            /** @description Information about the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) used for this PaymentIntent. */
            payment_method_configuration_details?: components["schemas"]["payment_method_config_biz_payment_method_configuration_details"] | null;
            /** @description Payment-method-specific configuration for this PaymentIntent. */
            payment_method_options?: components["schemas"]["payment_intent_payment_method_options"] | null;
            /** @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
            payment_method_types: string[];
            /** @description If present, this property tells you about the processing state of the payment. */
            processing?: components["schemas"]["payment_intent_processing"] | null;
            /** @description Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
            receipt_email?: string | null;
            /** @description ID of the review associated with this PaymentIntent, if any. */
            review?: (string | components["schemas"]["review"]) | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string|null}
             */
            setup_future_usage?: "off_session" | "on_session" | null;
            /** @description Shipping information for this PaymentIntent. */
            shipping?: components["schemas"]["shipping"] | null;
            /** @description Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
             *
             *     Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead. */
            statement_descriptor?: string | null;
            /** @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. */
            statement_descriptor_suffix?: string | null;
            /**
             * @description Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
             * @enum {string}
             */
            status: "canceled" | "processing" | "requires_action" | "requires_capture" | "requires_confirmation" | "requires_payment_method" | "succeeded";
            /** @description The data that automatically creates a Transfer after the payment finalizes. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
            transfer_data?: components["schemas"]["transfer_data"] | null;
            /** @description A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers). */
            transfer_group?: string | null;
        };
        /** PaymentIntentCardProcessing */
        payment_intent_card_processing: {
            customer_notification?: components["schemas"]["payment_intent_processing_customer_notification"];
        };
        /** PaymentIntentNextAction */
        payment_intent_next_action: {
            alipay_handle_redirect?: components["schemas"]["payment_intent_next_action_alipay_handle_redirect"];
            boleto_display_details?: components["schemas"]["payment_intent_next_action_boleto"];
            card_await_notification?: components["schemas"]["payment_intent_next_action_card_await_notification"];
            cashapp_handle_redirect_or_display_qr_code?: components["schemas"]["payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code"];
            display_bank_transfer_instructions?: components["schemas"]["payment_intent_next_action_display_bank_transfer_instructions"];
            konbini_display_details?: components["schemas"]["payment_intent_next_action_konbini"];
            multibanco_display_details?: components["schemas"]["payment_intent_next_action_display_multibanco_details"];
            oxxo_display_details?: components["schemas"]["payment_intent_next_action_display_oxxo_details"];
            paynow_display_qr_code?: components["schemas"]["payment_intent_next_action_paynow_display_qr_code"];
            pix_display_qr_code?: components["schemas"]["payment_intent_next_action_pix_display_qr_code"];
            promptpay_display_qr_code?: components["schemas"]["payment_intent_next_action_promptpay_display_qr_code"];
            redirect_to_url?: components["schemas"]["payment_intent_next_action_redirect_to_url"];
            swish_handle_redirect_or_display_qr_code?: components["schemas"]["payment_intent_next_action_swish_handle_redirect_or_display_qr_code"];
            /** @description Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
            type: string;
            /** @description When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
            use_stripe_sdk?: Record<string, never>;
            verify_with_microdeposits?: components["schemas"]["payment_intent_next_action_verify_with_microdeposits"];
            wechat_pay_display_qr_code?: components["schemas"]["payment_intent_next_action_wechat_pay_display_qr_code"];
            wechat_pay_redirect_to_android_app?: components["schemas"]["payment_intent_next_action_wechat_pay_redirect_to_android_app"];
            wechat_pay_redirect_to_ios_app?: components["schemas"]["payment_intent_next_action_wechat_pay_redirect_to_ios_app"];
        };
        /** PaymentIntentNextActionAlipayHandleRedirect */
        payment_intent_next_action_alipay_handle_redirect: {
            /** @description The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App. */
            native_data?: string | null;
            /** @description The native URL you must redirect your customer to in order to authenticate the payment in an iOS App. */
            native_url?: string | null;
            /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
            return_url?: string | null;
            /** @description The URL you must redirect your customer to in order to authenticate the payment. */
            url?: string | null;
        };
        /** payment_intent_next_action_boleto */
        payment_intent_next_action_boleto: {
            /**
             * Format: unix-time
             * @description The timestamp after which the boleto expires.
             */
            expires_at?: number | null;
            /** @description The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher. */
            hosted_voucher_url?: string | null;
            /** @description The boleto number. */
            number?: string | null;
            /** @description The URL to the downloadable boleto voucher PDF. */
            pdf?: string | null;
        };
        /** PaymentIntentNextActionCardAwaitNotification */
        payment_intent_next_action_card_await_notification: {
            /**
             * Format: unix-time
             * @description The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.
             */
            charge_attempt_at?: number | null;
            /** @description For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required. */
            customer_approval_required?: boolean | null;
        };
        /** PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode */
        payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code: {
            /** @description The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration. */
            hosted_instructions_url: string;
            /** @description The url for mobile redirect based auth */
            mobile_auth_url: string;
            qr_code: components["schemas"]["payment_intent_next_action_cashapp_qr_code"];
        };
        /** PaymentIntentNextActionCashappQRCode */
        payment_intent_next_action_cashapp_qr_code: {
            /**
             * Format: unix-time
             * @description The date (unix timestamp) when the QR code expires.
             */
            expires_at: number;
            /** @description The image_url_png string used to render QR code */
            image_url_png: string;
            /** @description The image_url_svg string used to render QR code */
            image_url_svg: string;
        };
        /** PaymentIntentNextActionDisplayBankTransferInstructions */
        payment_intent_next_action_display_bank_transfer_instructions: {
            /** @description The remaining amount that needs to be transferred to complete the payment. */
            amount_remaining?: number | null;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency?: string | null;
            /** @description A list of financial addresses that can be used to fund the customer balance */
            financial_addresses?: components["schemas"]["funding_instructions_bank_transfer_financial_address"][];
            /** @description A link to a hosted page that guides your customer through completing the transfer. */
            hosted_instructions_url?: string | null;
            /** @description A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer. */
            reference?: string | null;
            /**
             * @description Type of bank transfer
             * @enum {string}
             */
            type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
        };
        /** PaymentIntentNextActionDisplayMultibancoDetails */
        payment_intent_next_action_display_multibanco_details: {
            /** @description Entity number associated with this Multibanco payment. */
            entity?: string | null;
            /**
             * Format: unix-time
             * @description The timestamp at which the Multibanco voucher expires.
             */
            expires_at?: number | null;
            /** @description The URL for the hosted Multibanco voucher page, which allows customers to view a Multibanco voucher. */
            hosted_voucher_url?: string | null;
            /** @description Reference number associated with this Multibanco payment. */
            reference?: string | null;
        };
        /** PaymentIntentNextActionDisplayOxxoDetails */
        payment_intent_next_action_display_oxxo_details: {
            /**
             * Format: unix-time
             * @description The timestamp after which the OXXO voucher expires.
             */
            expires_after?: number | null;
            /** @description The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher. */
            hosted_voucher_url?: string | null;
            /** @description OXXO reference number. */
            number?: string | null;
        };
        /** payment_intent_next_action_konbini */
        payment_intent_next_action_konbini: {
            /**
             * Format: unix-time
             * @description The timestamp at which the pending Konbini payment expires.
             */
            expires_at: number;
            /** @description The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher. */
            hosted_voucher_url?: string | null;
            stores: components["schemas"]["payment_intent_next_action_konbini_stores"];
        };
        /** payment_intent_next_action_konbini_familymart */
        payment_intent_next_action_konbini_familymart: {
            /** @description The confirmation number. */
            confirmation_number?: string;
            /** @description The payment code. */
            payment_code: string;
        };
        /** payment_intent_next_action_konbini_lawson */
        payment_intent_next_action_konbini_lawson: {
            /** @description The confirmation number. */
            confirmation_number?: string;
            /** @description The payment code. */
            payment_code: string;
        };
        /** payment_intent_next_action_konbini_ministop */
        payment_intent_next_action_konbini_ministop: {
            /** @description The confirmation number. */
            confirmation_number?: string;
            /** @description The payment code. */
            payment_code: string;
        };
        /** payment_intent_next_action_konbini_seicomart */
        payment_intent_next_action_konbini_seicomart: {
            /** @description The confirmation number. */
            confirmation_number?: string;
            /** @description The payment code. */
            payment_code: string;
        };
        /** payment_intent_next_action_konbini_stores */
        payment_intent_next_action_konbini_stores: {
            /** @description FamilyMart instruction details. */
            familymart?: components["schemas"]["payment_intent_next_action_konbini_familymart"] | null;
            /** @description Lawson instruction details. */
            lawson?: components["schemas"]["payment_intent_next_action_konbini_lawson"] | null;
            /** @description Ministop instruction details. */
            ministop?: components["schemas"]["payment_intent_next_action_konbini_ministop"] | null;
            /** @description Seicomart instruction details. */
            seicomart?: components["schemas"]["payment_intent_next_action_konbini_seicomart"] | null;
        };
        /** PaymentIntentNextActionPaynowDisplayQrCode */
        payment_intent_next_action_paynow_display_qr_code: {
            /** @description The raw data string used to generate QR code, it should be used together with QR code library. */
            data: string;
            /** @description The URL to the hosted PayNow instructions page, which allows customers to view the PayNow QR code. */
            hosted_instructions_url?: string | null;
            /** @description The image_url_png string used to render QR code */
            image_url_png: string;
            /** @description The image_url_svg string used to render QR code */
            image_url_svg: string;
        };
        /** PaymentIntentNextActionPixDisplayQrCode */
        payment_intent_next_action_pix_display_qr_code: {
            /** @description The raw data string used to generate QR code, it should be used together with QR code library. */
            data?: string;
            /** @description The date (unix timestamp) when the PIX expires. */
            expires_at?: number;
            /** @description The URL to the hosted pix instructions page, which allows customers to view the pix QR code. */
            hosted_instructions_url?: string;
            /** @description The image_url_png string used to render png QR code */
            image_url_png?: string;
            /** @description The image_url_svg string used to render svg QR code */
            image_url_svg?: string;
        };
        /** PaymentIntentNextActionPromptpayDisplayQrCode */
        payment_intent_next_action_promptpay_display_qr_code: {
            /** @description The raw data string used to generate QR code, it should be used together with QR code library. */
            data: string;
            /** @description The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code. */
            hosted_instructions_url: string;
            /** @description The PNG path used to render the QR code, can be used as the source in an HTML img tag */
            image_url_png: string;
            /** @description The SVG path used to render the QR code, can be used as the source in an HTML img tag */
            image_url_svg: string;
        };
        /** PaymentIntentNextActionRedirectToUrl */
        payment_intent_next_action_redirect_to_url: {
            /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
            return_url?: string | null;
            /** @description The URL you must redirect your customer to in order to authenticate the payment. */
            url?: string | null;
        };
        /** PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode */
        payment_intent_next_action_swish_handle_redirect_or_display_qr_code: {
            /** @description The URL to the hosted Swish instructions page, which allows customers to view the QR code. */
            hosted_instructions_url: string;
            qr_code: components["schemas"]["payment_intent_next_action_swish_qr_code"];
        };
        /** PaymentIntentNextActionSwishQRCode */
        payment_intent_next_action_swish_qr_code: {
            /** @description The raw data string used to generate QR code, it should be used together with QR code library. */
            data: string;
            /** @description The image_url_png string used to render QR code */
            image_url_png: string;
            /** @description The image_url_svg string used to render QR code */
            image_url_svg: string;
        };
        /** PaymentIntentNextActionVerifyWithMicrodeposits */
        payment_intent_next_action_verify_with_microdeposits: {
            /**
             * Format: unix-time
             * @description The timestamp when the microdeposits are expected to land.
             */
            arrival_date: number;
            /** @description The URL for the hosted verification page, which allows customers to verify their bank account. */
            hosted_verification_url: string;
            /**
             * @description The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
             * @enum {string|null}
             */
            microdeposit_type?: "amounts" | "descriptor_code" | null;
        };
        /** PaymentIntentNextActionWechatPayDisplayQrCode */
        payment_intent_next_action_wechat_pay_display_qr_code: {
            /** @description The data being used to generate QR code */
            data: string;
            /** @description The URL to the hosted WeChat Pay instructions page, which allows customers to view the WeChat Pay QR code. */
            hosted_instructions_url: string;
            /** @description The base64 image data for a pre-generated QR code */
            image_data_url: string;
            /** @description The image_url_png string used to render QR code */
            image_url_png: string;
            /** @description The image_url_svg string used to render QR code */
            image_url_svg: string;
        };
        /** PaymentIntentNextActionWechatPayRedirectToAndroidApp */
        payment_intent_next_action_wechat_pay_redirect_to_android_app: {
            /** @description app_id is the APP ID registered on WeChat open platform */
            app_id: string;
            /** @description nonce_str is a random string */
            nonce_str: string;
            /** @description package is static value */
            package: string;
            /** @description an unique merchant ID assigned by WeChat Pay */
            partner_id: string;
            /** @description an unique trading ID assigned by WeChat Pay */
            prepay_id: string;
            /** @description A signature */
            sign: string;
            /** @description Specifies the current time in epoch format */
            timestamp: string;
        };
        /** PaymentIntentNextActionWechatPayRedirectToIOSApp */
        payment_intent_next_action_wechat_pay_redirect_to_ios_app: {
            /** @description An universal link that redirect to WeChat Pay app */
            native_url: string;
        };
        /** PaymentIntentPaymentMethodOptions */
        payment_intent_payment_method_options: {
            acss_debit?: components["schemas"]["payment_intent_payment_method_options_acss_debit"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            affirm?: components["schemas"]["payment_method_options_affirm"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            afterpay_clearpay?: components["schemas"]["payment_method_options_afterpay_clearpay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            alipay?: components["schemas"]["payment_method_options_alipay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            alma?: components["schemas"]["payment_method_options_alma"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            amazon_pay?: components["schemas"]["payment_method_options_amazon_pay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            au_becs_debit?: components["schemas"]["payment_intent_payment_method_options_au_becs_debit"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            bacs_debit?: components["schemas"]["payment_intent_payment_method_options_bacs_debit"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            bancontact?: components["schemas"]["payment_method_options_bancontact"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            blik?: components["schemas"]["payment_intent_payment_method_options_blik"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            boleto?: components["schemas"]["payment_method_options_boleto"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            card?: components["schemas"]["payment_intent_payment_method_options_card"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            card_present?: components["schemas"]["payment_method_options_card_present"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            cashapp?: components["schemas"]["payment_method_options_cashapp"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            customer_balance?: components["schemas"]["payment_method_options_customer_balance"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            eps?: components["schemas"]["payment_intent_payment_method_options_eps"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            fpx?: components["schemas"]["payment_method_options_fpx"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            giropay?: components["schemas"]["payment_method_options_giropay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            grabpay?: components["schemas"]["payment_method_options_grabpay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            ideal?: components["schemas"]["payment_method_options_ideal"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            interac_present?: components["schemas"]["payment_method_options_interac_present"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            kakao_pay?: components["schemas"]["payment_flows_private_payment_methods_kakao_pay_payment_method_options"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            klarna?: components["schemas"]["payment_method_options_klarna"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            konbini?: components["schemas"]["payment_method_options_konbini"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            kr_card?: components["schemas"]["payment_method_options_kr_card"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            link?: components["schemas"]["payment_intent_payment_method_options_link"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            mobilepay?: components["schemas"]["payment_intent_payment_method_options_mobilepay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            multibanco?: components["schemas"]["payment_method_options_multibanco"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            naver_pay?: components["schemas"]["payment_flows_private_payment_methods_naver_pay_payment_method_options"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            oxxo?: components["schemas"]["payment_method_options_oxxo"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            p24?: components["schemas"]["payment_method_options_p24"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            payco?: components["schemas"]["payment_flows_private_payment_methods_payco_payment_method_options"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            paynow?: components["schemas"]["payment_method_options_paynow"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            paypal?: components["schemas"]["payment_method_options_paypal"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            pix?: components["schemas"]["payment_method_options_pix"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            promptpay?: components["schemas"]["payment_method_options_promptpay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            revolut_pay?: components["schemas"]["payment_method_options_revolut_pay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            samsung_pay?: components["schemas"]["payment_flows_private_payment_methods_samsung_pay_payment_method_options"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            sepa_debit?: components["schemas"]["payment_intent_payment_method_options_sepa_debit"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            sofort?: components["schemas"]["payment_method_options_sofort"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            swish?: components["schemas"]["payment_intent_payment_method_options_swish"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            twint?: components["schemas"]["payment_method_options_twint"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            us_bank_account?: components["schemas"]["payment_intent_payment_method_options_us_bank_account"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            wechat_pay?: components["schemas"]["payment_method_options_wechat_pay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            zip?: components["schemas"]["payment_method_options_zip"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
        };
        /** payment_intent_payment_method_options_acss_debit */
        payment_intent_payment_method_options_acss_debit: {
            mandate_options?: components["schemas"]["payment_intent_payment_method_options_mandate_options_acss_debit"];
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
            /**
             * @description Bank account verification method.
             * @enum {string}
             */
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        /** payment_intent_payment_method_options_au_becs_debit */
        payment_intent_payment_method_options_au_becs_debit: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        /** payment_intent_payment_method_options_bacs_debit */
        payment_intent_payment_method_options_bacs_debit: {
            mandate_options?: components["schemas"]["payment_intent_payment_method_options_mandate_options_bacs_debit"];
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        /** payment_intent_payment_method_options_blik */
        payment_intent_payment_method_options_blik: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_intent_payment_method_options_card */
        payment_intent_payment_method_options_card: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /** @description Installment details for this payment (Mexico only).
             *
             *     For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments). */
            installments?: components["schemas"]["payment_method_options_card_installments"] | null;
            /** @description Configuration options for setting up an eMandate for cards issued in India. */
            mandate_options?: components["schemas"]["payment_method_options_card_mandate_options"] | null;
            /**
             * @description Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
             * @enum {string|null}
             */
            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa" | null;
            /**
             * @description Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent.
             * @enum {string}
             */
            request_extended_authorization?: "if_available" | "never";
            /**
             * @description Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent.
             * @enum {string}
             */
            request_incremental_authorization?: "if_available" | "never";
            /**
             * @description Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent.
             * @enum {string}
             */
            request_multicapture?: "if_available" | "never";
            /**
             * @description Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent.
             * @enum {string}
             */
            request_overcapture?: "if_available" | "never";
            /**
             * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
             * @enum {string|null}
             */
            request_three_d_secure?: "any" | "automatic" | "challenge" | null;
            /** @description When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter). */
            require_cvc_recollection?: boolean;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
            /** @description Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters. */
            statement_descriptor_suffix_kana?: string;
            /** @description Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters. */
            statement_descriptor_suffix_kanji?: string;
        };
        /** payment_intent_payment_method_options_eps */
        payment_intent_payment_method_options_eps: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_intent_payment_method_options_link */
        payment_intent_payment_method_options_link: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** payment_intent_payment_method_options_mandate_options_acss_debit */
        payment_intent_payment_method_options_mandate_options_acss_debit: {
            /** @description A URL for custom mandate text */
            custom_mandate_url?: string;
            /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
            interval_description?: string | null;
            /**
             * @description Payment schedule for the mandate.
             * @enum {string|null}
             */
            payment_schedule?: "combined" | "interval" | "sporadic" | null;
            /**
             * @description Transaction type of the mandate.
             * @enum {string|null}
             */
            transaction_type?: "business" | "personal" | null;
        };
        /** payment_intent_payment_method_options_mandate_options_bacs_debit */
        payment_intent_payment_method_options_mandate_options_bacs_debit: Record<string, never>;
        /** payment_intent_payment_method_options_mandate_options_sepa_debit */
        payment_intent_payment_method_options_mandate_options_sepa_debit: Record<string, never>;
        /** payment_intent_payment_method_options_mobilepay */
        payment_intent_payment_method_options_mobilepay: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_intent_payment_method_options_sepa_debit */
        payment_intent_payment_method_options_sepa_debit: {
            mandate_options?: components["schemas"]["payment_intent_payment_method_options_mandate_options_sepa_debit"];
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        /** payment_intent_payment_method_options_swish */
        payment_intent_payment_method_options_swish: {
            /** @description The order ID displayed in the Swish app after the payment is authorized. */
            reference?: string | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_intent_payment_method_options_us_bank_account */
        payment_intent_payment_method_options_us_bank_account: {
            financial_connections?: components["schemas"]["linked_account_options_us_bank_account"];
            mandate_options?: components["schemas"]["payment_method_options_us_bank_account_mandate_options"];
            /**
             * @description Preferred transaction settlement speed
             * @enum {string}
             */
            preferred_settlement_speed?: "fastest" | "standard";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
            /**
             * @description Bank account verification method.
             * @enum {string}
             */
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        /** PaymentIntentProcessing */
        payment_intent_processing: {
            card?: components["schemas"]["payment_intent_card_processing"];
            /**
             * @description Type of the payment method for which payment is in `processing` state, one of `card`.
             * @enum {string}
             */
            type: "card";
        };
        /** PaymentIntentProcessingCustomerNotification */
        payment_intent_processing_customer_notification: {
            /** @description Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank. */
            approval_requested?: boolean | null;
            /**
             * Format: unix-time
             * @description If customer approval is required, they need to provide approval before this time.
             */
            completes_at?: number | null;
        };
        /** PaymentIntentTypeSpecificPaymentMethodOptionsClient */
        payment_intent_type_specific_payment_method_options_client: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual" | "manual_preferred";
            installments?: components["schemas"]["payment_flows_installment_options"];
            /** @description Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support. */
            request_incremental_authorization_support?: boolean;
            /** @description When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter). */
            require_cvc_recollection?: boolean;
            routing?: components["schemas"]["payment_method_options_card_present_routing"];
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
            /**
             * @description Bank account verification method.
             * @enum {string}
             */
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        /**
         * PaymentLink
         * @description A payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.
         *
         *     When a customer opens a payment link it will open a new [checkout session](https://stripe.com/docs/api/checkout/sessions) to render the payment page. You can use [checkout session events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed) to track payments through payment links.
         *
         *     Related guide: [Payment Links API](https://stripe.com/docs/payment-links)
         */
        payment_link: {
            /** @description Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated. */
            active: boolean;
            after_completion: components["schemas"]["payment_links_resource_after_completion"];
            /** @description Whether user redeemable promotion codes are enabled. */
            allow_promotion_codes: boolean;
            /** @description The ID of the Connect application that created the Payment Link. */
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. */
            application_fee_amount?: number | null;
            /** @description This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. */
            application_fee_percent?: number | null;
            automatic_tax: components["schemas"]["payment_links_resource_automatic_tax"];
            /**
             * @description Configuration for collecting the customer's billing address. Defaults to `auto`.
             * @enum {string}
             */
            billing_address_collection: "auto" | "required";
            /** @description When set, provides configuration to gather active consent from customers. */
            consent_collection?: components["schemas"]["payment_links_resource_consent_collection"] | null;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description Collect additional information from your customer using custom fields. Up to 3 fields are supported. */
            custom_fields: components["schemas"]["payment_links_resource_custom_fields"][];
            custom_text: components["schemas"]["payment_links_resource_custom_text"];
            /**
             * @description Configuration for Customer creation during checkout.
             * @enum {string}
             */
            customer_creation: "always" | "if_required";
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The custom message to be displayed to a customer when a payment link is no longer active. */
            inactive_message?: string | null;
            /** @description Configuration for creating invoice for payment mode payment links. */
            invoice_creation?: components["schemas"]["payment_links_resource_invoice_creation"] | null;
            /**
             * PaymentLinksResourceListLineItems
             * @description The line items representing what is being sold.
             */
            line_items?: {
                /** @description Details about each object. */
                data: components["schemas"]["item"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "payment_link";
            /** @description The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details. */
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            /** @description Indicates the parameters to be passed to PaymentIntent creation during checkout. */
            payment_intent_data?: components["schemas"]["payment_links_resource_payment_intent_data"] | null;
            /**
             * @description Configuration for collecting a payment method during checkout. Defaults to `always`.
             * @enum {string}
             */
            payment_method_collection: "always" | "if_required";
            /** @description The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
            payment_method_types?: ("affirm" | "afterpay_clearpay" | "alipay" | "alma" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "mobilepay" | "multibanco" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip")[] | null;
            phone_number_collection: components["schemas"]["payment_links_resource_phone_number_collection"];
            /** @description Settings that restrict the usage of a payment link. */
            restrictions?: components["schemas"]["payment_links_resource_restrictions"] | null;
            /** @description Configuration for collecting the customer's shipping address. */
            shipping_address_collection?: components["schemas"]["payment_links_resource_shipping_address_collection"] | null;
            /** @description The shipping rate options applied to the session. */
            shipping_options: components["schemas"]["payment_links_resource_shipping_option"][];
            /**
             * @description Indicates the type of transaction being performed which customizes relevant text on the page, such as the submit button.
             * @enum {string}
             */
            submit_type: "auto" | "book" | "donate" | "pay" | "subscribe";
            /** @description When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`. */
            subscription_data?: components["schemas"]["payment_links_resource_subscription_data"] | null;
            tax_id_collection: components["schemas"]["payment_links_resource_tax_id_collection"];
            /** @description The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to. */
            transfer_data?: components["schemas"]["payment_links_resource_transfer_data"] | null;
            /** @description The public URL that can be shared with customers. */
            url: string;
        };
        /** PaymentLinksResourceAfterCompletion */
        payment_links_resource_after_completion: {
            hosted_confirmation?: components["schemas"]["payment_links_resource_completion_behavior_confirmation_page"];
            redirect?: components["schemas"]["payment_links_resource_completion_behavior_redirect"];
            /**
             * @description The specified behavior after the purchase is complete.
             * @enum {string}
             */
            type: "hosted_confirmation" | "redirect";
        };
        /** PaymentLinksResourceAutomaticTax */
        payment_links_resource_automatic_tax: {
            /** @description If `true`, tax will be calculated automatically using the customer's location. */
            enabled: boolean;
            /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
            liability?: components["schemas"]["connect_account_reference"] | null;
        };
        /** PaymentLinksResourceCompletedSessions */
        payment_links_resource_completed_sessions: {
            /** @description The current number of checkout sessions that have been completed on the payment link which count towards the `completed_sessions` restriction to be met. */
            count: number;
            /** @description The maximum number of checkout sessions that can be completed for the `completed_sessions` restriction to be met. */
            limit: number;
        };
        /** PaymentLinksResourceCompletionBehaviorConfirmationPage */
        payment_links_resource_completion_behavior_confirmation_page: {
            /** @description The custom message that is displayed to the customer after the purchase is complete. */
            custom_message?: string | null;
        };
        /** PaymentLinksResourceCompletionBehaviorRedirect */
        payment_links_resource_completion_behavior_redirect: {
            /** @description The URL the customer will be redirected to after the purchase is complete. */
            url: string;
        };
        /** PaymentLinksResourceConsentCollection */
        payment_links_resource_consent_collection: {
            /** @description Settings related to the payment method reuse text shown in the Checkout UI. */
            payment_method_reuse_agreement?: components["schemas"]["payment_links_resource_payment_method_reuse_agreement"] | null;
            /**
             * @description If set to `auto`, enables the collection of customer consent for promotional communications.
             * @enum {string|null}
             */
            promotions?: "auto" | "none" | null;
            /**
             * @description If set to `required`, it requires cutomers to accept the terms of service before being able to pay. If set to `none`, customers won't be shown a checkbox to accept the terms of service.
             * @enum {string|null}
             */
            terms_of_service?: "none" | "required" | null;
        };
        /** PaymentLinksResourceCustomFields */
        payment_links_resource_custom_fields: {
            dropdown?: components["schemas"]["payment_links_resource_custom_fields_dropdown"];
            /** @description String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters. */
            key: string;
            label: components["schemas"]["payment_links_resource_custom_fields_label"];
            numeric?: components["schemas"]["payment_links_resource_custom_fields_numeric"];
            /** @description Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`. */
            optional: boolean;
            text?: components["schemas"]["payment_links_resource_custom_fields_text"];
            /**
             * @description The type of the field.
             * @enum {string}
             */
            type: "dropdown" | "numeric" | "text";
        };
        /** PaymentLinksResourceCustomFieldsDropdown */
        payment_links_resource_custom_fields_dropdown: {
            /** @description The options available for the customer to select. Up to 200 options allowed. */
            options: components["schemas"]["payment_links_resource_custom_fields_dropdown_option"][];
        };
        /** PaymentLinksResourceCustomFieldsDropdownOption */
        payment_links_resource_custom_fields_dropdown_option: {
            /** @description The label for the option, displayed to the customer. Up to 100 characters. */
            label: string;
            /** @description The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters. */
            value: string;
        };
        /** PaymentLinksResourceCustomFieldsLabel */
        payment_links_resource_custom_fields_label: {
            /** @description Custom text for the label, displayed to the customer. Up to 50 characters. */
            custom?: string | null;
            /**
             * @description The type of the label.
             * @enum {string}
             */
            type: "custom";
        };
        /** PaymentLinksResourceCustomFieldsNumeric */
        payment_links_resource_custom_fields_numeric: {
            /** @description The maximum character length constraint for the customer's input. */
            maximum_length?: number | null;
            /** @description The minimum character length requirement for the customer's input. */
            minimum_length?: number | null;
        };
        /** PaymentLinksResourceCustomFieldsText */
        payment_links_resource_custom_fields_text: {
            /** @description The maximum character length constraint for the customer's input. */
            maximum_length?: number | null;
            /** @description The minimum character length requirement for the customer's input. */
            minimum_length?: number | null;
        };
        /** PaymentLinksResourceCustomText */
        payment_links_resource_custom_text: {
            /** @description Custom text that should be displayed after the payment confirmation button. */
            after_submit?: components["schemas"]["payment_links_resource_custom_text_position"] | null;
            /** @description Custom text that should be displayed alongside shipping address collection. */
            shipping_address?: components["schemas"]["payment_links_resource_custom_text_position"] | null;
            /** @description Custom text that should be displayed alongside the payment confirmation button. */
            submit?: components["schemas"]["payment_links_resource_custom_text_position"] | null;
            /** @description Custom text that should be displayed in place of the default terms of service agreement text. */
            terms_of_service_acceptance?: components["schemas"]["payment_links_resource_custom_text_position"] | null;
        };
        /** PaymentLinksResourceCustomTextPosition */
        payment_links_resource_custom_text_position: {
            /** @description Text may be up to 1200 characters in length. */
            message: string;
        };
        /** PaymentLinksResourceInvoiceCreation */
        payment_links_resource_invoice_creation: {
            /** @description Enable creating an invoice on successful payment. */
            enabled: boolean;
            /** @description Configuration for the invoice. Default invoice values will be used if unspecified. */
            invoice_data?: components["schemas"]["payment_links_resource_invoice_settings"] | null;
        };
        /** PaymentLinksResourceInvoiceSettings */
        payment_links_resource_invoice_settings: {
            /** @description The account tax IDs associated with the invoice. */
            account_tax_ids?: (string | components["schemas"]["tax_id"] | components["schemas"]["deleted_tax_id"])[] | null;
            /** @description A list of up to 4 custom fields to be displayed on the invoice. */
            custom_fields?: components["schemas"]["invoice_setting_custom_field"][] | null;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Footer to be displayed on the invoice. */
            footer?: string | null;
            /** @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
            issuer?: components["schemas"]["connect_account_reference"] | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description Options for invoice PDF rendering. */
            rendering_options?: components["schemas"]["invoice_setting_rendering_options"] | null;
        };
        /** PaymentLinksResourcePaymentIntentData */
        payment_links_resource_payment_intent_data: {
            /**
             * @description Indicates when the funds will be captured from the customer's account.
             * @enum {string|null}
             */
            capture_method?: "automatic" | "automatic_async" | "manual" | null;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Payment Intents](https://stripe.com/docs/api/payment_intents) generated from this payment link. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description Indicates that you intend to make future payments with the payment method collected during checkout.
             * @enum {string|null}
             */
            setup_future_usage?: "off_session" | "on_session" | null;
            /** @description For a non-card payment, information about the charge that appears on the customer's statement when this payment succeeds in creating a charge. */
            statement_descriptor?: string | null;
            /** @description For a card payment, information about the charge that appears on the customer's statement when this payment succeeds in creating a charge. Concatenated with the account's statement descriptor prefix to form the complete statement descriptor. */
            statement_descriptor_suffix?: string | null;
            /** @description A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers) for details. */
            transfer_group?: string | null;
        };
        /** PaymentLinksResourcePaymentMethodReuseAgreement */
        payment_links_resource_payment_method_reuse_agreement: {
            /**
             * @description Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.
             *
             *     When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
             * @enum {string}
             */
            position: "auto" | "hidden";
        };
        /** PaymentLinksResourcePhoneNumberCollection */
        payment_links_resource_phone_number_collection: {
            /** @description If `true`, a phone number will be collected during checkout. */
            enabled: boolean;
        };
        /** PaymentLinksResourceRestrictions */
        payment_links_resource_restrictions: {
            completed_sessions: components["schemas"]["payment_links_resource_completed_sessions"];
        };
        /** PaymentLinksResourceShippingAddressCollection */
        payment_links_resource_shipping_address_collection: {
            /** @description An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`. */
            allowed_countries: ("AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MK" | "ML" | "MM" | "MN" | "MO" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | "ZZ")[];
        };
        /** PaymentLinksResourceShippingOption */
        payment_links_resource_shipping_option: {
            /** @description A non-negative integer in cents representing how much to charge. */
            shipping_amount: number;
            /** @description The ID of the Shipping Rate to use for this shipping option. */
            shipping_rate: string | components["schemas"]["shipping_rate"];
        };
        /** PaymentLinksResourceSubscriptionData */
        payment_links_resource_subscription_data: {
            /** @description The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
            description?: string | null;
            invoice_settings: components["schemas"]["payment_links_resource_subscription_data_invoice_settings"];
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Subscriptions](https://stripe.com/docs/api/subscriptions) generated from this payment link. */
            metadata: {
                [key: string]: string;
            };
            /** @description Integer representing the number of trial period days before the customer is charged for the first time. */
            trial_period_days?: number | null;
            /** @description Settings related to subscription trials. */
            trial_settings?: components["schemas"]["subscriptions_trials_resource_trial_settings"] | null;
        };
        /** PaymentLinksResourceSubscriptionDataInvoiceSettings */
        payment_links_resource_subscription_data_invoice_settings: {
            issuer: components["schemas"]["connect_account_reference"];
        };
        /** PaymentLinksResourceTaxIdCollection */
        payment_links_resource_tax_id_collection: {
            /** @description Indicates whether tax ID collection is enabled for the session. */
            enabled: boolean;
            /** @enum {string} */
            required: "if_supported" | "never";
        };
        /** PaymentLinksResourceTransferData */
        payment_links_resource_transfer_data: {
            /** @description The amount in cents (or local equivalent) that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
            amount?: number | null;
            /** @description The connected account receiving the transfer. */
            destination: string | components["schemas"]["account"];
        };
        /**
         * PaymentMethod
         * @description PaymentMethod objects represent your customer's payment instruments.
         *     You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
         *     Customer objects to store instrument details for future payments.
         *
         *     Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
         */
        payment_method: {
            acss_debit?: components["schemas"]["payment_method_acss_debit"];
            affirm?: components["schemas"]["payment_method_affirm"];
            afterpay_clearpay?: components["schemas"]["payment_method_afterpay_clearpay"];
            alipay?: components["schemas"]["payment_flows_private_payment_methods_alipay"];
            /**
             * @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
             * @enum {string}
             */
            allow_redisplay?: "always" | "limited" | "unspecified";
            alma?: components["schemas"]["payment_method_alma"];
            amazon_pay?: components["schemas"]["payment_method_amazon_pay"];
            au_becs_debit?: components["schemas"]["payment_method_au_becs_debit"];
            bacs_debit?: components["schemas"]["payment_method_bacs_debit"];
            bancontact?: components["schemas"]["payment_method_bancontact"];
            billing_details: components["schemas"]["billing_details"];
            blik?: components["schemas"]["payment_method_blik"];
            boleto?: components["schemas"]["payment_method_boleto"];
            card?: components["schemas"]["payment_method_card"];
            card_present?: components["schemas"]["payment_method_card_present"];
            cashapp?: components["schemas"]["payment_method_cashapp"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. */
            customer?: (string | components["schemas"]["customer"]) | null;
            customer_balance?: components["schemas"]["payment_method_customer_balance"];
            eps?: components["schemas"]["payment_method_eps"];
            fpx?: components["schemas"]["payment_method_fpx"];
            giropay?: components["schemas"]["payment_method_giropay"];
            grabpay?: components["schemas"]["payment_method_grabpay"];
            /** @description Unique identifier for the object. */
            id: string;
            ideal?: components["schemas"]["payment_method_ideal"];
            interac_present?: components["schemas"]["payment_method_interac_present"];
            kakao_pay?: components["schemas"]["payment_method_kakao_pay"];
            klarna?: components["schemas"]["payment_method_klarna"];
            konbini?: components["schemas"]["payment_method_konbini"];
            kr_card?: components["schemas"]["payment_method_kr_card"];
            link?: components["schemas"]["payment_method_link"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            mobilepay?: components["schemas"]["payment_method_mobilepay"];
            multibanco?: components["schemas"]["payment_method_multibanco"];
            naver_pay?: components["schemas"]["payment_method_naver_pay"];
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "payment_method";
            oxxo?: components["schemas"]["payment_method_oxxo"];
            p24?: components["schemas"]["payment_method_p24"];
            payco?: components["schemas"]["payment_method_payco"];
            paynow?: components["schemas"]["payment_method_paynow"];
            paypal?: components["schemas"]["payment_method_paypal"];
            pix?: components["schemas"]["payment_method_pix"];
            promptpay?: components["schemas"]["payment_method_promptpay"];
            radar_options?: components["schemas"]["radar_radar_options"];
            revolut_pay?: components["schemas"]["payment_method_revolut_pay"];
            samsung_pay?: components["schemas"]["payment_method_samsung_pay"];
            sepa_debit?: components["schemas"]["payment_method_sepa_debit"];
            sofort?: components["schemas"]["payment_method_sofort"];
            swish?: components["schemas"]["payment_method_swish"];
            twint?: components["schemas"]["payment_method_twint"];
            /**
             * @description The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
             * @enum {string}
             */
            type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "card_present" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "interac_present" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
            us_bank_account?: components["schemas"]["payment_method_us_bank_account"];
            wechat_pay?: components["schemas"]["payment_method_wechat_pay"];
            zip?: components["schemas"]["payment_method_zip"];
        };
        /** payment_method_acss_debit */
        payment_method_acss_debit: {
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Institution number of the bank account. */
            institution_number?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description Transit number of the bank account. */
            transit_number?: string | null;
        };
        /** payment_method_affirm */
        payment_method_affirm: Record<string, never>;
        /** payment_method_afterpay_clearpay */
        payment_method_afterpay_clearpay: Record<string, never>;
        /** payment_method_alma */
        payment_method_alma: Record<string, never>;
        /** payment_method_amazon_pay */
        payment_method_amazon_pay: Record<string, never>;
        /** payment_method_au_becs_debit */
        payment_method_au_becs_debit: {
            /** @description Six-digit number identifying bank and branch associated with this bank account. */
            bsb_number?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
        };
        /** payment_method_bacs_debit */
        payment_method_bacs_debit: {
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description Sort code of the bank account. (e.g., `10-20-30`) */
            sort_code?: string | null;
        };
        /** payment_method_bancontact */
        payment_method_bancontact: Record<string, never>;
        /** payment_method_blik */
        payment_method_blik: Record<string, never>;
        /** payment_method_boleto */
        payment_method_boleto: {
            /** @description Uniquely identifies the customer tax id (CNPJ or CPF) */
            tax_id: string;
        };
        /** payment_method_card */
        payment_method_card: {
            /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
            brand: string;
            /** @description Checks on Card address and CVC if provided. */
            checks?: components["schemas"]["payment_method_card_checks"] | null;
            /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
            country?: string | null;
            /** @description The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards. Can be `american_express`, `cartes_bancaires`, `diners_club`, `discover`, `eftpos_australia`, `interac`, `jcb`, `mastercard`, `union_pay`, `visa`, or `other` and may contain more values in the future. */
            display_brand?: string | null;
            /** @description Two-digit number representing the card's expiration month. */
            exp_month: number;
            /** @description Four-digit number representing the card's expiration year. */
            exp_year: number;
            /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
             *
             *     *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.* */
            fingerprint?: string | null;
            /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
            funding: string;
            /** @description Details of the original PaymentMethod that created this object. */
            generated_from?: components["schemas"]["payment_method_card_generated_card"] | null;
            /** @description The last four digits of the card. */
            last4: string;
            /** @description Contains information about card networks that can be used to process the payment. */
            networks?: components["schemas"]["networks"] | null;
            /** @description Contains details on how this Card may be used for 3D Secure authentication. */
            three_d_secure_usage?: components["schemas"]["three_d_secure_usage"] | null;
            /** @description If this Card is part of a card wallet, this contains the details of the card wallet. */
            wallet?: components["schemas"]["payment_method_card_wallet"] | null;
        };
        /** payment_method_card_checks */
        payment_method_card_checks: {
            /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            address_line1_check?: string | null;
            /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            address_postal_code_check?: string | null;
            /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            cvc_check?: string | null;
        };
        /** payment_method_card_generated_card */
        payment_method_card_generated_card: {
            /** @description The charge that created this object. */
            charge?: string | null;
            /** @description Transaction-specific details of the payment method used in the payment. */
            payment_method_details?: components["schemas"]["card_generated_from_payment_method_details"] | null;
            /** @description The ID of the SetupAttempt that generated this PaymentMethod, if any. */
            setup_attempt?: (string | components["schemas"]["setup_attempt"]) | null;
        };
        /** payment_method_card_present */
        payment_method_card_present: {
            /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
            brand?: string | null;
            /** @description The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card. */
            brand_product?: string | null;
            /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
            cardholder_name?: string | null;
            /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
            country?: string | null;
            /** @description A high-level description of the type of cards issued in this range. */
            description?: string | null;
            /** @description Two-digit number representing the card's expiration month. */
            exp_month: number;
            /** @description Four-digit number representing the card's expiration year. */
            exp_year: number;
            /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
             *
             *     *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.* */
            fingerprint?: string | null;
            /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
            funding?: string | null;
            /** @description The name of the card's issuing bank. */
            issuer?: string | null;
            /** @description The last four digits of the card. */
            last4?: string | null;
            /** @description Contains information about card networks that can be used to process the payment. */
            networks?: components["schemas"]["payment_method_card_present_networks"] | null;
            /** @description Details about payment methods collected offline. */
            offline?: components["schemas"]["payment_method_details_card_present_offline"] | null;
            /** @description EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
            preferred_locales?: string[] | null;
            /**
             * @description How card details were read in this transaction.
             * @enum {string|null}
             */
            read_method?: "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2" | null;
            wallet?: components["schemas"]["payment_flows_private_payment_methods_card_present_common_wallet"];
        };
        /** payment_method_card_present_networks */
        payment_method_card_present_networks: {
            /** @description All available networks for the card. */
            available: string[];
            /** @description The preferred network for the card. */
            preferred?: string | null;
        };
        /** payment_method_card_wallet */
        payment_method_card_wallet: {
            amex_express_checkout?: components["schemas"]["payment_method_card_wallet_amex_express_checkout"];
            apple_pay?: components["schemas"]["payment_method_card_wallet_apple_pay"];
            /** @description (For tokenized numbers only.) The last four digits of the device account number. */
            dynamic_last4?: string | null;
            google_pay?: components["schemas"]["payment_method_card_wallet_google_pay"];
            link?: components["schemas"]["payment_method_card_wallet_link"];
            masterpass?: components["schemas"]["payment_method_card_wallet_masterpass"];
            samsung_pay?: components["schemas"]["payment_method_card_wallet_samsung_pay"];
            /**
             * @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
             * @enum {string}
             */
            type: "amex_express_checkout" | "apple_pay" | "google_pay" | "link" | "masterpass" | "samsung_pay" | "visa_checkout";
            visa_checkout?: components["schemas"]["payment_method_card_wallet_visa_checkout"];
        };
        /** payment_method_card_wallet_amex_express_checkout */
        payment_method_card_wallet_amex_express_checkout: Record<string, never>;
        /** payment_method_card_wallet_apple_pay */
        payment_method_card_wallet_apple_pay: Record<string, never>;
        /** payment_method_card_wallet_google_pay */
        payment_method_card_wallet_google_pay: Record<string, never>;
        /** payment_method_card_wallet_link */
        payment_method_card_wallet_link: Record<string, never>;
        /** payment_method_card_wallet_masterpass */
        payment_method_card_wallet_masterpass: {
            /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            billing_address?: components["schemas"]["address"] | null;
            /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            email?: string | null;
            /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            name?: string | null;
            /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            shipping_address?: components["schemas"]["address"] | null;
        };
        /** payment_method_card_wallet_samsung_pay */
        payment_method_card_wallet_samsung_pay: Record<string, never>;
        /** payment_method_card_wallet_visa_checkout */
        payment_method_card_wallet_visa_checkout: {
            /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            billing_address?: components["schemas"]["address"] | null;
            /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            email?: string | null;
            /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            name?: string | null;
            /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            shipping_address?: components["schemas"]["address"] | null;
        };
        /** payment_method_cashapp */
        payment_method_cashapp: {
            /** @description A unique and immutable identifier assigned by Cash App to every buyer. */
            buyer_id?: string | null;
            /** @description A public identifier for buyers using Cash App. */
            cashtag?: string | null;
        };
        /** PaymentMethodConfigBizPaymentMethodConfigurationDetails */
        payment_method_config_biz_payment_method_configuration_details: {
            /** @description ID of the payment method configuration used. */
            id: string;
            /** @description ID of the parent payment method configuration used. */
            parent?: string | null;
        };
        /** PaymentMethodConfigResourceDisplayPreference */
        payment_method_config_resource_display_preference: {
            /** @description For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used. */
            overridable?: boolean | null;
            /**
             * @description The account's display preference.
             * @enum {string}
             */
            preference: "none" | "off" | "on";
            /**
             * @description The effective display preference value.
             * @enum {string}
             */
            value: "off" | "on";
        };
        /** PaymentMethodConfigResourcePaymentMethodProperties */
        payment_method_config_resource_payment_method_properties: {
            /** @description Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active. */
            available: boolean;
            display_preference: components["schemas"]["payment_method_config_resource_display_preference"];
        };
        /**
         * PaymentMethodConfigResourcePaymentMethodConfiguration
         * @description PaymentMethodConfigurations control which payment methods are displayed to your customers when you don't explicitly specify payment method types. You can have multiple configurations with different sets of payment methods for different scenarios.
         *
         *     There are two types of PaymentMethodConfigurations. Which is used depends on the [charge type](https://stripe.com/docs/connect/charges):
         *
         *     **Direct** configurations apply to payments created on your account, including Connect destination charges, Connect separate charges and transfers, and payments not involving Connect.
         *
         *     **Child** configurations apply to payments created on your connected accounts using direct charges, and charges with the on_behalf_of parameter.
         *
         *     Child configurations have a `parent` that sets default values and controls which settings connected accounts may override. You can specify a parent ID at payment time, and Stripe will automatically resolve the connected account’s associated child configuration. Parent configurations are [managed in the dashboard](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) and are not available in this API.
         *
         *     Related guides:
         *     - [Payment Method Configurations API](https://stripe.com/docs/connect/payment-method-configurations)
         *     - [Multiple configurations on dynamic payment methods](https://stripe.com/docs/payments/multiple-payment-method-configs)
         *     - [Multiple configurations for your Connect accounts](https://stripe.com/docs/connect/multiple-payment-method-configurations)
         */
        payment_method_configuration: {
            acss_debit?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            /** @description Whether the configuration can be used for new payments. */
            active: boolean;
            affirm?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            afterpay_clearpay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            alipay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            alma?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            amazon_pay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            apple_pay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            /** @description For child configs, the Connect application associated with the configuration. */
            application?: string | null;
            au_becs_debit?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            bacs_debit?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            bancontact?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            blik?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            boleto?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            card?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            cartes_bancaires?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            cashapp?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            customer_balance?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            eps?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            fpx?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            giropay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            google_pay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            grabpay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            /** @description Unique identifier for the object. */
            id: string;
            ideal?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            /** @description The default configuration is used whenever a payment method configuration is not specified. */
            is_default: boolean;
            jcb?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            klarna?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            konbini?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            link?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            mobilepay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            multibanco?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            /** @description The configuration's name. */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "payment_method_configuration";
            oxxo?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            p24?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            /** @description For child configs, the configuration's parent configuration. */
            parent?: string | null;
            paynow?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            paypal?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            promptpay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            revolut_pay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            sepa_debit?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            sofort?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            swish?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            twint?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            us_bank_account?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            wechat_pay?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
            zip?: components["schemas"]["payment_method_config_resource_payment_method_properties"];
        };
        /** payment_method_customer_balance */
        payment_method_customer_balance: Record<string, never>;
        /** payment_method_details */
        payment_method_details: {
            ach_credit_transfer?: components["schemas"]["payment_method_details_ach_credit_transfer"];
            ach_debit?: components["schemas"]["payment_method_details_ach_debit"];
            acss_debit?: components["schemas"]["payment_method_details_acss_debit"];
            affirm?: components["schemas"]["payment_method_details_affirm"];
            afterpay_clearpay?: components["schemas"]["payment_method_details_afterpay_clearpay"];
            alipay?: components["schemas"]["payment_flows_private_payment_methods_alipay_details"];
            alma?: components["schemas"]["payment_method_details_alma"];
            amazon_pay?: components["schemas"]["payment_method_details_amazon_pay"];
            au_becs_debit?: components["schemas"]["payment_method_details_au_becs_debit"];
            bacs_debit?: components["schemas"]["payment_method_details_bacs_debit"];
            bancontact?: components["schemas"]["payment_method_details_bancontact"];
            blik?: components["schemas"]["payment_method_details_blik"];
            boleto?: components["schemas"]["payment_method_details_boleto"];
            card?: components["schemas"]["payment_method_details_card"];
            card_present?: components["schemas"]["payment_method_details_card_present"];
            cashapp?: components["schemas"]["payment_method_details_cashapp"];
            customer_balance?: components["schemas"]["payment_method_details_customer_balance"];
            eps?: components["schemas"]["payment_method_details_eps"];
            fpx?: components["schemas"]["payment_method_details_fpx"];
            giropay?: components["schemas"]["payment_method_details_giropay"];
            grabpay?: components["schemas"]["payment_method_details_grabpay"];
            ideal?: components["schemas"]["payment_method_details_ideal"];
            interac_present?: components["schemas"]["payment_method_details_interac_present"];
            kakao_pay?: components["schemas"]["payment_method_details_kakao_pay"];
            klarna?: components["schemas"]["payment_method_details_klarna"];
            konbini?: components["schemas"]["payment_method_details_konbini"];
            kr_card?: components["schemas"]["payment_method_details_kr_card"];
            link?: components["schemas"]["payment_method_details_link"];
            mobilepay?: components["schemas"]["payment_method_details_mobilepay"];
            multibanco?: components["schemas"]["payment_method_details_multibanco"];
            naver_pay?: components["schemas"]["payment_method_details_naver_pay"];
            oxxo?: components["schemas"]["payment_method_details_oxxo"];
            p24?: components["schemas"]["payment_method_details_p24"];
            payco?: components["schemas"]["payment_method_details_payco"];
            paynow?: components["schemas"]["payment_method_details_paynow"];
            paypal?: components["schemas"]["payment_method_details_paypal"];
            pix?: components["schemas"]["payment_method_details_pix"];
            promptpay?: components["schemas"]["payment_method_details_promptpay"];
            revolut_pay?: components["schemas"]["payment_method_details_revolut_pay"];
            samsung_pay?: components["schemas"]["payment_method_details_samsung_pay"];
            sepa_debit?: components["schemas"]["payment_method_details_sepa_debit"];
            sofort?: components["schemas"]["payment_method_details_sofort"];
            stripe_account?: components["schemas"]["payment_method_details_stripe_account"];
            swish?: components["schemas"]["payment_method_details_swish"];
            twint?: components["schemas"]["payment_method_details_twint"];
            /** @description The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
             *     An additional hash is included on `payment_method_details` with a name matching this value.
             *     It contains information specific to the payment method. */
            type: string;
            us_bank_account?: components["schemas"]["payment_method_details_us_bank_account"];
            wechat?: components["schemas"]["payment_method_details_wechat"];
            wechat_pay?: components["schemas"]["payment_method_details_wechat_pay"];
            zip?: components["schemas"]["payment_method_details_zip"];
        };
        /** payment_method_details_ach_credit_transfer */
        payment_method_details_ach_credit_transfer: {
            /** @description Account number to transfer funds to. */
            account_number?: string | null;
            /** @description Name of the bank associated with the routing number. */
            bank_name?: string | null;
            /** @description Routing transit number for the bank account to transfer funds to. */
            routing_number?: string | null;
            /** @description SWIFT code of the bank associated with the routing number. */
            swift_code?: string | null;
        };
        /** payment_method_details_ach_debit */
        payment_method_details_ach_debit: {
            /**
             * @description Type of entity that holds the account. This can be either `individual` or `company`.
             * @enum {string|null}
             */
            account_holder_type?: "company" | "individual" | null;
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Two-letter ISO code representing the country the bank account is located in. */
            country?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description Routing transit number of the bank account. */
            routing_number?: string | null;
        };
        /** payment_method_details_acss_debit */
        payment_method_details_acss_debit: {
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Institution number of the bank account */
            institution_number?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description ID of the mandate used to make this payment. */
            mandate?: string;
            /** @description Transit number of the bank account. */
            transit_number?: string | null;
        };
        /** payment_method_details_affirm */
        payment_method_details_affirm: {
            /** @description The Affirm transaction ID associated with this payment. */
            transaction_id?: string | null;
        };
        /** payment_method_details_afterpay_clearpay */
        payment_method_details_afterpay_clearpay: {
            /** @description The Afterpay order ID associated with this payment intent. */
            order_id?: string | null;
            /** @description Order identifier shown to the merchant in Afterpay’s online portal. */
            reference?: string | null;
        };
        /** payment_method_details_alma */
        payment_method_details_alma: Record<string, never>;
        /** payment_method_details_amazon_pay */
        payment_method_details_amazon_pay: Record<string, never>;
        /** payment_method_details_au_becs_debit */
        payment_method_details_au_becs_debit: {
            /** @description Bank-State-Branch number of the bank account. */
            bsb_number?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description ID of the mandate used to make this payment. */
            mandate?: string;
        };
        /** payment_method_details_bacs_debit */
        payment_method_details_bacs_debit: {
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description ID of the mandate used to make this payment. */
            mandate?: string | null;
            /** @description Sort code of the bank account. (e.g., `10-20-30`) */
            sort_code?: string | null;
        };
        /** payment_method_details_bancontact */
        payment_method_details_bancontact: {
            /** @description Bank code of bank associated with the bank account. */
            bank_code?: string | null;
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Bank Identifier Code of the bank associated with the bank account. */
            bic?: string | null;
            /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            /** @description Last four characters of the IBAN. */
            iban_last4?: string | null;
            /**
             * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
             *     Can be one of `en`, `de`, `fr`, or `nl`
             * @enum {string|null}
             */
            preferred_language?: "de" | "en" | "fr" | "nl" | null;
            /** @description Owner's verified full name. Values are verified or provided by Bancontact directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            verified_name?: string | null;
        };
        /** payment_method_details_blik */
        payment_method_details_blik: {
            /** @description A unique and immutable identifier assigned by BLIK to every buyer. */
            buyer_id?: string | null;
        };
        /** payment_method_details_boleto */
        payment_method_details_boleto: {
            /** @description The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers) */
            tax_id: string;
        };
        /** payment_method_details_card */
        payment_method_details_card: {
            /** @description The authorized amount. */
            amount_authorized?: number | null;
            /** @description Authorization code on the charge. */
            authorization_code?: string | null;
            /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
            brand?: string | null;
            /**
             * Format: unix-time
             * @description When using manual capture, a future timestamp at which the charge will be automatically refunded if uncaptured.
             */
            capture_before?: number;
            /** @description Check results by Card networks on Card address and CVC at time of payment. */
            checks?: components["schemas"]["payment_method_details_card_checks"] | null;
            /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
            country?: string | null;
            /** @description Two-digit number representing the card's expiration month. */
            exp_month: number;
            /** @description Four-digit number representing the card's expiration year. */
            exp_year: number;
            extended_authorization?: components["schemas"]["payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_extended_authorization_extended_authorization"];
            /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
             *
             *     *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.* */
            fingerprint?: string | null;
            /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
            funding?: string | null;
            incremental_authorization?: components["schemas"]["payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_incremental_authorization_incremental_authorization"];
            /** @description Installment details for this payment (Mexico only).
             *
             *     For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments). */
            installments?: components["schemas"]["payment_method_details_card_installments"] | null;
            /** @description The last four digits of the card. */
            last4?: string | null;
            /** @description ID of the mandate used to make this payment or created by it. */
            mandate?: string | null;
            multicapture?: components["schemas"]["payment_flows_private_payment_methods_card_details_api_resource_multicapture"];
            /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
            network?: string | null;
            /** @description If this card has network token credentials, this contains the details of the network token credentials. */
            network_token?: components["schemas"]["payment_method_details_card_network_token"] | null;
            overcapture?: components["schemas"]["payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_overcapture_overcapture"];
            /** @description Populated if this transaction used 3D Secure authentication. */
            three_d_secure?: components["schemas"]["three_d_secure_details_charge"] | null;
            /** @description If this Card is part of a card wallet, this contains the details of the card wallet. */
            wallet?: components["schemas"]["payment_method_details_card_wallet"] | null;
        };
        /** payment_method_details_card_checks */
        payment_method_details_card_checks: {
            /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            address_line1_check?: string | null;
            /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            address_postal_code_check?: string | null;
            /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            cvc_check?: string | null;
        };
        /** payment_method_details_card_installments */
        payment_method_details_card_installments: {
            /** @description Installment plan selected for the payment. */
            plan?: components["schemas"]["payment_method_details_card_installments_plan"] | null;
        };
        /** payment_method_details_card_installments_plan */
        payment_method_details_card_installments_plan: {
            /** @description For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
            count?: number | null;
            /**
             * @description For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
             *     One of `month`.
             * @enum {string|null}
             */
            interval?: "month" | null;
            /**
             * @description Type of installment plan, one of `fixed_count`.
             * @enum {string}
             */
            type: "fixed_count";
        };
        /** payment_method_details_card_network_token */
        payment_method_details_card_network_token: {
            /** @description Indicates if Stripe used a network token, either user provided or Stripe managed when processing the transaction. */
            used: boolean;
        };
        /** payment_method_details_card_present */
        payment_method_details_card_present: {
            /** @description The authorized amount */
            amount_authorized?: number | null;
            /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
            brand?: string | null;
            /** @description The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card. */
            brand_product?: string | null;
            /**
             * Format: unix-time
             * @description When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.
             */
            capture_before?: number;
            /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
            cardholder_name?: string | null;
            /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
            country?: string | null;
            /** @description A high-level description of the type of cards issued in this range. */
            description?: string | null;
            /** @description Authorization response cryptogram. */
            emv_auth_data?: string | null;
            /** @description Two-digit number representing the card's expiration month. */
            exp_month: number;
            /** @description Four-digit number representing the card's expiration year. */
            exp_year: number;
            /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
             *
             *     *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.* */
            fingerprint?: string | null;
            /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
            funding?: string | null;
            /** @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
            generated_card?: string | null;
            /** @description Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support). */
            incremental_authorization_supported: boolean;
            /** @description The name of the card's issuing bank. */
            issuer?: string | null;
            /** @description The last four digits of the card. */
            last4?: string | null;
            /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
            network?: string | null;
            /** @description This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. The first three digits of the Trace ID is the Financial Network Code, the next 6 digits is the Banknet Reference Number, and the last 4 digits represent the date (MM/DD). This field will be available for successful Visa, Mastercard, or American Express transactions and always null for other card brands. */
            network_transaction_id?: string | null;
            /** @description Details about payments collected offline. */
            offline?: components["schemas"]["payment_method_details_card_present_offline"] | null;
            /** @description Defines whether the authorized amount can be over-captured or not */
            overcapture_supported: boolean;
            /** @description EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
            preferred_locales?: string[] | null;
            /**
             * @description How card details were read in this transaction.
             * @enum {string|null}
             */
            read_method?: "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2" | null;
            /** @description A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
            receipt?: components["schemas"]["payment_method_details_card_present_receipt"] | null;
            wallet?: components["schemas"]["payment_flows_private_payment_methods_card_present_common_wallet"];
        };
        /** payment_method_details_card_present_offline */
        payment_method_details_card_present_offline: {
            /**
             * Format: unix-time
             * @description Time at which the payment was collected while offline
             */
            stored_at?: number | null;
            /**
             * @description The method used to process this payment method offline. Only deferred is allowed.
             * @enum {string|null}
             */
            type?: "deferred" | null;
        };
        /** payment_method_details_card_present_receipt */
        payment_method_details_card_present_receipt: {
            /**
             * @description The type of account being debited or credited
             * @enum {string}
             */
            account_type?: "checking" | "credit" | "prepaid" | "unknown";
            /** @description EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
            application_cryptogram?: string | null;
            /** @description Mnenomic of the Application Identifier. */
            application_preferred_name?: string | null;
            /** @description Identifier for this transaction. */
            authorization_code?: string | null;
            /** @description EMV tag 8A. A code returned by the card issuer. */
            authorization_response_code?: string | null;
            /** @description Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`. */
            cardholder_verification_method?: string | null;
            /** @description EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
            dedicated_file_name?: string | null;
            /** @description The outcome of a series of EMV functions performed by the card reader. */
            terminal_verification_results?: string | null;
            /** @description An indication of various EMV functions performed during the transaction. */
            transaction_status_information?: string | null;
        };
        /** payment_method_details_card_wallet */
        payment_method_details_card_wallet: {
            amex_express_checkout?: components["schemas"]["payment_method_details_card_wallet_amex_express_checkout"];
            apple_pay?: components["schemas"]["payment_method_details_card_wallet_apple_pay"];
            /** @description (For tokenized numbers only.) The last four digits of the device account number. */
            dynamic_last4?: string | null;
            google_pay?: components["schemas"]["payment_method_details_card_wallet_google_pay"];
            link?: components["schemas"]["payment_method_details_card_wallet_link"];
            masterpass?: components["schemas"]["payment_method_details_card_wallet_masterpass"];
            samsung_pay?: components["schemas"]["payment_method_details_card_wallet_samsung_pay"];
            /**
             * @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
             * @enum {string}
             */
            type: "amex_express_checkout" | "apple_pay" | "google_pay" | "link" | "masterpass" | "samsung_pay" | "visa_checkout";
            visa_checkout?: components["schemas"]["payment_method_details_card_wallet_visa_checkout"];
        };
        /** payment_method_details_card_wallet_amex_express_checkout */
        payment_method_details_card_wallet_amex_express_checkout: Record<string, never>;
        /** payment_method_details_card_wallet_apple_pay */
        payment_method_details_card_wallet_apple_pay: Record<string, never>;
        /** payment_method_details_card_wallet_google_pay */
        payment_method_details_card_wallet_google_pay: Record<string, never>;
        /** payment_method_details_card_wallet_link */
        payment_method_details_card_wallet_link: Record<string, never>;
        /** payment_method_details_card_wallet_masterpass */
        payment_method_details_card_wallet_masterpass: {
            /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            billing_address?: components["schemas"]["address"] | null;
            /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            email?: string | null;
            /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            name?: string | null;
            /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            shipping_address?: components["schemas"]["address"] | null;
        };
        /** payment_method_details_card_wallet_samsung_pay */
        payment_method_details_card_wallet_samsung_pay: Record<string, never>;
        /** payment_method_details_card_wallet_visa_checkout */
        payment_method_details_card_wallet_visa_checkout: {
            /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            billing_address?: components["schemas"]["address"] | null;
            /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            email?: string | null;
            /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            name?: string | null;
            /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            shipping_address?: components["schemas"]["address"] | null;
        };
        /** payment_method_details_cashapp */
        payment_method_details_cashapp: {
            /** @description A unique and immutable identifier assigned by Cash App to every buyer. */
            buyer_id?: string | null;
            /** @description A public identifier for buyers using Cash App. */
            cashtag?: string | null;
        };
        /** payment_method_details_customer_balance */
        payment_method_details_customer_balance: Record<string, never>;
        /** payment_method_details_eps */
        payment_method_details_eps: {
            /**
             * @description The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
             * @enum {string|null}
             */
            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau" | null;
            /** @description Owner's verified full name. Values are verified or provided by EPS directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated.
             *     EPS rarely provides this information so the attribute is usually empty. */
            verified_name?: string | null;
        };
        /** payment_method_details_fpx */
        payment_method_details_fpx: {
            /**
             * @description The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.
             * @enum {string}
             */
            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
            /** @description Unique transaction id generated by FPX for every request from the merchant */
            transaction_id?: string | null;
        };
        /** payment_method_details_giropay */
        payment_method_details_giropay: {
            /** @description Bank code of bank associated with the bank account. */
            bank_code?: string | null;
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Bank Identifier Code of the bank associated with the bank account. */
            bic?: string | null;
            /** @description Owner's verified full name. Values are verified or provided by Giropay directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated.
             *     Giropay rarely provides this information so the attribute is usually empty. */
            verified_name?: string | null;
        };
        /** payment_method_details_grabpay */
        payment_method_details_grabpay: {
            /** @description Unique transaction id generated by GrabPay */
            transaction_id?: string | null;
        };
        /** payment_method_details_ideal */
        payment_method_details_ideal: {
            /**
             * @description The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
             * @enum {string|null}
             */
            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe" | null;
            /**
             * @description The Bank Identifier Code of the customer's bank.
             * @enum {string|null}
             */
            bic?: "ABNANL2A" | "ASNBNL21" | "BITSNL2A" | "BUNQNL2A" | "FVLBNL22" | "HANDNL2A" | "INGBNL2A" | "KNABNL2H" | "MOYONL21" | "NNBANL2G" | "NTSBDEB1" | "RABONL2U" | "RBRBNL21" | "REVOIE23" | "REVOLT21" | "SNSBNL2A" | "TRIONL2U" | null;
            /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            /** @description Last four characters of the IBAN. */
            iban_last4?: string | null;
            /** @description Owner's verified full name. Values are verified or provided by iDEAL directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            verified_name?: string | null;
        };
        /** payment_method_details_interac_present */
        payment_method_details_interac_present: {
            /** @description Card brand. Can be `interac`, `mastercard` or `visa`. */
            brand?: string | null;
            /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
            cardholder_name?: string | null;
            /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
            country?: string | null;
            /** @description A high-level description of the type of cards issued in this range. */
            description?: string | null;
            /** @description Authorization response cryptogram. */
            emv_auth_data?: string | null;
            /** @description Two-digit number representing the card's expiration month. */
            exp_month: number;
            /** @description Four-digit number representing the card's expiration year. */
            exp_year: number;
            /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
             *
             *     *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.* */
            fingerprint?: string | null;
            /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
            funding?: string | null;
            /** @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
            generated_card?: string | null;
            /** @description The name of the card's issuing bank. */
            issuer?: string | null;
            /** @description The last four digits of the card. */
            last4?: string | null;
            /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
            network?: string | null;
            /** @description This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. The first three digits of the Trace ID is the Financial Network Code, the next 6 digits is the Banknet Reference Number, and the last 4 digits represent the date (MM/DD). This field will be available for successful Visa, Mastercard, or American Express transactions and always null for other card brands. */
            network_transaction_id?: string | null;
            /** @description EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
            preferred_locales?: string[] | null;
            /**
             * @description How card details were read in this transaction.
             * @enum {string|null}
             */
            read_method?: "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2" | null;
            /** @description A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
            receipt?: components["schemas"]["payment_method_details_interac_present_receipt"] | null;
        };
        /** payment_method_details_interac_present_receipt */
        payment_method_details_interac_present_receipt: {
            /**
             * @description The type of account being debited or credited
             * @enum {string}
             */
            account_type?: "checking" | "savings" | "unknown";
            /** @description EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
            application_cryptogram?: string | null;
            /** @description Mnenomic of the Application Identifier. */
            application_preferred_name?: string | null;
            /** @description Identifier for this transaction. */
            authorization_code?: string | null;
            /** @description EMV tag 8A. A code returned by the card issuer. */
            authorization_response_code?: string | null;
            /** @description Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`. */
            cardholder_verification_method?: string | null;
            /** @description EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
            dedicated_file_name?: string | null;
            /** @description The outcome of a series of EMV functions performed by the card reader. */
            terminal_verification_results?: string | null;
            /** @description An indication of various EMV functions performed during the transaction. */
            transaction_status_information?: string | null;
        };
        /** payment_method_details_kakao_pay */
        payment_method_details_kakao_pay: {
            /** @description A unique identifier for the buyer as determined by the local payment processor. */
            buyer_id?: string | null;
        };
        /** payment_method_details_klarna */
        payment_method_details_klarna: {
            /** @description The payer details for this transaction. */
            payer_details?: components["schemas"]["klarna_payer_details"] | null;
            /** @description The Klarna payment method used for this transaction.
             *     Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments` */
            payment_method_category?: string | null;
            /** @description Preferred language of the Klarna authorization page that the customer is redirected to.
             *     Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `cs-CZ`, `en-CZ`, `ro-RO`, `en-RO`, `el-GR`, `en-GR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH` */
            preferred_locale?: string | null;
        };
        /** payment_method_details_konbini */
        payment_method_details_konbini: {
            /** @description If the payment succeeded, this contains the details of the convenience store where the payment was completed. */
            store?: components["schemas"]["payment_method_details_konbini_store"] | null;
        };
        /** payment_method_details_konbini_store */
        payment_method_details_konbini_store: {
            /**
             * @description The name of the convenience store chain where the payment was completed.
             * @enum {string|null}
             */
            chain?: "familymart" | "lawson" | "ministop" | "seicomart" | null;
        };
        /** payment_method_details_kr_card */
        payment_method_details_kr_card: {
            /**
             * @description The local credit or debit card brand.
             * @enum {string|null}
             */
            brand?: "bc" | "citi" | "hana" | "hyundai" | "jeju" | "jeonbuk" | "kakaobank" | "kbank" | "kdbbank" | "kookmin" | "kwangju" | "lotte" | "mg" | "nh" | "post" | "samsung" | "savingsbank" | "shinhan" | "shinhyup" | "suhyup" | "tossbank" | "woori" | null;
            /** @description A unique identifier for the buyer as determined by the local payment processor. */
            buyer_id?: string | null;
            /** @description The last four digits of the card. This may not be present for American Express cards. */
            last4?: string | null;
        };
        /** payment_method_details_link */
        payment_method_details_link: {
            /** @description Two-letter ISO code representing the funding source country beneath the Link payment.
             *     You could use this attribute to get a sense of international fees. */
            country?: string | null;
        };
        /** payment_method_details_mobilepay */
        payment_method_details_mobilepay: {
            /** @description Internal card details */
            card?: components["schemas"]["internal_card"] | null;
        };
        /** payment_method_details_multibanco */
        payment_method_details_multibanco: {
            /** @description Entity number associated with this Multibanco payment. */
            entity?: string | null;
            /** @description Reference number associated with this Multibanco payment. */
            reference?: string | null;
        };
        /** payment_method_details_naver_pay */
        payment_method_details_naver_pay: {
            /** @description A unique identifier for the buyer as determined by the local payment processor. */
            buyer_id?: string | null;
        };
        /** payment_method_details_oxxo */
        payment_method_details_oxxo: {
            /** @description OXXO reference number */
            number?: string | null;
        };
        /** payment_method_details_p24 */
        payment_method_details_p24: {
            /**
             * @description The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `velobank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
             * @enum {string|null}
             */
            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank" | null;
            /** @description Unique reference for this Przelewy24 payment. */
            reference?: string | null;
            /** @description Owner's verified full name. Values are verified or provided by Przelewy24 directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated.
             *     Przelewy24 rarely provides this information so the attribute is usually empty. */
            verified_name?: string | null;
        };
        /** payment_method_details_payco */
        payment_method_details_payco: {
            /** @description A unique identifier for the buyer as determined by the local payment processor. */
            buyer_id?: string | null;
        };
        /** payment_method_details_paynow */
        payment_method_details_paynow: {
            /** @description Reference number associated with this PayNow payment */
            reference?: string | null;
        };
        /** payment_method_details_paypal */
        payment_method_details_paypal: {
            /** @description Owner's email. Values are provided by PayPal directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            payer_email?: string | null;
            /** @description PayPal account PayerID. This identifier uniquely identifies the PayPal customer. */
            payer_id?: string | null;
            /** @description Owner's full name. Values provided by PayPal directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            payer_name?: string | null;
            /** @description The level of protection offered as defined by PayPal Seller Protection for Merchants, for this transaction. */
            seller_protection?: components["schemas"]["paypal_seller_protection"] | null;
            /** @description A unique ID generated by PayPal for this transaction. */
            transaction_id?: string | null;
        };
        /** payment_method_details_pix */
        payment_method_details_pix: {
            /** @description Unique transaction id generated by BCB */
            bank_transaction_id?: string | null;
        };
        /** payment_method_details_promptpay */
        payment_method_details_promptpay: {
            /** @description Bill reference generated by PromptPay */
            reference?: string | null;
        };
        /** payment_method_details_revolut_pay */
        payment_method_details_revolut_pay: Record<string, never>;
        /** payment_method_details_samsung_pay */
        payment_method_details_samsung_pay: {
            /** @description A unique identifier for the buyer as determined by the local payment processor. */
            buyer_id?: string | null;
        };
        /** payment_method_details_sepa_debit */
        payment_method_details_sepa_debit: {
            /** @description Bank code of bank associated with the bank account. */
            bank_code?: string | null;
            /** @description Branch code of bank associated with the bank account. */
            branch_code?: string | null;
            /** @description Two-letter ISO code representing the country the bank account is located in. */
            country?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four characters of the IBAN. */
            last4?: string | null;
            /** @description Find the ID of the mandate used for this payment under the [payment_method_details.sepa_debit.mandate](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-sepa_debit-mandate) property on the Charge. Use this mandate ID to [retrieve the Mandate](https://stripe.com/docs/api/mandates/retrieve). */
            mandate?: string | null;
        };
        /** payment_method_details_sofort */
        payment_method_details_sofort: {
            /** @description Bank code of bank associated with the bank account. */
            bank_code?: string | null;
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Bank Identifier Code of the bank associated with the bank account. */
            bic?: string | null;
            /** @description Two-letter ISO code representing the country the bank account is located in. */
            country?: string | null;
            /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            /** @description Last four characters of the IBAN. */
            iban_last4?: string | null;
            /**
             * @description Preferred language of the SOFORT authorization page that the customer is redirected to.
             *     Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
             * @enum {string|null}
             */
            preferred_language?: "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" | null;
            /** @description Owner's verified full name. Values are verified or provided by SOFORT directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            verified_name?: string | null;
        };
        /** payment_method_details_stripe_account */
        payment_method_details_stripe_account: Record<string, never>;
        /** payment_method_details_swish */
        payment_method_details_swish: {
            /** @description Uniquely identifies the payer's Swish account. You can use this attribute to check whether two Swish transactions were paid for by the same payer */
            fingerprint?: string | null;
            /** @description Payer bank reference number for the payment */
            payment_reference?: string | null;
            /** @description The last four digits of the Swish account phone number */
            verified_phone_last4?: string | null;
        };
        /** payment_method_details_twint */
        payment_method_details_twint: Record<string, never>;
        /** payment_method_details_us_bank_account */
        payment_method_details_us_bank_account: {
            /**
             * @description Account holder type: individual or company.
             * @enum {string|null}
             */
            account_holder_type?: "company" | "individual" | null;
            /**
             * @description Account type: checkings or savings. Defaults to checking if omitted.
             * @enum {string|null}
             */
            account_type?: "checking" | "savings" | null;
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description ID of the mandate used to make this payment. */
            mandate?: string | components["schemas"]["mandate"];
            /** @description Reference number to locate ACH payments with customer's bank. */
            payment_reference?: string | null;
            /** @description Routing number of the bank account. */
            routing_number?: string | null;
        };
        /** payment_method_details_wechat */
        payment_method_details_wechat: Record<string, never>;
        /** payment_method_details_wechat_pay */
        payment_method_details_wechat_pay: {
            /** @description Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same. */
            fingerprint?: string | null;
            /** @description Transaction ID of this particular WeChat Pay transaction. */
            transaction_id?: string | null;
        };
        /** payment_method_details_zip */
        payment_method_details_zip: Record<string, never>;
        /**
         * PaymentMethodDomainResourcePaymentMethodDomain
         * @description A payment method domain represents a web domain that you have registered with Stripe.
         *     Stripe Elements use registered payment method domains to control where certain payment methods are shown.
         *
         *     Related guide: [Payment method domains](https://stripe.com/docs/payments/payment-methods/pmd-registration).
         */
        payment_method_domain: {
            amazon_pay: components["schemas"]["payment_method_domain_resource_payment_method_status"];
            apple_pay: components["schemas"]["payment_method_domain_resource_payment_method_status"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The domain name that this payment method domain object represents. */
            domain_name: string;
            /** @description Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements. */
            enabled: boolean;
            google_pay: components["schemas"]["payment_method_domain_resource_payment_method_status"];
            /** @description Unique identifier for the object. */
            id: string;
            link: components["schemas"]["payment_method_domain_resource_payment_method_status"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "payment_method_domain";
            paypal: components["schemas"]["payment_method_domain_resource_payment_method_status"];
        };
        /**
         * PaymentMethodDomainResourcePaymentMethodStatus
         * @description Indicates the status of a specific payment method on a payment method domain.
         */
        payment_method_domain_resource_payment_method_status: {
            /**
             * @description The status of the payment method on the domain.
             * @enum {string}
             */
            status: "active" | "inactive";
            status_details?: components["schemas"]["payment_method_domain_resource_payment_method_status_details"];
        };
        /**
         * PaymentMethodDomainResourcePaymentMethodStatusDetails
         * @description Contains additional details about the status of a payment method for a specific payment method domain.
         */
        payment_method_domain_resource_payment_method_status_details: {
            /** @description The error message associated with the status of the payment method on the domain. */
            error_message: string;
        };
        /** payment_method_eps */
        payment_method_eps: {
            /**
             * @description The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
             * @enum {string|null}
             */
            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau" | null;
        };
        /** payment_method_fpx */
        payment_method_fpx: {
            /**
             * @description The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.
             * @enum {string}
             */
            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
        };
        /** payment_method_giropay */
        payment_method_giropay: Record<string, never>;
        /** payment_method_grabpay */
        payment_method_grabpay: Record<string, never>;
        /** payment_method_ideal */
        payment_method_ideal: {
            /**
             * @description The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
             * @enum {string|null}
             */
            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe" | null;
            /**
             * @description The Bank Identifier Code of the customer's bank, if the bank was provided.
             * @enum {string|null}
             */
            bic?: "ABNANL2A" | "ASNBNL21" | "BITSNL2A" | "BUNQNL2A" | "FVLBNL22" | "HANDNL2A" | "INGBNL2A" | "KNABNL2H" | "MOYONL21" | "NNBANL2G" | "NTSBDEB1" | "RABONL2U" | "RBRBNL21" | "REVOIE23" | "REVOLT21" | "SNSBNL2A" | "TRIONL2U" | null;
        };
        /** payment_method_interac_present */
        payment_method_interac_present: {
            /** @description Card brand. Can be `interac`, `mastercard` or `visa`. */
            brand?: string | null;
            /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
            cardholder_name?: string | null;
            /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
            country?: string | null;
            /** @description A high-level description of the type of cards issued in this range. */
            description?: string | null;
            /** @description Two-digit number representing the card's expiration month. */
            exp_month: number;
            /** @description Four-digit number representing the card's expiration year. */
            exp_year: number;
            /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
             *
             *     *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.* */
            fingerprint?: string | null;
            /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
            funding?: string | null;
            /** @description The name of the card's issuing bank. */
            issuer?: string | null;
            /** @description The last four digits of the card. */
            last4?: string | null;
            /** @description Contains information about card networks that can be used to process the payment. */
            networks?: components["schemas"]["payment_method_card_present_networks"] | null;
            /** @description EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
            preferred_locales?: string[] | null;
            /**
             * @description How card details were read in this transaction.
             * @enum {string|null}
             */
            read_method?: "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2" | null;
        };
        /** payment_method_kakao_pay */
        payment_method_kakao_pay: Record<string, never>;
        /** payment_method_klarna */
        payment_method_klarna: {
            /** @description The customer's date of birth, if provided. */
            dob?: components["schemas"]["payment_flows_private_payment_methods_klarna_dob"] | null;
        };
        /** payment_method_konbini */
        payment_method_konbini: Record<string, never>;
        /** payment_method_kr_card */
        payment_method_kr_card: {
            /**
             * @description The local credit or debit card brand.
             * @enum {string|null}
             */
            brand?: "bc" | "citi" | "hana" | "hyundai" | "jeju" | "jeonbuk" | "kakaobank" | "kbank" | "kdbbank" | "kookmin" | "kwangju" | "lotte" | "mg" | "nh" | "post" | "samsung" | "savingsbank" | "shinhan" | "shinhyup" | "suhyup" | "tossbank" | "woori" | null;
            /** @description The last four digits of the card. This may not be present for American Express cards. */
            last4?: string | null;
        };
        /** payment_method_link */
        payment_method_link: {
            /** @description Account owner's email address. */
            email?: string | null;
        };
        /** payment_method_mobilepay */
        payment_method_mobilepay: Record<string, never>;
        /** payment_method_multibanco */
        payment_method_multibanco: Record<string, never>;
        /** payment_method_naver_pay */
        payment_method_naver_pay: {
            /**
             * @description Whether to fund this transaction with Naver Pay points or a card.
             * @enum {string}
             */
            funding: "card" | "points";
        };
        /** payment_method_options_affirm */
        payment_method_options_affirm: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /** @description Preferred language of the Affirm authorization page that the customer is redirected to. */
            preferred_locale?: string;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_afterpay_clearpay */
        payment_method_options_afterpay_clearpay: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /** @description An internal identifier or reference that this payment corresponds to. You must limit the identifier to 128 characters, and it can only contain letters, numbers, underscores, backslashes, and dashes.
             *     This field differs from the statement descriptor and item name. */
            reference?: string | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_alipay */
        payment_method_options_alipay: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** payment_method_options_alma */
        payment_method_options_alma: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
        };
        /** payment_method_options_amazon_pay */
        payment_method_options_amazon_pay: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** payment_method_options_bancontact */
        payment_method_options_bancontact: {
            /**
             * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
             * @enum {string}
             */
            preferred_language: "de" | "en" | "fr" | "nl";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** payment_method_options_boleto */
        payment_method_options_boleto: {
            /** @description The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
            expires_after_days: number;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        /** payment_method_options_card_installments */
        payment_method_options_card_installments: {
            /** @description Installment plans that may be selected for this PaymentIntent. */
            available_plans?: components["schemas"]["payment_method_details_card_installments_plan"][] | null;
            /** @description Whether Installments are enabled for this PaymentIntent. */
            enabled: boolean;
            /** @description Installment plan selected for this PaymentIntent. */
            plan?: components["schemas"]["payment_method_details_card_installments_plan"] | null;
        };
        /** payment_method_options_card_mandate_options */
        payment_method_options_card_mandate_options: {
            /** @description Amount to be charged for future payments. */
            amount: number;
            /**
             * @description One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
             * @enum {string}
             */
            amount_type: "fixed" | "maximum";
            /** @description A description of the mandate or subscription that is meant to be displayed to the customer. */
            description?: string | null;
            /**
             * Format: unix-time
             * @description End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
             */
            end_date?: number | null;
            /**
             * @description Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
             * @enum {string}
             */
            interval: "day" | "month" | "sporadic" | "week" | "year";
            /** @description The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`. */
            interval_count?: number | null;
            /** @description Unique identifier for the mandate or subscription. */
            reference: string;
            /**
             * Format: unix-time
             * @description Start date of the mandate or subscription. Start date should not be lesser than yesterday.
             */
            start_date: number;
            /** @description Specifies the type of mandates supported. Possible values are `india`. */
            supported_types?: "india"[] | null;
        };
        /** payment_method_options_card_present */
        payment_method_options_card_present: {
            /** @description Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity) */
            request_extended_authorization?: boolean | null;
            /** @description Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support. */
            request_incremental_authorization_support?: boolean | null;
            routing?: components["schemas"]["payment_method_options_card_present_routing"];
        };
        /** payment_method_options_card_present_routing */
        payment_method_options_card_present_routing: {
            /**
             * @description Requested routing priority
             * @enum {string|null}
             */
            requested_priority?: "domestic" | "international" | null;
        };
        /** payment_method_options_cashapp */
        payment_method_options_cashapp: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        /** payment_method_options_customer_balance */
        payment_method_options_customer_balance: {
            bank_transfer?: components["schemas"]["payment_method_options_customer_balance_bank_transfer"];
            /**
             * @description The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
             * @enum {string|null}
             */
            funding_type?: "bank_transfer" | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_customer_balance_bank_transfer */
        payment_method_options_customer_balance_bank_transfer: {
            eu_bank_transfer?: components["schemas"]["payment_method_options_customer_balance_eu_bank_account"];
            /** @description List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
             *
             *     Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`. */
            requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
            /**
             * @description The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
             * @enum {string|null}
             */
            type?: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer" | null;
        };
        /** payment_method_options_customer_balance_eu_bank_account */
        payment_method_options_customer_balance_eu_bank_account: {
            /**
             * @description The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.
             * @enum {string}
             */
            country: "BE" | "DE" | "ES" | "FR" | "IE" | "NL";
        };
        /** payment_method_options_fpx */
        payment_method_options_fpx: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_giropay */
        payment_method_options_giropay: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_grabpay */
        payment_method_options_grabpay: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_ideal */
        payment_method_options_ideal: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** payment_method_options_interac_present */
        payment_method_options_interac_present: Record<string, never>;
        /** payment_method_options_klarna */
        payment_method_options_klarna: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /** @description Preferred locale of the Klarna checkout page that the customer is redirected to. */
            preferred_locale?: string | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_konbini */
        payment_method_options_konbini: {
            /** @description An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores. */
            confirmation_number?: string | null;
            /** @description The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST. */
            expires_after_days?: number | null;
            /**
             * Format: unix-time
             * @description The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.
             */
            expires_at?: number | null;
            /** @description A product descriptor of up to 22 characters, which will appear to customers at the convenience store. */
            product_description?: string | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_kr_card */
        payment_method_options_kr_card: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** payment_method_options_multibanco */
        payment_method_options_multibanco: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_oxxo */
        payment_method_options_oxxo: {
            /** @description The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
            expires_after_days: number;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_p24 */
        payment_method_options_p24: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_paynow */
        payment_method_options_paynow: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_paypal */
        payment_method_options_paypal: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /** @description Preferred locale of the PayPal checkout page that the customer is redirected to. */
            preferred_locale?: string | null;
            /** @description A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID. */
            reference?: string | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** payment_method_options_pix */
        payment_method_options_pix: {
            /** @description The number of seconds (between 10 and 1209600) after which Pix payment will expire. */
            expires_after_seconds?: number | null;
            /** @description The timestamp at which the Pix expires. */
            expires_at?: number | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_promptpay */
        payment_method_options_promptpay: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_revolut_pay */
        payment_method_options_revolut_pay: {
            /**
             * @description Controls when the funds will be captured from the customer's account.
             * @enum {string}
             */
            capture_method?: "manual";
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** payment_method_options_sofort */
        payment_method_options_sofort: {
            /**
             * @description Preferred language of the SOFORT authorization page that the customer is redirected to.
             * @enum {string|null}
             */
            preferred_language?: "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none" | "off_session";
        };
        /** payment_method_options_twint */
        payment_method_options_twint: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_us_bank_account_mandate_options */
        payment_method_options_us_bank_account_mandate_options: {
            /**
             * @description Mandate collection method
             * @enum {string}
             */
            collection_method?: "paper";
        };
        /** payment_method_options_wechat_pay */
        payment_method_options_wechat_pay: {
            /** @description The app ID registered with WeChat Pay. Only required when client is ios or android. */
            app_id?: string | null;
            /**
             * @description The client type that the end customer will pay from
             * @enum {string|null}
             */
            client?: "android" | "ios" | "web" | null;
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_options_zip */
        payment_method_options_zip: {
            /**
             * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
             *
             *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
             *
             *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
             *
             *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
             * @enum {string}
             */
            setup_future_usage?: "none";
        };
        /** payment_method_oxxo */
        payment_method_oxxo: Record<string, never>;
        /** payment_method_p24 */
        payment_method_p24: {
            /**
             * @description The customer's bank, if provided.
             * @enum {string|null}
             */
            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank" | null;
        };
        /** payment_method_payco */
        payment_method_payco: Record<string, never>;
        /** payment_method_paynow */
        payment_method_paynow: Record<string, never>;
        /** payment_method_paypal */
        payment_method_paypal: {
            /** @description Owner's email. Values are provided by PayPal directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            payer_email?: string | null;
            /** @description PayPal account PayerID. This identifier uniquely identifies the PayPal customer. */
            payer_id?: string | null;
        };
        /** payment_method_pix */
        payment_method_pix: Record<string, never>;
        /** payment_method_promptpay */
        payment_method_promptpay: Record<string, never>;
        /** payment_method_revolut_pay */
        payment_method_revolut_pay: Record<string, never>;
        /** payment_method_samsung_pay */
        payment_method_samsung_pay: Record<string, never>;
        /** payment_method_sepa_debit */
        payment_method_sepa_debit: {
            /** @description Bank code of bank associated with the bank account. */
            bank_code?: string | null;
            /** @description Branch code of bank associated with the bank account. */
            branch_code?: string | null;
            /** @description Two-letter ISO code representing the country the bank account is located in. */
            country?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Information about the object that generated this PaymentMethod. */
            generated_from?: components["schemas"]["sepa_debit_generated_from"] | null;
            /** @description Last four characters of the IBAN. */
            last4?: string | null;
        };
        /** payment_method_sofort */
        payment_method_sofort: {
            /** @description Two-letter ISO code representing the country the bank account is located in. */
            country?: string | null;
        };
        /** payment_method_swish */
        payment_method_swish: Record<string, never>;
        /** payment_method_twint */
        payment_method_twint: Record<string, never>;
        /** payment_method_us_bank_account */
        payment_method_us_bank_account: {
            /**
             * @description Account holder type: individual or company.
             * @enum {string|null}
             */
            account_holder_type?: "company" | "individual" | null;
            /**
             * @description Account type: checkings or savings. Defaults to checking if omitted.
             * @enum {string|null}
             */
            account_type?: "checking" | "savings" | null;
            /** @description The name of the bank. */
            bank_name?: string | null;
            /** @description The ID of the Financial Connections Account used to create the payment method. */
            financial_connections_account?: string | null;
            /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
            fingerprint?: string | null;
            /** @description Last four digits of the bank account number. */
            last4?: string | null;
            /** @description Contains information about US bank account networks that can be used. */
            networks?: components["schemas"]["us_bank_account_networks"] | null;
            /** @description Routing number of the bank account. */
            routing_number?: string | null;
            /** @description Contains information about the future reusability of this PaymentMethod. */
            status_details?: components["schemas"]["payment_method_us_bank_account_status_details"] | null;
        };
        /** payment_method_us_bank_account_blocked */
        payment_method_us_bank_account_blocked: {
            /**
             * @description The ACH network code that resulted in this block.
             * @enum {string|null}
             */
            network_code?: "R02" | "R03" | "R04" | "R05" | "R07" | "R08" | "R10" | "R11" | "R16" | "R20" | "R29" | "R31" | null;
            /**
             * @description The reason why this PaymentMethod's fingerprint has been blocked
             * @enum {string|null}
             */
            reason?: "bank_account_closed" | "bank_account_frozen" | "bank_account_invalid_details" | "bank_account_restricted" | "bank_account_unusable" | "debit_not_authorized" | null;
        };
        /** payment_method_us_bank_account_status_details */
        payment_method_us_bank_account_status_details: {
            blocked?: components["schemas"]["payment_method_us_bank_account_blocked"];
        };
        /** payment_method_wechat_pay */
        payment_method_wechat_pay: Record<string, never>;
        /** payment_method_zip */
        payment_method_zip: Record<string, never>;
        /** PaymentPagesCheckoutSessionAdaptivePricing */
        payment_pages_checkout_session_adaptive_pricing: {
            /** @description Whether Adaptive Pricing is enabled. */
            enabled: boolean;
        };
        /** PaymentPagesCheckoutSessionAfterExpiration */
        payment_pages_checkout_session_after_expiration: {
            /** @description When set, configuration used to recover the Checkout Session on expiry. */
            recovery?: components["schemas"]["payment_pages_checkout_session_after_expiration_recovery"] | null;
        };
        /** PaymentPagesCheckoutSessionAfterExpirationRecovery */
        payment_pages_checkout_session_after_expiration_recovery: {
            /** @description Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false` */
            allow_promotion_codes: boolean;
            /** @description If `true`, a recovery url will be generated to recover this Checkout Session if it
             *     expires before a transaction is completed. It will be attached to the
             *     Checkout Session object upon expiration. */
            enabled: boolean;
            /**
             * Format: unix-time
             * @description The timestamp at which the recovery URL will expire.
             */
            expires_at?: number | null;
            /** @description URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session */
            url?: string | null;
        };
        /** PaymentPagesCheckoutSessionAutomaticTax */
        payment_pages_checkout_session_automatic_tax: {
            /** @description Indicates whether automatic tax is enabled for the session */
            enabled: boolean;
            /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
            liability?: components["schemas"]["connect_account_reference"] | null;
            /**
             * @description The status of the most recent automated tax calculation for this session.
             * @enum {string|null}
             */
            status?: "complete" | "failed" | "requires_location_inputs" | null;
        };
        /** PaymentPagesCheckoutSessionConsent */
        payment_pages_checkout_session_consent: {
            /**
             * @description If `opt_in`, the customer consents to receiving promotional communications
             *     from the merchant about this Checkout Session.
             * @enum {string|null}
             */
            promotions?: "opt_in" | "opt_out" | null;
            /**
             * @description If `accepted`, the customer in this Checkout Session has agreed to the merchant's terms of service.
             * @enum {string|null}
             */
            terms_of_service?: "accepted" | null;
        };
        /** PaymentPagesCheckoutSessionConsentCollection */
        payment_pages_checkout_session_consent_collection: {
            /** @description If set to `hidden`, it will hide legal text related to the reuse of a payment method. */
            payment_method_reuse_agreement?: components["schemas"]["payment_pages_checkout_session_payment_method_reuse_agreement"] | null;
            /**
             * @description If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
             *     Session will determine whether to display an option to opt into promotional communication
             *     from the merchant depending on the customer's locale. Only available to US merchants.
             * @enum {string|null}
             */
            promotions?: "auto" | "none" | null;
            /**
             * @description If set to `required`, it requires customers to accept the terms of service before being able to pay.
             * @enum {string|null}
             */
            terms_of_service?: "none" | "required" | null;
        };
        /** PaymentPagesCheckoutSessionCurrencyConversion */
        payment_pages_checkout_session_currency_conversion: {
            /** @description Total of all items in source currency before discounts or taxes are applied. */
            amount_subtotal: number;
            /** @description Total of all items in source currency after discounts and taxes are applied. */
            amount_total: number;
            /**
             * Format: decimal
             * @description Exchange rate used to convert source currency amounts to customer currency amounts
             */
            fx_rate: string;
            /** @description Creation currency of the CheckoutSession before localization */
            source_currency: string;
        };
        /** PaymentPagesCheckoutSessionCustomFields */
        payment_pages_checkout_session_custom_fields: {
            dropdown?: components["schemas"]["payment_pages_checkout_session_custom_fields_dropdown"];
            /** @description String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters. */
            key: string;
            label: components["schemas"]["payment_pages_checkout_session_custom_fields_label"];
            numeric?: components["schemas"]["payment_pages_checkout_session_custom_fields_numeric"];
            /** @description Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`. */
            optional: boolean;
            text?: components["schemas"]["payment_pages_checkout_session_custom_fields_text"];
            /**
             * @description The type of the field.
             * @enum {string}
             */
            type: "dropdown" | "numeric" | "text";
        };
        /** PaymentPagesCheckoutSessionCustomFieldsDropdown */
        payment_pages_checkout_session_custom_fields_dropdown: {
            /** @description The value that will pre-fill on the payment page. */
            default_value?: string | null;
            /** @description The options available for the customer to select. Up to 200 options allowed. */
            options: components["schemas"]["payment_pages_checkout_session_custom_fields_option"][];
            /** @description The option selected by the customer. This will be the `value` for the option. */
            value?: string | null;
        };
        /** PaymentPagesCheckoutSessionCustomFieldsLabel */
        payment_pages_checkout_session_custom_fields_label: {
            /** @description Custom text for the label, displayed to the customer. Up to 50 characters. */
            custom?: string | null;
            /**
             * @description The type of the label.
             * @enum {string}
             */
            type: "custom";
        };
        /** PaymentPagesCheckoutSessionCustomFieldsNumeric */
        payment_pages_checkout_session_custom_fields_numeric: {
            /** @description The value that will pre-fill the field on the payment page. */
            default_value?: string | null;
            /** @description The maximum character length constraint for the customer's input. */
            maximum_length?: number | null;
            /** @description The minimum character length requirement for the customer's input. */
            minimum_length?: number | null;
            /** @description The value entered by the customer, containing only digits. */
            value?: string | null;
        };
        /** PaymentPagesCheckoutSessionCustomFieldsOption */
        payment_pages_checkout_session_custom_fields_option: {
            /** @description The label for the option, displayed to the customer. Up to 100 characters. */
            label: string;
            /** @description The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters. */
            value: string;
        };
        /** PaymentPagesCheckoutSessionCustomFieldsText */
        payment_pages_checkout_session_custom_fields_text: {
            /** @description The value that will pre-fill the field on the payment page. */
            default_value?: string | null;
            /** @description The maximum character length constraint for the customer's input. */
            maximum_length?: number | null;
            /** @description The minimum character length requirement for the customer's input. */
            minimum_length?: number | null;
            /** @description The value entered by the customer. */
            value?: string | null;
        };
        /** PaymentPagesCheckoutSessionCustomText */
        payment_pages_checkout_session_custom_text: {
            /** @description Custom text that should be displayed after the payment confirmation button. */
            after_submit?: components["schemas"]["payment_pages_checkout_session_custom_text_position"] | null;
            /** @description Custom text that should be displayed alongside shipping address collection. */
            shipping_address?: components["schemas"]["payment_pages_checkout_session_custom_text_position"] | null;
            /** @description Custom text that should be displayed alongside the payment confirmation button. */
            submit?: components["schemas"]["payment_pages_checkout_session_custom_text_position"] | null;
            /** @description Custom text that should be displayed in place of the default terms of service agreement text. */
            terms_of_service_acceptance?: components["schemas"]["payment_pages_checkout_session_custom_text_position"] | null;
        };
        /** PaymentPagesCheckoutSessionCustomTextPosition */
        payment_pages_checkout_session_custom_text_position: {
            /** @description Text may be up to 1200 characters in length. */
            message: string;
        };
        /** PaymentPagesCheckoutSessionCustomerDetails */
        payment_pages_checkout_session_customer_details: {
            /** @description The customer's address after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022. */
            address?: components["schemas"]["address"] | null;
            /** @description The email associated with the Customer, if one exists, on the Checkout Session after a completed Checkout Session or at time of session expiry.
             *     Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form. */
            email?: string | null;
            /** @description The customer's name after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022. */
            name?: string | null;
            /** @description The customer's phone number after a completed Checkout Session. */
            phone?: string | null;
            /**
             * @description The customer’s tax exempt status after a completed Checkout Session.
             * @enum {string|null}
             */
            tax_exempt?: "exempt" | "none" | "reverse" | null;
            /** @description The customer’s tax IDs after a completed Checkout Session. */
            tax_ids?: components["schemas"]["payment_pages_checkout_session_tax_id"][] | null;
        };
        /** PaymentPagesCheckoutSessionInvoiceCreation */
        payment_pages_checkout_session_invoice_creation: {
            /** @description Indicates whether invoice creation is enabled for the Checkout Session. */
            enabled: boolean;
            invoice_data: components["schemas"]["payment_pages_checkout_session_invoice_settings"];
        };
        /** PaymentPagesCheckoutSessionInvoiceSettings */
        payment_pages_checkout_session_invoice_settings: {
            /** @description The account tax IDs associated with the invoice. */
            account_tax_ids?: (string | components["schemas"]["tax_id"] | components["schemas"]["deleted_tax_id"])[] | null;
            /** @description Custom fields displayed on the invoice. */
            custom_fields?: components["schemas"]["invoice_setting_custom_field"][] | null;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Footer displayed on the invoice. */
            footer?: string | null;
            /** @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
            issuer?: components["schemas"]["connect_account_reference"] | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description Options for invoice PDF rendering. */
            rendering_options?: components["schemas"]["invoice_setting_rendering_options"] | null;
        };
        /** PaymentPagesCheckoutSessionPaymentMethodReuseAgreement */
        payment_pages_checkout_session_payment_method_reuse_agreement: {
            /**
             * @description Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.
             *
             *     When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
             * @enum {string}
             */
            position: "auto" | "hidden";
        };
        /** PaymentPagesCheckoutSessionPhoneNumberCollection */
        payment_pages_checkout_session_phone_number_collection: {
            /** @description Indicates whether phone number collection is enabled for the session */
            enabled: boolean;
        };
        /** PaymentPagesCheckoutSessionSavedPaymentMethodOptions */
        payment_pages_checkout_session_saved_payment_method_options: {
            /** @description Uses the `allow_redisplay` value of each saved payment method to filter the set presented to a returning customer. By default, only saved payment methods with ’allow_redisplay: ‘always’ are shown in Checkout. */
            allow_redisplay_filters?: ("always" | "limited" | "unspecified")[] | null;
            /**
             * @description Enable customers to choose if they wish to remove their saved payment methods. Disabled by default.
             * @enum {string|null}
             */
            payment_method_remove?: "disabled" | "enabled" | null;
            /**
             * @description Enable customers to choose if they wish to save their payment method for future use. Disabled by default.
             * @enum {string|null}
             */
            payment_method_save?: "disabled" | "enabled" | null;
        };
        /** PaymentPagesCheckoutSessionShippingAddressCollection */
        payment_pages_checkout_session_shipping_address_collection: {
            /** @description An array of two-letter ISO country codes representing which countries Checkout should provide as options for
             *     shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`. */
            allowed_countries: ("AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MK" | "ML" | "MM" | "MN" | "MO" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | "ZZ")[];
        };
        /** PaymentPagesCheckoutSessionShippingCost */
        payment_pages_checkout_session_shipping_cost: {
            /** @description Total shipping cost before any discounts or taxes are applied. */
            amount_subtotal: number;
            /** @description Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0. */
            amount_tax: number;
            /** @description Total shipping cost after discounts and taxes are applied. */
            amount_total: number;
            /** @description The ID of the ShippingRate for this order. */
            shipping_rate?: (string | components["schemas"]["shipping_rate"]) | null;
            /** @description The taxes applied to the shipping rate. */
            taxes?: components["schemas"]["line_items_tax_amount"][];
        };
        /** PaymentPagesCheckoutSessionShippingOption */
        payment_pages_checkout_session_shipping_option: {
            /** @description A non-negative integer in cents representing how much to charge. */
            shipping_amount: number;
            /** @description The shipping rate. */
            shipping_rate: string | components["schemas"]["shipping_rate"];
        };
        /** PaymentPagesCheckoutSessionTaxID */
        payment_pages_checkout_session_tax_id: {
            /**
             * @description The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, or `unknown`
             * @enum {string}
             */
            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "unknown" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
            /** @description The value of the tax ID. */
            value?: string | null;
        };
        /** PaymentPagesCheckoutSessionTaxIDCollection */
        payment_pages_checkout_session_tax_id_collection: {
            /** @description Indicates whether tax ID collection is enabled for the session */
            enabled: boolean;
            /**
             * @description Indicates whether a tax ID is required on the payment page
             * @enum {string}
             */
            required: "if_supported" | "never";
        };
        /** PaymentPagesCheckoutSessionTotalDetails */
        payment_pages_checkout_session_total_details: {
            /** @description This is the sum of all the discounts. */
            amount_discount: number;
            /** @description This is the sum of all the shipping amounts. */
            amount_shipping?: number | null;
            /** @description This is the sum of all the tax amounts. */
            amount_tax: number;
            breakdown?: components["schemas"]["payment_pages_checkout_session_total_details_resource_breakdown"];
        };
        /** PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown */
        payment_pages_checkout_session_total_details_resource_breakdown: {
            /** @description The aggregated discounts. */
            discounts: components["schemas"]["line_items_discount_amount"][];
            /** @description The aggregated tax amounts by rate. */
            taxes: components["schemas"]["line_items_tax_amount"][];
        };
        /** Polymorphic */
        payment_source: components["schemas"]["account"] | components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"];
        /**
         * Payout
         * @description A `Payout` object is created when you receive funds from Stripe, or when you
         *     initiate a payout to either a bank account or debit card of a [connected
         *     Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
         *     and list all payouts. Payouts are made on [varying
         *     schedules](/docs/connect/manage-payout-schedule), depending on your country and
         *     industry.
         *
         *     Related guide: [Receiving payouts](https://stripe.com/docs/payouts)
         */
        payout: {
            /** @description The amount (in cents (or local equivalent)) that transfers to your bank account or debit card. */
            amount: number;
            /** @description The application fee (if any) for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details. */
            application_fee?: (string | components["schemas"]["application_fee"]) | null;
            /** @description The amount of the application fee (if any) requested for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details. */
            application_fee_amount?: number | null;
            /**
             * Format: unix-time
             * @description Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.
             */
            arrival_date: number;
            /** @description Returns `true` if the payout is created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule) and `false` if it's [requested manually](https://stripe.com/docs/payouts#manual-payouts). */
            automatic: boolean;
            /** @description ID of the balance transaction that describes the impact of this payout on your account balance. */
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description ID of the bank account or card the payout is sent to. */
            destination?: (string | components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["deleted_bank_account"] | components["schemas"]["deleted_card"]) | null;
            /** @description If the payout fails or cancels, this is the ID of the balance transaction that reverses the initial balance transaction and returns the funds from the failed payout back in your balance. */
            failure_balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            /** @description Error code that provides a reason for a payout failure, if available. View our [list of failure codes](https://stripe.com/docs/api#payout_failures). */
            failure_code?: string | null;
            /** @description Message that provides the reason for a payout failure, if available. */
            failure_message?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks). */
            method: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "payout";
            /** @description If the payout reverses another, this is the ID of the original payout. */
            original_payout?: (string | components["schemas"]["payout"]) | null;
            /**
             * @description If `completed`, you can use the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout.
             * @enum {string}
             */
            reconciliation_status: "completed" | "in_progress" | "not_applicable";
            /** @description If the payout reverses, this is the ID of the payout that reverses this payout. */
            reversed_by?: (string | components["schemas"]["payout"]) | null;
            /** @description The source balance this payout came from, which can be one of the following: `card`, `fpx`, or `bank_account`. */
            source_type: string;
            /** @description Extra information about a payout that displays on the user's bank statement. */
            statement_descriptor?: string | null;
            /** @description Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it's submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`. */
            status: string;
            /** @description A value that generates from the beneficiary's bank that allows users to track payouts with their bank. Banks might call this a "reference number" or something similar. */
            trace_id?: components["schemas"]["payouts_trace_id"] | null;
            /**
             * @description Can be `bank_account` or `card`.
             * @enum {string}
             */
            type: "bank_account" | "card";
        };
        /** PayoutsTraceID */
        payouts_trace_id: {
            /** @description Possible values are `pending`, `supported`, and `unsupported`. When `payout.status` is `pending` or `in_transit`, this will be `pending`. When the payout transitions to `paid`, `failed`, or `canceled`, this status will become `supported` or `unsupported` shortly after in most cases. In some cases, this may appear as `pending` for up to 10 days after `arrival_date` until transitioning to `supported` or `unsupported`. */
            status: string;
            /** @description The trace ID value if `trace_id.status` is `supported`, otherwise `nil`. */
            value?: string | null;
        };
        /** paypal_seller_protection */
        paypal_seller_protection: {
            /** @description An array of conditions that are covered for the transaction, if applicable. */
            dispute_categories?: ("fraudulent" | "product_not_received")[] | null;
            /**
             * @description Indicates whether the transaction is eligible for PayPal's seller protection.
             * @enum {string}
             */
            status: "eligible" | "not_eligible" | "partially_eligible";
        };
        /** Period */
        period: {
            /**
             * Format: unix-time
             * @description The end date of this usage period. All usage up to and including this point in time is included.
             */
            end?: number | null;
            /**
             * Format: unix-time
             * @description The start date of this usage period. All usage after this point in time is included.
             */
            start?: number | null;
        };
        /**
         * Person
         * @description This is an object representing a person associated with a Stripe account.
         *
         *     A platform cannot access a person for an account where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.
         *
         *     See the [Standard onboarding](/connect/standard-accounts) or [Express onboarding](/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](/connect/handling-api-verification#person-information).
         */
        person: {
            /** @description The account the person is associated with. */
            account: string;
            additional_tos_acceptances?: components["schemas"]["person_additional_tos_acceptances"];
            address?: components["schemas"]["address"];
            address_kana?: components["schemas"]["legal_entity_japan_address"] | null;
            address_kanji?: components["schemas"]["legal_entity_japan_address"] | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            dob?: components["schemas"]["legal_entity_dob"];
            /** @description The person's email address. */
            email?: string | null;
            /** @description The person's first name. */
            first_name?: string | null;
            /** @description The Kana variation of the person's first name (Japan only). */
            first_name_kana?: string | null;
            /** @description The Kanji variation of the person's first name (Japan only). */
            first_name_kanji?: string | null;
            /** @description A list of alternate names or aliases that the person is known by. */
            full_name_aliases?: string[];
            future_requirements?: components["schemas"]["person_future_requirements"] | null;
            /** @description The person's gender. */
            gender?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Whether the person's `id_number` was provided. True if either the full ID number was provided or if only the required part of the ID number was provided (ex. last four of an individual's SSN for the US indicated by `ssn_last_4_provided`). */
            id_number_provided?: boolean;
            /** @description Whether the person's `id_number_secondary` was provided. */
            id_number_secondary_provided?: boolean;
            /** @description The person's last name. */
            last_name?: string | null;
            /** @description The Kana variation of the person's last name (Japan only). */
            last_name_kana?: string | null;
            /** @description The Kanji variation of the person's last name (Japan only). */
            last_name_kanji?: string | null;
            /** @description The person's maiden name. */
            maiden_name?: string | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            };
            /** @description The country where the person is a national. */
            nationality?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "person";
            /** @description The person's phone number. */
            phone?: string | null;
            /**
             * @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
             * @enum {string}
             */
            political_exposure?: "existing" | "none";
            registered_address?: components["schemas"]["address"];
            relationship?: components["schemas"]["person_relationship"];
            requirements?: components["schemas"]["person_requirements"] | null;
            /** @description Whether the last four digits of the person's Social Security number have been provided (U.S. only). */
            ssn_last_4_provided?: boolean;
            verification?: components["schemas"]["legal_entity_person_verification"];
        };
        /** PersonAdditionalTOSAcceptance */
        person_additional_tos_acceptance: {
            /**
             * Format: unix-time
             * @description The Unix timestamp marking when the legal guardian accepted the service agreement.
             */
            date?: number | null;
            /** @description The IP address from which the legal guardian accepted the service agreement. */
            ip?: string | null;
            /** @description The user agent of the browser from which the legal guardian accepted the service agreement. */
            user_agent?: string | null;
        };
        /** PersonAdditionalTOSAcceptances */
        person_additional_tos_acceptances: {
            /** @description Details on the legal guardian's acceptance of the main Stripe service agreement. */
            account?: components["schemas"]["person_additional_tos_acceptance"] | null;
        };
        /** PersonFutureRequirements */
        person_future_requirements: {
            /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            /** @description Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition. */
            currently_due: string[];
            /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
            errors: components["schemas"]["account_requirements_error"][];
            /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set. */
            eventually_due: string[];
            /** @description Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
            past_due: string[];
            /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending. */
            pending_verification: string[];
        };
        /** PersonRelationship */
        person_relationship: {
            /** @description Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
            director?: boolean | null;
            /** @description Whether the person has significant responsibility to control, manage, or direct the organization. */
            executive?: boolean | null;
            /** @description Whether the person is the legal guardian of the account's representative. */
            legal_guardian?: boolean | null;
            /** @description Whether the person is an owner of the account’s legal entity. */
            owner?: boolean | null;
            /** @description The percent owned by the person of the account's legal entity. */
            percent_ownership?: number | null;
            /** @description Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account. */
            representative?: boolean | null;
            /** @description The person's title (e.g., CEO, Support Engineer). */
            title?: string | null;
        };
        /** PersonRequirements */
        person_requirements: {
            /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            /** @description Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
            currently_due: string[];
            /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
            errors: components["schemas"]["account_requirements_error"][];
            /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set. */
            eventually_due: string[];
            /** @description Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account. */
            past_due: string[];
            /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
            pending_verification: string[];
        };
        /**
         * Plan
         * @description You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
         *
         *     Plans define the base price, currency, and billing cycle for recurring purchases of products.
         *     [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
         *
         *     For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
         *
         *     Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
         */
        plan: {
            /** @description Whether the plan can be used for new purchases. */
            active: boolean;
            /**
             * @description Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
             * @enum {string|null}
             */
            aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum" | null;
            /** @description The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
            amount?: number | null;
            /**
             * Format: decimal
             * @description The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
             */
            amount_decimal?: string | null;
            /**
             * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
             * @enum {string}
             */
            billing_scheme: "per_unit" | "tiered";
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
             * @enum {string}
             */
            interval: "day" | "month" | "week" | "year";
            /** @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
            interval_count: number;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description The meter tracking the usage of a metered price */
            meter?: string | null;
            /** @description A brief description of the plan, hidden from customers. */
            nickname?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "plan";
            /** @description The product whose pricing this plan determines. */
            product?: (string | components["schemas"]["product"] | components["schemas"]["deleted_product"]) | null;
            /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
            tiers?: components["schemas"]["plan_tier"][];
            /**
             * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
             * @enum {string|null}
             */
            tiers_mode?: "graduated" | "volume" | null;
            /** @description Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
            transform_usage?: components["schemas"]["transform_usage"] | null;
            /** @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
            trial_period_days?: number | null;
            /**
             * @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
             * @enum {string}
             */
            usage_type: "licensed" | "metered";
        };
        /** PlanTier */
        plan_tier: {
            /** @description Price for the entire tier. */
            flat_amount?: number | null;
            /**
             * Format: decimal
             * @description Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
             */
            flat_amount_decimal?: string | null;
            /** @description Per unit price for units relevant to the tier. */
            unit_amount?: number | null;
            /**
             * Format: decimal
             * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
             */
            unit_amount_decimal?: string | null;
            /** @description Up to and including to this quantity will be contained in the tier. */
            up_to?: number | null;
        };
        /** PlatformEarningFeeSource */
        platform_earning_fee_source: {
            /** @description Charge ID that created this application fee. */
            charge?: string;
            /** @description Payout ID that created this application fee. */
            payout?: string;
            /**
             * @description Type of object that created the application fee, either `charge` or `payout`.
             * @enum {string}
             */
            type: "charge" | "payout";
        };
        /** PortalBusinessProfile */
        portal_business_profile: {
            /** @description The messaging shown to customers in the portal. */
            headline?: string | null;
            /** @description A link to the business’s publicly available privacy policy. */
            privacy_policy_url?: string | null;
            /** @description A link to the business’s publicly available terms of service. */
            terms_of_service_url?: string | null;
        };
        /** PortalCustomerUpdate */
        portal_customer_update: {
            /** @description The types of customer updates that are supported. When empty, customers are not updateable. */
            allowed_updates: ("address" | "email" | "name" | "phone" | "shipping" | "tax_id")[];
            /** @description Whether the feature is enabled. */
            enabled: boolean;
        };
        /** PortalFeatures */
        portal_features: {
            customer_update: components["schemas"]["portal_customer_update"];
            invoice_history: components["schemas"]["portal_invoice_list"];
            payment_method_update: components["schemas"]["portal_payment_method_update"];
            subscription_cancel: components["schemas"]["portal_subscription_cancel"];
            subscription_update: components["schemas"]["portal_subscription_update"];
        };
        /** PortalFlowsAfterCompletionHostedConfirmation */
        portal_flows_after_completion_hosted_confirmation: {
            /** @description A custom message to display to the customer after the flow is completed. */
            custom_message?: string | null;
        };
        /** PortalFlowsAfterCompletionRedirect */
        portal_flows_after_completion_redirect: {
            /** @description The URL the customer will be redirected to after the flow is completed. */
            return_url: string;
        };
        /** PortalFlowsCouponOffer */
        portal_flows_coupon_offer: {
            /** @description The ID of the coupon to be offered. */
            coupon: string;
        };
        /** PortalFlowsFlow */
        portal_flows_flow: {
            after_completion: components["schemas"]["portal_flows_flow_after_completion"];
            /** @description Configuration when `flow.type=subscription_cancel`. */
            subscription_cancel?: components["schemas"]["portal_flows_flow_subscription_cancel"] | null;
            /** @description Configuration when `flow.type=subscription_update`. */
            subscription_update?: components["schemas"]["portal_flows_flow_subscription_update"] | null;
            /** @description Configuration when `flow.type=subscription_update_confirm`. */
            subscription_update_confirm?: components["schemas"]["portal_flows_flow_subscription_update_confirm"] | null;
            /**
             * @description Type of flow that the customer will go through.
             * @enum {string}
             */
            type: "payment_method_update" | "subscription_cancel" | "subscription_update" | "subscription_update_confirm";
        };
        /** PortalFlowsFlowAfterCompletion */
        portal_flows_flow_after_completion: {
            /** @description Configuration when `after_completion.type=hosted_confirmation`. */
            hosted_confirmation?: components["schemas"]["portal_flows_after_completion_hosted_confirmation"] | null;
            /** @description Configuration when `after_completion.type=redirect`. */
            redirect?: components["schemas"]["portal_flows_after_completion_redirect"] | null;
            /**
             * @description The specified type of behavior after the flow is completed.
             * @enum {string}
             */
            type: "hosted_confirmation" | "portal_homepage" | "redirect";
        };
        /** PortalFlowsFlowSubscriptionCancel */
        portal_flows_flow_subscription_cancel: {
            /** @description Specify a retention strategy to be used in the cancellation flow. */
            retention?: components["schemas"]["portal_flows_retention"] | null;
            /** @description The ID of the subscription to be canceled. */
            subscription: string;
        };
        /** PortalFlowsFlowSubscriptionUpdate */
        portal_flows_flow_subscription_update: {
            /** @description The ID of the subscription to be updated. */
            subscription: string;
        };
        /** PortalFlowsFlowSubscriptionUpdateConfirm */
        portal_flows_flow_subscription_update_confirm: {
            /** @description The coupon or promotion code to apply to this subscription update. Currently, only up to one may be specified. */
            discounts?: components["schemas"]["portal_flows_subscription_update_confirm_discount"][] | null;
            /** @description The [subscription item](https://stripe.com/docs/api/subscription_items) to be updated through this flow. Currently, only up to one may be specified and subscriptions with multiple items are not updatable. */
            items: components["schemas"]["portal_flows_subscription_update_confirm_item"][];
            /** @description The ID of the subscription to be updated. */
            subscription: string;
        };
        /** PortalFlowsRetention */
        portal_flows_retention: {
            /** @description Configuration when `retention.type=coupon_offer`. */
            coupon_offer?: components["schemas"]["portal_flows_coupon_offer"] | null;
            /**
             * @description Type of retention strategy that will be used.
             * @enum {string}
             */
            type: "coupon_offer";
        };
        /** PortalFlowsSubscriptionUpdateConfirmDiscount */
        portal_flows_subscription_update_confirm_discount: {
            /** @description The ID of the coupon to apply to this subscription update. */
            coupon?: string | null;
            /** @description The ID of a promotion code to apply to this subscription update. */
            promotion_code?: string | null;
        };
        /** PortalFlowsSubscriptionUpdateConfirmItem */
        portal_flows_subscription_update_confirm_item: {
            /** @description The ID of the [subscription item](https://stripe.com/docs/api/subscriptions/object#subscription_object-items-data-id) to be updated. */
            id?: string | null;
            /** @description The price the customer should subscribe to through this flow. The price must also be included in the configuration's [`features.subscription_update.products`](https://stripe.com/docs/api/customer_portal/configuration#portal_configuration_object-features-subscription_update-products). */
            price?: string | null;
            /** @description [Quantity](https://stripe.com/docs/subscriptions/quantities) for this item that the customer should subscribe to through this flow. */
            quantity?: number;
        };
        /** PortalInvoiceList */
        portal_invoice_list: {
            /** @description Whether the feature is enabled. */
            enabled: boolean;
        };
        /** PortalLoginPage */
        portal_login_page: {
            /** @description If `true`, a shareable `url` will be generated that will take your customers to a hosted login page for the customer portal.
             *
             *     If `false`, the previously generated `url`, if any, will be deactivated. */
            enabled: boolean;
            /** @description A shareable URL to the hosted portal login page. Your customers will be able to log in with their [email](https://stripe.com/docs/api/customers/object#customer_object-email) and receive a link to their customer portal. */
            url?: string | null;
        };
        /** PortalPaymentMethodUpdate */
        portal_payment_method_update: {
            /** @description Whether the feature is enabled. */
            enabled: boolean;
        };
        /** PortalResourceScheduleUpdateAtPeriodEnd */
        portal_resource_schedule_update_at_period_end: {
            /** @description List of conditions. When any condition is true, an update will be scheduled at the end of the current period. */
            conditions: components["schemas"]["portal_resource_schedule_update_at_period_end_condition"][];
        };
        /** PortalResourceScheduleUpdateAtPeriodEndCondition */
        portal_resource_schedule_update_at_period_end_condition: {
            /**
             * @description The type of condition.
             * @enum {string}
             */
            type: "decreasing_item_amount" | "shortening_interval";
        };
        /** PortalSubscriptionCancel */
        portal_subscription_cancel: {
            cancellation_reason: components["schemas"]["portal_subscription_cancellation_reason"];
            /** @description Whether the feature is enabled. */
            enabled: boolean;
            /**
             * @description Whether to cancel subscriptions immediately or at the end of the billing period.
             * @enum {string}
             */
            mode: "at_period_end" | "immediately";
            /**
             * @description Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.
             * @enum {string}
             */
            proration_behavior: "always_invoice" | "create_prorations" | "none";
        };
        /** PortalSubscriptionCancellationReason */
        portal_subscription_cancellation_reason: {
            /** @description Whether the feature is enabled. */
            enabled: boolean;
            /** @description Which cancellation reasons will be given as options to the customer. */
            options: ("customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused")[];
        };
        /** PortalSubscriptionUpdate */
        portal_subscription_update: {
            /** @description The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable. */
            default_allowed_updates: ("price" | "promotion_code" | "quantity")[];
            /** @description Whether the feature is enabled. */
            enabled: boolean;
            /** @description The list of up to 10 products that support subscription updates. */
            products?: components["schemas"]["portal_subscription_update_product"][] | null;
            /**
             * @description Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`. Defaults to a value of `none` if you don't set it during creation.
             * @enum {string}
             */
            proration_behavior: "always_invoice" | "create_prorations" | "none";
            schedule_at_period_end?: components["schemas"]["portal_resource_schedule_update_at_period_end"];
        };
        /** PortalSubscriptionUpdateProduct */
        portal_subscription_update_product: {
            /** @description The list of price IDs which, when subscribed to, a subscription can be updated. */
            prices: string[];
            /** @description The product ID. */
            product: string;
        };
        /**
         * Price
         * @description Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
         *     [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
         *
         *     For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
         *
         *     Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
         */
        price: {
            /** @description Whether the price can be used for new purchases. */
            active: boolean;
            /**
             * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
             * @enum {string}
             */
            billing_scheme: "per_unit" | "tiered";
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
            currency_options?: {
                [key: string]: components["schemas"]["currency_option"];
            };
            /** @description When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. */
            custom_unit_amount?: components["schemas"]["custom_unit_amount"] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
            lookup_key?: string | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description A brief description of the price, hidden from customers. */
            nickname?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "price";
            /** @description The ID of the product this price is associated with. */
            product: string | components["schemas"]["product"] | components["schemas"]["deleted_product"];
            /** @description The recurring components of a price such as `interval` and `usage_type`. */
            recurring?: components["schemas"]["recurring"] | null;
            /**
             * @description Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
             * @enum {string|null}
             */
            tax_behavior?: "exclusive" | "inclusive" | "unspecified" | null;
            /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
            tiers?: components["schemas"]["price_tier"][];
            /**
             * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
             * @enum {string|null}
             */
            tiers_mode?: "graduated" | "volume" | null;
            /** @description Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
            transform_quantity?: components["schemas"]["transform_quantity"] | null;
            /**
             * @description One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
             * @enum {string}
             */
            type: "one_time" | "recurring";
            /** @description The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
            unit_amount?: number | null;
            /**
             * Format: decimal
             * @description The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
             */
            unit_amount_decimal?: string | null;
        };
        /** PriceTier */
        price_tier: {
            /** @description Price for the entire tier. */
            flat_amount?: number | null;
            /**
             * Format: decimal
             * @description Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
             */
            flat_amount_decimal?: string | null;
            /** @description Per unit price for units relevant to the tier. */
            unit_amount?: number | null;
            /**
             * Format: decimal
             * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
             */
            unit_amount_decimal?: string | null;
            /** @description Up to and including to this quantity will be contained in the tier. */
            up_to?: number | null;
        };
        /**
         * Product
         * @description Products describe the specific goods or services you offer to your customers.
         *     For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
         *     They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
         *
         *     Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
         *     [share a Payment Link](https://stripe.com/docs/payment-links),
         *     [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
         *     and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
         */
        product: {
            /** @description Whether the product is currently available for purchase. */
            active: boolean;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product. */
            default_price?: (string | components["schemas"]["price"]) | null;
            /** @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
            description?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
            images: string[];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table). */
            marketing_features: components["schemas"]["product_marketing_feature"][];
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description The product's name, meant to be displayable to the customer. */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "product";
            /** @description The dimensions of this product for shipping purposes. */
            package_dimensions?: components["schemas"]["package_dimensions"] | null;
            /** @description Whether this product is shipped (i.e., physical goods). */
            shippable?: boolean | null;
            /** @description Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only used for subscription payments. */
            statement_descriptor?: string | null;
            /** @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID. */
            tax_code?: (string | components["schemas"]["tax_code"]) | null;
            /** @description A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal. */
            unit_label?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
             */
            updated: number;
            /** @description A URL of a publicly-accessible webpage for this product. */
            url?: string | null;
        };
        /**
         * ProductFeature
         * @description A product_feature represents an attachment between a feature and a product.
         *     When a product is purchased that has a feature attached, Stripe will create an entitlement to the feature for the purchasing customer.
         */
        product_feature: {
            entitlement_feature: components["schemas"]["entitlements.feature"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "product_feature";
        };
        /** ProductMarketingFeature */
        product_marketing_feature: {
            /** @description The marketing feature name. Up to 80 characters long. */
            name?: string;
        };
        /**
         * PromotionCode
         * @description A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons). It can be used to
         *     create multiple codes for a single coupon.
         */
        promotion_code: {
            /** @description Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid. */
            active: boolean;
            /** @description The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. Valid characters are lower case letters (a-z), upper case letters (A-Z), and digits (0-9). */
            code: string;
            coupon: components["schemas"]["coupon"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The customer that this promotion code can be used by. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /**
             * Format: unix-time
             * @description Date at which the promotion code can no longer be redeemed.
             */
            expires_at?: number | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Maximum number of times this promotion code can be redeemed. */
            max_redemptions?: number | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "promotion_code";
            restrictions: components["schemas"]["promotion_codes_resource_restrictions"];
            /** @description Number of times this promotion code has been used. */
            times_redeemed: number;
        };
        /** PromotionCodeCurrencyOption */
        promotion_code_currency_option: {
            /** @description Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work). */
            minimum_amount: number;
        };
        /** PromotionCodesResourceRestrictions */
        promotion_codes_resource_restrictions: {
            /** @description Promotion code restrictions defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
            currency_options?: {
                [key: string]: components["schemas"]["promotion_code_currency_option"];
            };
            /** @description A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices */
            first_time_transaction: boolean;
            /** @description Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work). */
            minimum_amount?: number | null;
            /** @description Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount */
            minimum_amount_currency?: string | null;
        };
        /**
         * Quote
         * @description A Quote is a way to model prices that you'd like to provide to a customer.
         *     Once accepted, it will automatically create an invoice, subscription or subscription schedule.
         */
        quote: {
            /** @description Total before any discounts or taxes are applied. */
            amount_subtotal: number;
            /** @description Total after discounts and taxes are applied. */
            amount_total: number;
            /** @description ID of the Connect Application that created the quote. */
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote. */
            application_fee_amount?: number | null;
            /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote. */
            application_fee_percent?: number | null;
            automatic_tax: components["schemas"]["quotes_resource_automatic_tax"];
            /**
             * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
             * @enum {string}
             */
            collection_method: "charge_automatically" | "send_invoice";
            computed: components["schemas"]["quotes_resource_computed"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency?: string | null;
            /** @description The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /** @description The tax rates applied to this quote. */
            default_tax_rates?: (string | components["schemas"]["tax_rate"])[];
            /** @description A description that will be displayed on the quote PDF. */
            description?: string | null;
            /** @description The discounts applied to this quote. */
            discounts: (string | components["schemas"]["discount"])[];
            /**
             * Format: unix-time
             * @description The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
             */
            expires_at: number;
            /** @description A footer that will be displayed on the quote PDF. */
            footer?: string | null;
            /** @description Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details. */
            from_quote?: components["schemas"]["quotes_resource_from_quote"] | null;
            /** @description A header that will be displayed on the quote PDF. */
            header?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The invoice that was created from this quote. */
            invoice?: (string | components["schemas"]["invoice"] | components["schemas"]["deleted_invoice"]) | null;
            invoice_settings: components["schemas"]["invoice_setting_quote_setting"];
            /**
             * QuotesResourceListLineItems
             * @description A list of items the customer is being quoted for.
             */
            line_items?: {
                /** @description Details about each object. */
                data: components["schemas"]["item"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize). */
            number?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "quote";
            /** @description The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details. */
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            /**
             * @description The status of the quote.
             * @enum {string}
             */
            status: "accepted" | "canceled" | "draft" | "open";
            status_transitions: components["schemas"]["quotes_resource_status_transitions"];
            /** @description The subscription that was created or updated from this quote. */
            subscription?: (string | components["schemas"]["subscription"]) | null;
            subscription_data: components["schemas"]["quotes_resource_subscription_data_subscription_data"];
            /** @description The subscription schedule that was created or updated from this quote. */
            subscription_schedule?: (string | components["schemas"]["subscription_schedule"]) | null;
            /** @description ID of the test clock this quote belongs to. */
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
            total_details: components["schemas"]["quotes_resource_total_details"];
            /** @description The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices. */
            transfer_data?: components["schemas"]["quotes_resource_transfer_data"] | null;
        };
        /** QuotesResourceAutomaticTax */
        quotes_resource_automatic_tax: {
            /** @description Automatically calculate taxes */
            enabled: boolean;
            /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
            liability?: components["schemas"]["connect_account_reference"] | null;
            /**
             * @description The status of the most recent automated tax calculation for this quote.
             * @enum {string|null}
             */
            status?: "complete" | "failed" | "requires_location_inputs" | null;
        };
        /** QuotesResourceComputed */
        quotes_resource_computed: {
            /** @description The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices. */
            recurring?: components["schemas"]["quotes_resource_recurring"] | null;
            upfront: components["schemas"]["quotes_resource_upfront"];
        };
        /** QuotesResourceFromQuote */
        quotes_resource_from_quote: {
            /** @description Whether this quote is a revision of a different quote. */
            is_revision: boolean;
            /** @description The quote that was cloned. */
            quote: string | components["schemas"]["quote"];
        };
        /** QuotesResourceRecurring */
        quotes_resource_recurring: {
            /** @description Total before any discounts or taxes are applied. */
            amount_subtotal: number;
            /** @description Total after discounts and taxes are applied. */
            amount_total: number;
            /**
             * @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
             * @enum {string}
             */
            interval: "day" | "month" | "week" | "year";
            /** @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
            interval_count: number;
            total_details: components["schemas"]["quotes_resource_total_details"];
        };
        /** QuotesResourceStatusTransitions */
        quotes_resource_status_transitions: {
            /**
             * Format: unix-time
             * @description The time that the quote was accepted. Measured in seconds since Unix epoch.
             */
            accepted_at?: number | null;
            /**
             * Format: unix-time
             * @description The time that the quote was canceled. Measured in seconds since Unix epoch.
             */
            canceled_at?: number | null;
            /**
             * Format: unix-time
             * @description The time that the quote was finalized. Measured in seconds since Unix epoch.
             */
            finalized_at?: number | null;
        };
        /** QuotesResourceSubscriptionDataSubscriptionData */
        quotes_resource_subscription_data_subscription_data: {
            /** @description The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
            description?: string | null;
            /**
             * Format: unix-time
             * @description When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
             */
            effective_date?: number | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on the subscription or subscription schedule when the quote is accepted. If a recurring price is included in `line_items`, this field will be passed to the resulting subscription's `metadata` field. If `subscription_data.effective_date` is used, this field will be passed to the resulting subscription schedule's `phases.metadata` field. Unlike object-level metadata, this field is declarative. Updates will clear prior values. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description Integer representing the number of trial period days before the customer is charged for the first time. */
            trial_period_days?: number | null;
        };
        /** QuotesResourceTotalDetails */
        quotes_resource_total_details: {
            /** @description This is the sum of all the discounts. */
            amount_discount: number;
            /** @description This is the sum of all the shipping amounts. */
            amount_shipping?: number | null;
            /** @description This is the sum of all the tax amounts. */
            amount_tax: number;
            breakdown?: components["schemas"]["quotes_resource_total_details_resource_breakdown"];
        };
        /** QuotesResourceTotalDetailsResourceBreakdown */
        quotes_resource_total_details_resource_breakdown: {
            /** @description The aggregated discounts. */
            discounts: components["schemas"]["line_items_discount_amount"][];
            /** @description The aggregated tax amounts by rate. */
            taxes: components["schemas"]["line_items_tax_amount"][];
        };
        /** QuotesResourceTransferData */
        quotes_resource_transfer_data: {
            /** @description The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
            amount?: number | null;
            /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount will be transferred to the destination. */
            amount_percent?: number | null;
            /** @description The account where funds from the payment will be transferred to upon payment success. */
            destination: string | components["schemas"]["account"];
        };
        /** QuotesResourceUpfront */
        quotes_resource_upfront: {
            /** @description Total before any discounts or taxes are applied. */
            amount_subtotal: number;
            /** @description Total after discounts and taxes are applied. */
            amount_total: number;
            /**
             * QuotesResourceListLineItems
             * @description The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
             */
            line_items?: {
                /** @description Details about each object. */
                data: components["schemas"]["item"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            total_details: components["schemas"]["quotes_resource_total_details"];
        };
        /**
         * RadarEarlyFraudWarning
         * @description An early fraud warning indicates that the card issuer has notified us that a
         *     charge may be fraudulent.
         *
         *     Related guide: [Early fraud warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings)
         */
        "radar.early_fraud_warning": {
            /** @description An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later. */
            actionable: boolean;
            /** @description ID of the charge this early fraud warning is for, optionally expanded. */
            charge: string | components["schemas"]["charge"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
            fraud_type: string;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "radar.early_fraud_warning";
            /** @description ID of the Payment Intent this early fraud warning is for, optionally expanded. */
            payment_intent?: string | components["schemas"]["payment_intent"];
        };
        /**
         * RadarListList
         * @description Value lists allow you to group values together which can then be referenced in rules.
         *
         *     Related guide: [Default Stripe lists](https://stripe.com/docs/radar/lists#managing-list-items)
         */
        "radar.value_list": {
            /** @description The name of the value list for use in rules. */
            alias: string;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The name or email address of the user who created this value list. */
            created_by: string;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description The type of items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
             * @enum {string}
             */
            item_type: "card_bin" | "card_fingerprint" | "case_sensitive_string" | "country" | "customer_id" | "email" | "ip_address" | "sepa_debit_fingerprint" | "string" | "us_bank_account_fingerprint";
            /**
             * RadarListListItemList
             * @description List of items contained within this value list.
             */
            list_items: {
                /** @description Details about each object. */
                data: components["schemas"]["radar.value_list_item"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /** @description The name of the value list. */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "radar.value_list";
        };
        /**
         * RadarListListItem
         * @description Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
         *
         *     Related guide: [Managing list items](https://stripe.com/docs/radar/lists#managing-list-items)
         */
        "radar.value_list_item": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The name or email address of the user who added this item to the value list. */
            created_by: string;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "radar.value_list_item";
            /** @description The value of the item. */
            value: string;
            /** @description The identifier of the value list this item belongs to. */
            value_list: string;
        };
        /**
         * RadarRadarOptions
         * @description Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
         */
        radar_radar_options: {
            /** @description A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments. */
            session?: string;
        };
        /** RadarReviewResourceLocation */
        radar_review_resource_location: {
            /** @description The city where the payment originated. */
            city?: string | null;
            /** @description Two-letter ISO code representing the country where the payment originated. */
            country?: string | null;
            /** @description The geographic latitude where the payment originated. */
            latitude?: number | null;
            /** @description The geographic longitude where the payment originated. */
            longitude?: number | null;
            /** @description The state/county/province/region where the payment originated. */
            region?: string | null;
        };
        /** RadarReviewResourceSession */
        radar_review_resource_session: {
            /** @description The browser used in this browser session (e.g., `Chrome`). */
            browser?: string | null;
            /** @description Information about the device used for the browser session (e.g., `Samsung SM-G930T`). */
            device?: string | null;
            /** @description The platform for the browser session (e.g., `Macintosh`). */
            platform?: string | null;
            /** @description The version for the browser session (e.g., `61.0.3163.100`). */
            version?: string | null;
        };
        /** received_payment_method_details_financial_account */
        received_payment_method_details_financial_account: {
            /** @description The FinancialAccount ID. */
            id: string;
            /**
             * @description The rails the ReceivedCredit was sent over. A FinancialAccount can only send funds over `stripe`.
             * @enum {string}
             */
            network: "stripe";
        };
        /** Recurring */
        recurring: {
            /**
             * @description Specifies a usage aggregation strategy for prices of `usage_type=metered`. Defaults to `sum`.
             * @enum {string|null}
             */
            aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum" | null;
            /**
             * @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
             * @enum {string}
             */
            interval: "day" | "month" | "week" | "year";
            /** @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
            interval_count: number;
            /** @description The meter tracking the usage of a metered price */
            meter?: string | null;
            /**
             * @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
             * @enum {string}
             */
            usage_type: "licensed" | "metered";
        };
        /**
         * Refund
         * @description Refund objects allow you to refund a previously created charge that isn't
         *     refunded yet. Funds are refunded to the credit or debit card that's
         *     initially charged.
         *
         *     Related guide: [Refunds](https://stripe.com/docs/refunds)
         */
        refund: {
            /** @description Amount, in cents (or local equivalent). */
            amount: number;
            /** @description Balance transaction that describes the impact on your account balance. */
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            /** @description ID of the charge that's refunded. */
            charge?: (string | components["schemas"]["charge"]) | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only). */
            description?: string;
            destination_details?: components["schemas"]["refund_destination_details"];
            /** @description After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. */
            failure_balance_transaction?: string | components["schemas"]["balance_transaction"];
            /** @description Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`. */
            failure_reason?: string;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions. */
            instructions_email?: string;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            next_action?: components["schemas"]["refund_next_action"];
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "refund";
            /** @description ID of the PaymentIntent that's refunded. */
            payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
            /**
             * @description Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
             * @enum {string|null}
             */
            reason?: "duplicate" | "expired_uncaptured_charge" | "fraudulent" | "requested_by_customer" | null;
            /** @description This is the transaction number that appears on email receipts sent for this refund. */
            receipt_number?: string | null;
            /** @description The transfer reversal that's associated with the refund. Only present if the charge came from another Stripe account. */
            source_transfer_reversal?: (string | components["schemas"]["transfer_reversal"]) | null;
            /** @description Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds). */
            status?: string | null;
            /** @description This refers to the transfer reversal object if the accompanying transfer reverses. This is only applicable if the charge was created using the destination parameter. */
            transfer_reversal?: (string | components["schemas"]["transfer_reversal"]) | null;
        };
        /** refund_destination_details */
        refund_destination_details: {
            affirm?: components["schemas"]["destination_details_unimplemented"];
            afterpay_clearpay?: components["schemas"]["destination_details_unimplemented"];
            alipay?: components["schemas"]["destination_details_unimplemented"];
            alma?: components["schemas"]["destination_details_unimplemented"];
            amazon_pay?: components["schemas"]["destination_details_unimplemented"];
            au_bank_transfer?: components["schemas"]["destination_details_unimplemented"];
            blik?: components["schemas"]["refund_destination_details_blik"];
            br_bank_transfer?: components["schemas"]["refund_destination_details_br_bank_transfer"];
            card?: components["schemas"]["refund_destination_details_card"];
            cashapp?: components["schemas"]["destination_details_unimplemented"];
            customer_cash_balance?: components["schemas"]["destination_details_unimplemented"];
            eps?: components["schemas"]["destination_details_unimplemented"];
            eu_bank_transfer?: components["schemas"]["refund_destination_details_eu_bank_transfer"];
            gb_bank_transfer?: components["schemas"]["refund_destination_details_gb_bank_transfer"];
            giropay?: components["schemas"]["destination_details_unimplemented"];
            grabpay?: components["schemas"]["destination_details_unimplemented"];
            jp_bank_transfer?: components["schemas"]["refund_destination_details_jp_bank_transfer"];
            klarna?: components["schemas"]["destination_details_unimplemented"];
            multibanco?: components["schemas"]["refund_destination_details_multibanco"];
            mx_bank_transfer?: components["schemas"]["refund_destination_details_mx_bank_transfer"];
            p24?: components["schemas"]["refund_destination_details_p24"];
            paynow?: components["schemas"]["destination_details_unimplemented"];
            paypal?: components["schemas"]["destination_details_unimplemented"];
            pix?: components["schemas"]["destination_details_unimplemented"];
            revolut?: components["schemas"]["destination_details_unimplemented"];
            sofort?: components["schemas"]["destination_details_unimplemented"];
            swish?: components["schemas"]["refund_destination_details_swish"];
            th_bank_transfer?: components["schemas"]["refund_destination_details_th_bank_transfer"];
            /** @description The type of transaction-specific details of the payment method used in the refund (e.g., `card`). An additional hash is included on `destination_details` with a name matching this value. It contains information specific to the refund transaction. */
            type: string;
            us_bank_transfer?: components["schemas"]["refund_destination_details_us_bank_transfer"];
            wechat_pay?: components["schemas"]["destination_details_unimplemented"];
            zip?: components["schemas"]["destination_details_unimplemented"];
        };
        /** refund_destination_details_blik */
        refund_destination_details_blik: {
            /** @description For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed. */
            network_decline_code?: string | null;
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** refund_destination_details_br_bank_transfer */
        refund_destination_details_br_bank_transfer: {
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** refund_destination_details_card */
        refund_destination_details_card: {
            /** @description Value of the reference number assigned to the refund. */
            reference?: string;
            /** @description Status of the reference number on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string;
            /** @description Type of the reference number assigned to the refund. */
            reference_type?: string;
            /**
             * @description The type of refund. This can be `refund`, `reversal`, or `pending`.
             * @enum {string}
             */
            type: "pending" | "refund" | "reversal";
        };
        /** refund_destination_details_eu_bank_transfer */
        refund_destination_details_eu_bank_transfer: {
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** refund_destination_details_gb_bank_transfer */
        refund_destination_details_gb_bank_transfer: {
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** refund_destination_details_jp_bank_transfer */
        refund_destination_details_jp_bank_transfer: {
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** refund_destination_details_multibanco */
        refund_destination_details_multibanco: {
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** refund_destination_details_mx_bank_transfer */
        refund_destination_details_mx_bank_transfer: {
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** refund_destination_details_p24 */
        refund_destination_details_p24: {
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** refund_destination_details_swish */
        refund_destination_details_swish: {
            /** @description For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed. */
            network_decline_code?: string | null;
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** refund_destination_details_th_bank_transfer */
        refund_destination_details_th_bank_transfer: {
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** refund_destination_details_us_bank_transfer */
        refund_destination_details_us_bank_transfer: {
            /** @description The reference assigned to the refund. */
            reference?: string | null;
            /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
            reference_status?: string | null;
        };
        /** RefundNextAction */
        refund_next_action: {
            display_details?: components["schemas"]["refund_next_action_display_details"];
            /** @description Type of the next action to perform. */
            type: string;
        };
        /** RefundNextActionDisplayDetails */
        refund_next_action_display_details: {
            email_sent: components["schemas"]["email_sent"];
            /**
             * Format: unix-time
             * @description The expiry timestamp.
             */
            expires_at: number;
        };
        /**
         * reporting_report_run
         * @description The Report Run object represents an instance of a report type generated with
         *     specific run parameters. Once the object is created, Stripe begins processing the report.
         *     When the report has finished running, it will give you a reference to a file
         *     where you can retrieve your results. For an overview, see
         *     [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
         *
         *     Note that certain report types can only be run based on your live-mode data (not test-mode
         *     data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
         */
        "reporting.report_run": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description If something should go wrong during the run, a message about the failure (populated when
             *      `status=failed`). */
            error?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description `true` if the report is run on live mode data and `false` if it is run on test mode data. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "reporting.report_run";
            parameters: components["schemas"]["financial_reporting_finance_report_run_run_parameters"];
            /** @description The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`. */
            report_type: string;
            /** @description The file object representing the result of the report run (populated when
             *      `status=succeeded`). */
            result?: components["schemas"]["file"] | null;
            /** @description Status of this report run. This will be `pending` when the run is initially created.
             *      When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
             *      Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated. */
            status: string;
            /**
             * Format: unix-time
             * @description Timestamp at which this run successfully finished (populated when
             *      `status=succeeded`). Measured in seconds since the Unix epoch.
             */
            succeeded_at?: number | null;
        };
        /**
         * reporting_report_type
         * @description The Report Type resource corresponds to a particular type of report, such as
         *     the "Activity summary" or "Itemized payouts" reports. These objects are
         *     identified by an ID belonging to a set of enumerated values. See
         *     [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
         *     for those Report Type IDs, along with required and optional parameters.
         *
         *     Note that certain report types can only be run based on your live-mode data (not test-mode
         *     data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
         */
        "reporting.report_type": {
            /**
             * Format: unix-time
             * @description Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
             */
            data_available_end: number;
            /**
             * Format: unix-time
             * @description Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
             */
            data_available_start: number;
            /** @description List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.) */
            default_columns?: string[] | null;
            /** @description The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Human-readable name of the Report Type */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "reporting.report_type";
            /**
             * Format: unix-time
             * @description When this Report Type was latest updated. Measured in seconds since the Unix epoch.
             */
            updated: number;
            /** @description Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas. */
            version: number;
        };
        /** ReserveTransaction */
        reserve_transaction: {
            amount: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "reserve_transaction";
        };
        /**
         * RadarReview
         * @description Reviews can be used to supplement automated fraud detection with human expertise.
         *
         *     Learn more about [Radar](/radar) and reviewing payments
         *     [here](https://stripe.com/docs/radar/reviews).
         */
        review: {
            /** @description The ZIP or postal code of the card used, if applicable. */
            billing_zip?: string | null;
            /** @description The charge associated with this review. */
            charge?: (string | components["schemas"]["charge"]) | null;
            /**
             * @description The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
             * @enum {string|null}
             */
            closed_reason?: "approved" | "disputed" | "redacted" | "refunded" | "refunded_as_fraud" | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The IP address where the payment originated. */
            ip_address?: string | null;
            /** @description Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address. */
            ip_address_location?: components["schemas"]["radar_review_resource_location"] | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "review";
            /** @description If `true`, the review needs action. */
            open: boolean;
            /**
             * @description The reason the review was opened. One of `rule` or `manual`.
             * @enum {string}
             */
            opened_reason: "manual" | "rule";
            /** @description The PaymentIntent ID associated with this review, if one exists. */
            payment_intent?: string | components["schemas"]["payment_intent"];
            /** @description The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
            reason: string;
            /** @description Information related to the browsing session of the user who initiated the payment. */
            session?: components["schemas"]["radar_review_resource_session"] | null;
        };
        /** RadarRule */
        rule: {
            /** @description The action taken on the payment. */
            action: string;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The predicate to evaluate the payment against. */
            predicate: string;
        };
        /**
         * ScheduledQueryRun
         * @description If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
         *     receive a `sigma.scheduled_query_run.created` webhook each time the query
         *     runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
         *     retrieve the query results.
         */
        scheduled_query_run: {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /**
             * Format: unix-time
             * @description When the query was run, Sigma contained a snapshot of your Stripe data at this time.
             */
            data_load_time: number;
            error?: components["schemas"]["sigma_scheduled_query_run_error"];
            /** @description The file object representing the results of the query. */
            file?: components["schemas"]["file"] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "scheduled_query_run";
            /**
             * Format: unix-time
             * @description Time at which the result expires and is no longer available for download.
             */
            result_available_until: number;
            /** @description SQL for the query. */
            sql: string;
            /** @description The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise. */
            status: string;
            /** @description Title of the query. */
            title: string;
        };
        /** SchedulesPhaseAutomaticTax */
        schedules_phase_automatic_tax: {
            /** @description Whether Stripe automatically computes tax on invoices created during this phase. */
            enabled: boolean;
            /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
            liability?: components["schemas"]["connect_account_reference"] | null;
        };
        /** SecretServiceResourceScope */
        secret_service_resource_scope: {
            /**
             * @description The secret scope type.
             * @enum {string}
             */
            type: "account" | "user";
            /** @description The user ID, if type is set to "user" */
            user?: string;
        };
        /** sepa_debit_generated_from */
        sepa_debit_generated_from: {
            /** @description The ID of the Charge that generated this PaymentMethod, if any. */
            charge?: (string | components["schemas"]["charge"]) | null;
            /** @description The ID of the SetupAttempt that generated this PaymentMethod, if any. */
            setup_attempt?: (string | components["schemas"]["setup_attempt"]) | null;
        };
        /**
         * PaymentFlowsSetupIntentSetupAttempt
         * @description A SetupAttempt describes one attempted confirmation of a SetupIntent,
         *     whether that confirmation is successful or unsuccessful. You can use
         *     SetupAttempts to inspect details of a specific attempt at setting up a
         *     payment method using a SetupIntent.
         */
        setup_attempt: {
            /** @description The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation. */
            application?: (string | components["schemas"]["application"]) | null;
            /** @description If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
             *
             *     It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer. */
            attach_to_self?: boolean;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /** @description Indicates the directions of money movement for which this payment method is intended to be used.
             *
             *     Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes. */
            flow_directions?: ("inbound" | "outbound")[] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "setup_attempt";
            /** @description The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation. */
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            /** @description ID of the payment method used with this SetupAttempt. */
            payment_method: string | components["schemas"]["payment_method"];
            payment_method_details: components["schemas"]["setup_attempt_payment_method_details"];
            /** @description The error encountered during this attempt to confirm the SetupIntent, if any. */
            setup_error?: components["schemas"]["api_errors"] | null;
            /** @description ID of the SetupIntent that this attempt belongs to. */
            setup_intent: string | components["schemas"]["setup_intent"];
            /** @description Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`. */
            status: string;
            /** @description The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`. */
            usage: string;
        };
        /** SetupAttemptPaymentMethodDetails */
        setup_attempt_payment_method_details: {
            acss_debit?: components["schemas"]["setup_attempt_payment_method_details_acss_debit"];
            amazon_pay?: components["schemas"]["setup_attempt_payment_method_details_amazon_pay"];
            au_becs_debit?: components["schemas"]["setup_attempt_payment_method_details_au_becs_debit"];
            bacs_debit?: components["schemas"]["setup_attempt_payment_method_details_bacs_debit"];
            bancontact?: components["schemas"]["setup_attempt_payment_method_details_bancontact"];
            boleto?: components["schemas"]["setup_attempt_payment_method_details_boleto"];
            card?: components["schemas"]["setup_attempt_payment_method_details_card"];
            card_present?: components["schemas"]["setup_attempt_payment_method_details_card_present"];
            cashapp?: components["schemas"]["setup_attempt_payment_method_details_cashapp"];
            ideal?: components["schemas"]["setup_attempt_payment_method_details_ideal"];
            kakao_pay?: components["schemas"]["setup_attempt_payment_method_details_kakao_pay"];
            klarna?: components["schemas"]["setup_attempt_payment_method_details_klarna"];
            kr_card?: components["schemas"]["setup_attempt_payment_method_details_kr_card"];
            link?: components["schemas"]["setup_attempt_payment_method_details_link"];
            paypal?: components["schemas"]["setup_attempt_payment_method_details_paypal"];
            revolut_pay?: components["schemas"]["setup_attempt_payment_method_details_revolut_pay"];
            sepa_debit?: components["schemas"]["setup_attempt_payment_method_details_sepa_debit"];
            sofort?: components["schemas"]["setup_attempt_payment_method_details_sofort"];
            /** @description The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method. */
            type: string;
            us_bank_account?: components["schemas"]["setup_attempt_payment_method_details_us_bank_account"];
        };
        /** setup_attempt_payment_method_details_acss_debit */
        setup_attempt_payment_method_details_acss_debit: Record<string, never>;
        /** setup_attempt_payment_method_details_amazon_pay */
        setup_attempt_payment_method_details_amazon_pay: Record<string, never>;
        /** setup_attempt_payment_method_details_au_becs_debit */
        setup_attempt_payment_method_details_au_becs_debit: Record<string, never>;
        /** setup_attempt_payment_method_details_bacs_debit */
        setup_attempt_payment_method_details_bacs_debit: Record<string, never>;
        /** setup_attempt_payment_method_details_bancontact */
        setup_attempt_payment_method_details_bancontact: {
            /** @description Bank code of bank associated with the bank account. */
            bank_code?: string | null;
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Bank Identifier Code of the bank associated with the bank account. */
            bic?: string | null;
            /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            /** @description Last four characters of the IBAN. */
            iban_last4?: string | null;
            /**
             * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
             *     Can be one of `en`, `de`, `fr`, or `nl`
             * @enum {string|null}
             */
            preferred_language?: "de" | "en" | "fr" | "nl" | null;
            /** @description Owner's verified full name. Values are verified or provided by Bancontact directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            verified_name?: string | null;
        };
        /** setup_attempt_payment_method_details_boleto */
        setup_attempt_payment_method_details_boleto: Record<string, never>;
        /** setup_attempt_payment_method_details_card */
        setup_attempt_payment_method_details_card: {
            /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
            brand?: string | null;
            /** @description Check results by Card networks on Card address and CVC at the time of authorization */
            checks?: components["schemas"]["setup_attempt_payment_method_details_card_checks"] | null;
            /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
            country?: string | null;
            /** @description Two-digit number representing the card's expiration month. */
            exp_month?: number | null;
            /** @description Four-digit number representing the card's expiration year. */
            exp_year?: number | null;
            /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
             *
             *     *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.* */
            fingerprint?: string | null;
            /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
            funding?: string | null;
            /** @description The last four digits of the card. */
            last4?: string | null;
            /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
            network?: string | null;
            /** @description Populated if this authorization used 3D Secure authentication. */
            three_d_secure?: components["schemas"]["three_d_secure_details"] | null;
            /** @description If this Card is part of a card wallet, this contains the details of the card wallet. */
            wallet?: components["schemas"]["setup_attempt_payment_method_details_card_wallet"] | null;
        };
        /** setup_attempt_payment_method_details_card_checks */
        setup_attempt_payment_method_details_card_checks: {
            /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            address_line1_check?: string | null;
            /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            address_postal_code_check?: string | null;
            /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            cvc_check?: string | null;
        };
        /** setup_attempt_payment_method_details_card_present */
        setup_attempt_payment_method_details_card_present: {
            /** @description The ID of the Card PaymentMethod which was generated by this SetupAttempt. */
            generated_card?: (string | components["schemas"]["payment_method"]) | null;
            /** @description Details about payments collected offline. */
            offline?: components["schemas"]["payment_method_details_card_present_offline"] | null;
        };
        /** setup_attempt_payment_method_details_card_wallet */
        setup_attempt_payment_method_details_card_wallet: {
            apple_pay?: components["schemas"]["payment_method_details_card_wallet_apple_pay"];
            google_pay?: components["schemas"]["payment_method_details_card_wallet_google_pay"];
            /**
             * @description The type of the card wallet, one of `apple_pay`, `google_pay`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
             * @enum {string}
             */
            type: "apple_pay" | "google_pay" | "link";
        };
        /** setup_attempt_payment_method_details_cashapp */
        setup_attempt_payment_method_details_cashapp: Record<string, never>;
        /** setup_attempt_payment_method_details_ideal */
        setup_attempt_payment_method_details_ideal: {
            /**
             * @description The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
             * @enum {string|null}
             */
            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe" | null;
            /**
             * @description The Bank Identifier Code of the customer's bank.
             * @enum {string|null}
             */
            bic?: "ABNANL2A" | "ASNBNL21" | "BITSNL2A" | "BUNQNL2A" | "FVLBNL22" | "HANDNL2A" | "INGBNL2A" | "KNABNL2H" | "MOYONL21" | "NNBANL2G" | "NTSBDEB1" | "RABONL2U" | "RBRBNL21" | "REVOIE23" | "REVOLT21" | "SNSBNL2A" | "TRIONL2U" | null;
            /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            /** @description Last four characters of the IBAN. */
            iban_last4?: string | null;
            /** @description Owner's verified full name. Values are verified or provided by iDEAL directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            verified_name?: string | null;
        };
        /** setup_attempt_payment_method_details_kakao_pay */
        setup_attempt_payment_method_details_kakao_pay: Record<string, never>;
        /** setup_attempt_payment_method_details_klarna */
        setup_attempt_payment_method_details_klarna: Record<string, never>;
        /** setup_attempt_payment_method_details_kr_card */
        setup_attempt_payment_method_details_kr_card: Record<string, never>;
        /** setup_attempt_payment_method_details_link */
        setup_attempt_payment_method_details_link: Record<string, never>;
        /** setup_attempt_payment_method_details_paypal */
        setup_attempt_payment_method_details_paypal: Record<string, never>;
        /** setup_attempt_payment_method_details_revolut_pay */
        setup_attempt_payment_method_details_revolut_pay: Record<string, never>;
        /** setup_attempt_payment_method_details_sepa_debit */
        setup_attempt_payment_method_details_sepa_debit: Record<string, never>;
        /** setup_attempt_payment_method_details_sofort */
        setup_attempt_payment_method_details_sofort: {
            /** @description Bank code of bank associated with the bank account. */
            bank_code?: string | null;
            /** @description Name of the bank associated with the bank account. */
            bank_name?: string | null;
            /** @description Bank Identifier Code of the bank associated with the bank account. */
            bic?: string | null;
            /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            /** @description Last four characters of the IBAN. */
            iban_last4?: string | null;
            /**
             * @description Preferred language of the Sofort authorization page that the customer is redirected to.
             *     Can be one of `en`, `de`, `fr`, or `nl`
             * @enum {string|null}
             */
            preferred_language?: "de" | "en" | "fr" | "nl" | null;
            /** @description Owner's verified full name. Values are verified or provided by Sofort directly
             *     (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            verified_name?: string | null;
        };
        /** setup_attempt_payment_method_details_us_bank_account */
        setup_attempt_payment_method_details_us_bank_account: Record<string, never>;
        /**
         * SetupIntent
         * @description A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
         *     For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
         *     Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
         *
         *     Create a SetupIntent when you're ready to collect your customer's payment credentials.
         *     Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
         *     The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
         *     you through the setup process.
         *
         *     Successful SetupIntents result in payment credentials that are optimized for future payments.
         *     For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
         *     [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
         *     to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
         *     If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
         *     it automatically attaches the resulting payment method to that Customer after successful setup.
         *     We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
         *     PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
         *
         *     By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
         *
         *     Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
         */
        setup_intent: {
            /** @description ID of the Connect application that created the SetupIntent. */
            application?: (string | components["schemas"]["application"]) | null;
            /** @description If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
             *
             *     It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer. */
            attach_to_self?: boolean;
            /** @description Settings for dynamic payment methods compatible with this Setup Intent */
            automatic_payment_methods?: components["schemas"]["payment_flows_automatic_payment_methods_setup_intent"] | null;
            /**
             * @description Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
             * @enum {string|null}
             */
            cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer" | null;
            /** @description The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
             *
             *     The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret. */
            client_secret?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description ID of the Customer this SetupIntent belongs to, if one exists.
             *
             *     If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent. */
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Indicates the directions of money movement for which this payment method is intended to be used.
             *
             *     Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes. */
            flow_directions?: ("inbound" | "outbound")[] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The error encountered in the previous SetupIntent confirmation. */
            last_setup_error?: components["schemas"]["api_errors"] | null;
            /** @description The most recent SetupAttempt for this SetupIntent. */
            latest_attempt?: (string | components["schemas"]["setup_attempt"]) | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description ID of the multi use Mandate generated by the SetupIntent. */
            mandate?: (string | components["schemas"]["mandate"]) | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description If present, this property tells you what actions you need to take in order for your customer to continue payment setup. */
            next_action?: components["schemas"]["setup_intent_next_action"] | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "setup_intent";
            /** @description The account (if any) for which the setup is intended. */
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            /** @description ID of the payment method used with this SetupIntent. If the payment method is `card_present` and isn't a digital wallet, then the [generated_card](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card_present-generated_card) associated with the `latest_attempt` is attached to the Customer instead. */
            payment_method?: (string | components["schemas"]["payment_method"]) | null;
            /** @description Information about the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) used for this Setup Intent. */
            payment_method_configuration_details?: components["schemas"]["payment_method_config_biz_payment_method_configuration_details"] | null;
            /** @description Payment method-specific configuration for this SetupIntent. */
            payment_method_options?: components["schemas"]["setup_intent_payment_method_options"] | null;
            /** @description The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */
            payment_method_types: string[];
            /** @description ID of the single_use Mandate generated by the SetupIntent. */
            single_use_mandate?: (string | components["schemas"]["mandate"]) | null;
            /**
             * @description [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
             * @enum {string}
             */
            status: "canceled" | "processing" | "requires_action" | "requires_confirmation" | "requires_payment_method" | "succeeded";
            /** @description Indicates how the payment method is intended to be used in the future.
             *
             *     Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`. */
            usage: string;
        };
        /** SetupIntentNextAction */
        setup_intent_next_action: {
            cashapp_handle_redirect_or_display_qr_code?: components["schemas"]["payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code"];
            redirect_to_url?: components["schemas"]["setup_intent_next_action_redirect_to_url"];
            /** @description Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
            type: string;
            /** @description When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
            use_stripe_sdk?: Record<string, never>;
            verify_with_microdeposits?: components["schemas"]["setup_intent_next_action_verify_with_microdeposits"];
        };
        /** SetupIntentNextActionRedirectToUrl */
        setup_intent_next_action_redirect_to_url: {
            /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
            return_url?: string | null;
            /** @description The URL you must redirect your customer to in order to authenticate. */
            url?: string | null;
        };
        /** SetupIntentNextActionVerifyWithMicrodeposits */
        setup_intent_next_action_verify_with_microdeposits: {
            /**
             * Format: unix-time
             * @description The timestamp when the microdeposits are expected to land.
             */
            arrival_date: number;
            /** @description The URL for the hosted verification page, which allows customers to verify their bank account. */
            hosted_verification_url: string;
            /**
             * @description The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
             * @enum {string|null}
             */
            microdeposit_type?: "amounts" | "descriptor_code" | null;
        };
        /** SetupIntentPaymentMethodOptions */
        setup_intent_payment_method_options: {
            acss_debit?: components["schemas"]["setup_intent_payment_method_options_acss_debit"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            amazon_pay?: components["schemas"]["setup_intent_payment_method_options_amazon_pay"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            bacs_debit?: components["schemas"]["setup_intent_payment_method_options_bacs_debit"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            card?: components["schemas"]["setup_intent_payment_method_options_card"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            card_present?: components["schemas"]["setup_intent_payment_method_options_card_present"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            link?: components["schemas"]["setup_intent_payment_method_options_link"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            paypal?: components["schemas"]["setup_intent_payment_method_options_paypal"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            sepa_debit?: components["schemas"]["setup_intent_payment_method_options_sepa_debit"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            us_bank_account?: components["schemas"]["setup_intent_payment_method_options_us_bank_account"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
        };
        /** setup_intent_payment_method_options_acss_debit */
        setup_intent_payment_method_options_acss_debit: {
            /**
             * @description Currency supported by the bank account
             * @enum {string|null}
             */
            currency?: "cad" | "usd" | null;
            mandate_options?: components["schemas"]["setup_intent_payment_method_options_mandate_options_acss_debit"];
            /**
             * @description Bank account verification method.
             * @enum {string}
             */
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        /** setup_intent_payment_method_options_amazon_pay */
        setup_intent_payment_method_options_amazon_pay: Record<string, never>;
        /** setup_intent_payment_method_options_bacs_debit */
        setup_intent_payment_method_options_bacs_debit: {
            mandate_options?: components["schemas"]["setup_intent_payment_method_options_mandate_options_bacs_debit"];
        };
        /** setup_intent_payment_method_options_card */
        setup_intent_payment_method_options_card: {
            /** @description Configuration options for setting up an eMandate for cards issued in India. */
            mandate_options?: components["schemas"]["setup_intent_payment_method_options_card_mandate_options"] | null;
            /**
             * @description Selected network to process this SetupIntent on. Depends on the available networks of the card attached to the setup intent. Can be only set confirm-time.
             * @enum {string|null}
             */
            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa" | null;
            /**
             * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
             * @enum {string|null}
             */
            request_three_d_secure?: "any" | "automatic" | "challenge" | null;
        };
        /** setup_intent_payment_method_options_card_mandate_options */
        setup_intent_payment_method_options_card_mandate_options: {
            /** @description Amount to be charged for future payments. */
            amount: number;
            /**
             * @description One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
             * @enum {string}
             */
            amount_type: "fixed" | "maximum";
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description A description of the mandate or subscription that is meant to be displayed to the customer. */
            description?: string | null;
            /**
             * Format: unix-time
             * @description End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
             */
            end_date?: number | null;
            /**
             * @description Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
             * @enum {string}
             */
            interval: "day" | "month" | "sporadic" | "week" | "year";
            /** @description The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`. */
            interval_count?: number | null;
            /** @description Unique identifier for the mandate or subscription. */
            reference: string;
            /**
             * Format: unix-time
             * @description Start date of the mandate or subscription. Start date should not be lesser than yesterday.
             */
            start_date: number;
            /** @description Specifies the type of mandates supported. Possible values are `india`. */
            supported_types?: "india"[] | null;
        };
        /** setup_intent_payment_method_options_card_present */
        setup_intent_payment_method_options_card_present: Record<string, never>;
        /** setup_intent_payment_method_options_link */
        setup_intent_payment_method_options_link: Record<string, never>;
        /** setup_intent_payment_method_options_mandate_options_acss_debit */
        setup_intent_payment_method_options_mandate_options_acss_debit: {
            /** @description A URL for custom mandate text */
            custom_mandate_url?: string;
            /** @description List of Stripe products where this mandate can be selected automatically. */
            default_for?: ("invoice" | "subscription")[];
            /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
            interval_description?: string | null;
            /**
             * @description Payment schedule for the mandate.
             * @enum {string|null}
             */
            payment_schedule?: "combined" | "interval" | "sporadic" | null;
            /**
             * @description Transaction type of the mandate.
             * @enum {string|null}
             */
            transaction_type?: "business" | "personal" | null;
        };
        /** setup_intent_payment_method_options_mandate_options_bacs_debit */
        setup_intent_payment_method_options_mandate_options_bacs_debit: Record<string, never>;
        /** setup_intent_payment_method_options_mandate_options_sepa_debit */
        setup_intent_payment_method_options_mandate_options_sepa_debit: Record<string, never>;
        /** setup_intent_payment_method_options_paypal */
        setup_intent_payment_method_options_paypal: {
            /** @description The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer. */
            billing_agreement_id?: string | null;
        };
        /** setup_intent_payment_method_options_sepa_debit */
        setup_intent_payment_method_options_sepa_debit: {
            mandate_options?: components["schemas"]["setup_intent_payment_method_options_mandate_options_sepa_debit"];
        };
        /** setup_intent_payment_method_options_us_bank_account */
        setup_intent_payment_method_options_us_bank_account: {
            financial_connections?: components["schemas"]["linked_account_options_us_bank_account"];
            mandate_options?: components["schemas"]["payment_method_options_us_bank_account_mandate_options"];
            /**
             * @description Bank account verification method.
             * @enum {string}
             */
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        /** SetupIntentTypeSpecificPaymentMethodOptionsClient */
        setup_intent_type_specific_payment_method_options_client: {
            /**
             * @description Bank account verification method.
             * @enum {string}
             */
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        /** Shipping */
        shipping: {
            address?: components["schemas"]["address"];
            /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
            carrier?: string | null;
            /** @description Recipient name. */
            name?: string;
            /** @description Recipient phone (including extension). */
            phone?: string | null;
            /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
            tracking_number?: string | null;
        };
        /**
         * ShippingRate
         * @description Shipping rates describe the price of shipping presented to your customers and
         *     applied to a purchase. For more information, see [Charge for shipping](https://stripe.com/docs/payments/during-payment/charge-shipping).
         */
        shipping_rate: {
            /** @description Whether the shipping rate can be used for new purchases. Defaults to `true`. */
            active: boolean;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions. */
            delivery_estimate?: components["schemas"]["shipping_rate_delivery_estimate"] | null;
            /** @description The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions. */
            display_name?: string | null;
            fixed_amount?: components["schemas"]["shipping_rate_fixed_amount"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "shipping_rate";
            /**
             * @description Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
             * @enum {string|null}
             */
            tax_behavior?: "exclusive" | "inclusive" | "unspecified" | null;
            /** @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`. */
            tax_code?: (string | components["schemas"]["tax_code"]) | null;
            /**
             * @description The type of calculation to use on the shipping rate.
             * @enum {string}
             */
            type: "fixed_amount";
        };
        /** ShippingRateCurrencyOption */
        shipping_rate_currency_option: {
            /** @description A non-negative integer in cents representing how much to charge. */
            amount: number;
            /**
             * @description Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
             * @enum {string}
             */
            tax_behavior: "exclusive" | "inclusive" | "unspecified";
        };
        /** ShippingRateDeliveryEstimate */
        shipping_rate_delivery_estimate: {
            /** @description The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite. */
            maximum?: components["schemas"]["shipping_rate_delivery_estimate_bound"] | null;
            /** @description The lower bound of the estimated range. If empty, represents no lower bound. */
            minimum?: components["schemas"]["shipping_rate_delivery_estimate_bound"] | null;
        };
        /** ShippingRateDeliveryEstimateBound */
        shipping_rate_delivery_estimate_bound: {
            /**
             * @description A unit of time.
             * @enum {string}
             */
            unit: "business_day" | "day" | "hour" | "month" | "week";
            /** @description Must be greater than 0. */
            value: number;
        };
        /** ShippingRateFixedAmount */
        shipping_rate_fixed_amount: {
            /** @description A non-negative integer in cents representing how much to charge. */
            amount: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description Shipping rates defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
            currency_options?: {
                [key: string]: components["schemas"]["shipping_rate_currency_option"];
            };
        };
        /** SigmaScheduledQueryRunError */
        sigma_scheduled_query_run_error: {
            /** @description Information about the run failure. */
            message: string;
        };
        /**
         * Source
         * @description `Source` objects allow you to accept a variety of payment methods. They
         *     represent a customer's payment instrument, and can be used with the Stripe API
         *     just like a `Card` object: once chargeable, they can be charged, or can be
         *     attached to customers.
         *
         *     Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
         *     We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
         *     This newer API provides access to our latest features and payment method types.
         *
         *     Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
         */
        source: {
            ach_credit_transfer?: components["schemas"]["source_type_ach_credit_transfer"];
            ach_debit?: components["schemas"]["source_type_ach_debit"];
            acss_debit?: components["schemas"]["source_type_acss_debit"];
            alipay?: components["schemas"]["source_type_alipay"];
            /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
            amount?: number | null;
            au_becs_debit?: components["schemas"]["source_type_au_becs_debit"];
            bancontact?: components["schemas"]["source_type_bancontact"];
            card?: components["schemas"]["source_type_card"];
            card_present?: components["schemas"]["source_type_card_present"];
            /** @description The client secret of the source. Used for client-side retrieval using a publishable key. */
            client_secret: string;
            code_verification?: components["schemas"]["source_code_verification_flow"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. */
            currency?: string | null;
            /** @description The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. */
            customer?: string;
            eps?: components["schemas"]["source_type_eps"];
            /** @description The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
            flow: string;
            giropay?: components["schemas"]["source_type_giropay"];
            /** @description Unique identifier for the object. */
            id: string;
            ideal?: components["schemas"]["source_type_ideal"];
            klarna?: components["schemas"]["source_type_klarna"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            multibanco?: components["schemas"]["source_type_multibanco"];
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "source";
            /** @description Information about the owner of the payment instrument that may be used or required by particular source types. */
            owner?: components["schemas"]["source_owner"] | null;
            p24?: components["schemas"]["source_type_p24"];
            receiver?: components["schemas"]["source_receiver_flow"];
            redirect?: components["schemas"]["source_redirect_flow"];
            sepa_debit?: components["schemas"]["source_type_sepa_debit"];
            sofort?: components["schemas"]["source_type_sofort"];
            source_order?: components["schemas"]["source_order"];
            /** @description Extra information about a source. This will appear on your customer's statement every time you charge the source. */
            statement_descriptor?: string | null;
            /** @description The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. */
            status: string;
            three_d_secure?: components["schemas"]["source_type_three_d_secure"];
            /**
             * @description The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
             * @enum {string}
             */
            type: "ach_credit_transfer" | "ach_debit" | "acss_debit" | "alipay" | "au_becs_debit" | "bancontact" | "card" | "card_present" | "eps" | "giropay" | "ideal" | "klarna" | "multibanco" | "p24" | "sepa_debit" | "sofort" | "three_d_secure" | "wechat";
            /** @description Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
            usage?: string | null;
            wechat?: components["schemas"]["source_type_wechat"];
        };
        /** SourceCodeVerificationFlow */
        source_code_verification_flow: {
            /** @description The number of attempts remaining to authenticate the source object with a verification code. */
            attempts_remaining: number;
            /** @description The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
            status: string;
        };
        /**
         * SourceMandateNotification
         * @description Source mandate notifications should be created when a notification related to
         *     a source mandate must be sent to the payer. They will trigger a webhook or
         *     deliver an email to the customer.
         */
        source_mandate_notification: {
            acss_debit?: components["schemas"]["source_mandate_notification_acss_debit_data"];
            /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`. */
            amount?: number | null;
            bacs_debit?: components["schemas"]["source_mandate_notification_bacs_debit_data"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "source_mandate_notification";
            /** @description The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`. */
            reason: string;
            sepa_debit?: components["schemas"]["source_mandate_notification_sepa_debit_data"];
            source: components["schemas"]["source"];
            /** @description The status of the mandate notification. Valid statuses are `pending` or `submitted`. */
            status: string;
            /** @description The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`. */
            type: string;
        };
        /** SourceMandateNotificationAcssDebitData */
        source_mandate_notification_acss_debit_data: {
            /** @description The statement descriptor associate with the debit. */
            statement_descriptor?: string;
        };
        /** SourceMandateNotificationBacsDebitData */
        source_mandate_notification_bacs_debit_data: {
            /** @description Last 4 digits of the account number associated with the debit. */
            last4?: string;
        };
        /** SourceMandateNotificationSepaDebitData */
        source_mandate_notification_sepa_debit_data: {
            /** @description SEPA creditor ID. */
            creditor_identifier?: string;
            /** @description Last 4 digits of the account number associated with the debit. */
            last4?: string;
            /** @description Mandate reference associated with the debit. */
            mandate_reference?: string;
        };
        /** SourceOrder */
        source_order: {
            /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
            amount: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description The email address of the customer placing the order. */
            email?: string;
            /** @description List of items constituting the order. */
            items?: components["schemas"]["source_order_item"][] | null;
            shipping?: components["schemas"]["shipping"];
        };
        /** SourceOrderItem */
        source_order_item: {
            /** @description The amount (price) for this order item. */
            amount?: number | null;
            /** @description This currency of this order item. Required when `amount` is present. */
            currency?: string | null;
            /** @description Human-readable description for this order item. */
            description?: string | null;
            /** @description The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
            parent?: string | null;
            /** @description The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered. */
            quantity?: number;
            /** @description The type of this order item. Must be `sku`, `tax`, or `shipping`. */
            type?: string | null;
        };
        /** SourceOwner */
        source_owner: {
            /** @description Owner's address. */
            address?: components["schemas"]["address"] | null;
            /** @description Owner's email address. */
            email?: string | null;
            /** @description Owner's full name. */
            name?: string | null;
            /** @description Owner's phone number (including extension). */
            phone?: string | null;
            /** @description Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            verified_address?: components["schemas"]["address"] | null;
            /** @description Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            verified_email?: string | null;
            /** @description Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            verified_name?: string | null;
            /** @description Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
            verified_phone?: string | null;
        };
        /** SourceReceiverFlow */
        source_receiver_flow: {
            /** @description The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
            address?: string | null;
            /** @description The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency. */
            amount_charged: number;
            /** @description The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency. */
            amount_received: number;
            /** @description The total amount that was returned to the customer. The amount returned is expressed in the source's currency. */
            amount_returned: number;
            /** @description Type of refund attribute method, one of `email`, `manual`, or `none`. */
            refund_attributes_method: string;
            /** @description Type of refund attribute status, one of `missing`, `requested`, or `available`. */
            refund_attributes_status: string;
        };
        /** SourceRedirectFlow */
        source_redirect_flow: {
            /** @description The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
            failure_reason?: string | null;
            /** @description The URL you provide to redirect the customer to after they authenticated their payment. */
            return_url: string;
            /** @description The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
            status: string;
            /** @description The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
            url: string;
        };
        /**
         * SourceTransaction
         * @description Some payment methods have no required amount that a customer must send.
         *     Customers can be instructed to send any amount, and it can be made up of
         *     multiple transactions. As such, sources can have multiple associated
         *     transactions.
         */
        source_transaction: {
            ach_credit_transfer?: components["schemas"]["source_transaction_ach_credit_transfer_data"];
            /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver. */
            amount: number;
            chf_credit_transfer?: components["schemas"]["source_transaction_chf_credit_transfer_data"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            gbp_credit_transfer?: components["schemas"]["source_transaction_gbp_credit_transfer_data"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "source_transaction";
            paper_check?: components["schemas"]["source_transaction_paper_check_data"];
            sepa_credit_transfer?: components["schemas"]["source_transaction_sepa_credit_transfer_data"];
            /** @description The ID of the source this transaction is attached to. */
            source: string;
            /** @description The status of the transaction, one of `succeeded`, `pending`, or `failed`. */
            status: string;
            /**
             * @description The type of source this transaction is attached to.
             * @enum {string}
             */
            type: "ach_credit_transfer" | "ach_debit" | "alipay" | "bancontact" | "card" | "card_present" | "eps" | "giropay" | "ideal" | "klarna" | "multibanco" | "p24" | "sepa_debit" | "sofort" | "three_d_secure" | "wechat";
        };
        /** SourceTransactionAchCreditTransferData */
        source_transaction_ach_credit_transfer_data: {
            /** @description Customer data associated with the transfer. */
            customer_data?: string;
            /** @description Bank account fingerprint associated with the transfer. */
            fingerprint?: string;
            /** @description Last 4 digits of the account number associated with the transfer. */
            last4?: string;
            /** @description Routing number associated with the transfer. */
            routing_number?: string;
        };
        /** SourceTransactionChfCreditTransferData */
        source_transaction_chf_credit_transfer_data: {
            /** @description Reference associated with the transfer. */
            reference?: string;
            /** @description Sender's country address. */
            sender_address_country?: string;
            /** @description Sender's line 1 address. */
            sender_address_line1?: string;
            /** @description Sender's bank account IBAN. */
            sender_iban?: string;
            /** @description Sender's name. */
            sender_name?: string;
        };
        /** SourceTransactionGbpCreditTransferData */
        source_transaction_gbp_credit_transfer_data: {
            /** @description Bank account fingerprint associated with the Stripe owned bank account receiving the transfer. */
            fingerprint?: string;
            /** @description The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported. */
            funding_method?: string;
            /** @description Last 4 digits of sender account number associated with the transfer. */
            last4?: string;
            /** @description Sender entered arbitrary information about the transfer. */
            reference?: string;
            /** @description Sender account number associated with the transfer. */
            sender_account_number?: string;
            /** @description Sender name associated with the transfer. */
            sender_name?: string;
            /** @description Sender sort code associated with the transfer. */
            sender_sort_code?: string;
        };
        /** SourceTransactionPaperCheckData */
        source_transaction_paper_check_data: {
            /** @description Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch. */
            available_at?: string;
            /** @description Comma-separated list of invoice IDs associated with the paper check. */
            invoices?: string;
        };
        /** SourceTransactionSepaCreditTransferData */
        source_transaction_sepa_credit_transfer_data: {
            /** @description Reference associated with the transfer. */
            reference?: string;
            /** @description Sender's bank account IBAN. */
            sender_iban?: string;
            /** @description Sender's name. */
            sender_name?: string;
        };
        source_type_ach_credit_transfer: {
            account_number?: string | null;
            bank_name?: string | null;
            fingerprint?: string | null;
            refund_account_holder_name?: string | null;
            refund_account_holder_type?: string | null;
            refund_routing_number?: string | null;
            routing_number?: string | null;
            swift_code?: string | null;
        };
        source_type_ach_debit: {
            bank_name?: string | null;
            country?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            routing_number?: string | null;
            type?: string | null;
        };
        source_type_acss_debit: {
            bank_address_city?: string | null;
            bank_address_line_1?: string | null;
            bank_address_line_2?: string | null;
            bank_address_postal_code?: string | null;
            bank_name?: string | null;
            category?: string | null;
            country?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            routing_number?: string | null;
        };
        source_type_alipay: {
            data_string?: string | null;
            native_url?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_au_becs_debit: {
            bsb_number?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
        };
        source_type_bancontact: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            iban_last4?: string | null;
            preferred_language?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_card: {
            address_line1_check?: string | null;
            address_zip_check?: string | null;
            brand?: string | null;
            country?: string | null;
            cvc_check?: string | null;
            dynamic_last4?: string | null;
            exp_month?: number | null;
            exp_year?: number | null;
            fingerprint?: string;
            funding?: string | null;
            last4?: string | null;
            name?: string | null;
            three_d_secure?: string;
            tokenization_method?: string | null;
        };
        source_type_card_present: {
            application_cryptogram?: string;
            application_preferred_name?: string;
            authorization_code?: string | null;
            authorization_response_code?: string;
            brand?: string | null;
            country?: string | null;
            cvm_type?: string;
            data_type?: string | null;
            dedicated_file_name?: string;
            emv_auth_data?: string;
            evidence_customer_signature?: string | null;
            evidence_transaction_certificate?: string | null;
            exp_month?: number | null;
            exp_year?: number | null;
            fingerprint?: string;
            funding?: string | null;
            last4?: string | null;
            pos_device_id?: string | null;
            pos_entry_mode?: string;
            read_method?: string | null;
            reader?: string | null;
            terminal_verification_results?: string;
            transaction_status_information?: string;
        };
        source_type_eps: {
            reference?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_giropay: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_ideal: {
            bank?: string | null;
            bic?: string | null;
            iban_last4?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_klarna: {
            background_image_url?: string;
            client_token?: string | null;
            first_name?: string;
            last_name?: string;
            locale?: string;
            logo_url?: string;
            page_title?: string;
            pay_later_asset_urls_descriptive?: string;
            pay_later_asset_urls_standard?: string;
            pay_later_name?: string;
            pay_later_redirect_url?: string;
            pay_now_asset_urls_descriptive?: string;
            pay_now_asset_urls_standard?: string;
            pay_now_name?: string;
            pay_now_redirect_url?: string;
            pay_over_time_asset_urls_descriptive?: string;
            pay_over_time_asset_urls_standard?: string;
            pay_over_time_name?: string;
            pay_over_time_redirect_url?: string;
            payment_method_categories?: string;
            purchase_country?: string;
            purchase_type?: string;
            redirect_url?: string;
            shipping_delay?: number;
            shipping_first_name?: string;
            shipping_last_name?: string;
        };
        source_type_multibanco: {
            entity?: string | null;
            reference?: string | null;
            refund_account_holder_address_city?: string | null;
            refund_account_holder_address_country?: string | null;
            refund_account_holder_address_line1?: string | null;
            refund_account_holder_address_line2?: string | null;
            refund_account_holder_address_postal_code?: string | null;
            refund_account_holder_address_state?: string | null;
            refund_account_holder_name?: string | null;
            refund_iban?: string | null;
        };
        source_type_p24: {
            reference?: string | null;
        };
        source_type_sepa_debit: {
            bank_code?: string | null;
            branch_code?: string | null;
            country?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            mandate_reference?: string | null;
            mandate_url?: string | null;
        };
        source_type_sofort: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            country?: string | null;
            iban_last4?: string | null;
            preferred_language?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_three_d_secure: {
            address_line1_check?: string | null;
            address_zip_check?: string | null;
            authenticated?: boolean | null;
            brand?: string | null;
            card?: string | null;
            country?: string | null;
            customer?: string | null;
            cvc_check?: string | null;
            dynamic_last4?: string | null;
            exp_month?: number | null;
            exp_year?: number | null;
            fingerprint?: string;
            funding?: string | null;
            last4?: string | null;
            name?: string | null;
            three_d_secure?: string;
            tokenization_method?: string | null;
        };
        source_type_wechat: {
            prepay_id?: string;
            qr_code_url?: string | null;
            statement_descriptor?: string;
        };
        /**
         * Subscription
         * @description Subscriptions allow you to charge a customer on a recurring basis.
         *
         *     Related guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)
         */
        subscription: {
            /** @description ID of the Connect Application that created the subscription. */
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. */
            application_fee_percent?: number | null;
            automatic_tax: components["schemas"]["subscription_automatic_tax"];
            /**
             * Format: unix-time
             * @description The reference point that aligns future [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle) dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The timestamp is in UTC format.
             */
            billing_cycle_anchor: number;
            /** @description The fixed values used to calculate the `billing_cycle_anchor`. */
            billing_cycle_anchor_config?: components["schemas"]["subscriptions_resource_billing_cycle_anchor_config"] | null;
            /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
            billing_thresholds?: components["schemas"]["subscription_billing_thresholds"] | null;
            /**
             * Format: unix-time
             * @description A date in the future at which the subscription will automatically get canceled
             */
            cancel_at?: number | null;
            /** @description Whether this subscription will (if `status=active`) or did (if `status=canceled`) cancel at the end of the current billing period. */
            cancel_at_period_end: boolean;
            /**
             * Format: unix-time
             * @description If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
             */
            canceled_at?: number | null;
            /** @description Details about why this subscription was cancelled */
            cancellation_details?: components["schemas"]["cancellation_details"] | null;
            /**
             * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
             * @enum {string}
             */
            collection_method: "charge_automatically" | "send_invoice";
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /**
             * Format: unix-time
             * @description End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
             */
            current_period_end: number;
            /**
             * Format: unix-time
             * @description Start of the current period that the subscription has been invoiced for.
             */
            current_period_start: number;
            /** @description ID of the customer who owns the subscription. */
            customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
            /** @description Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`. */
            days_until_due?: number | null;
            /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
            default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
            /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
            default_source?: (string | components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"]) | null;
            /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
            default_tax_rates?: components["schemas"]["tax_rate"][] | null;
            /** @description The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
            description?: string | null;
            /** @description Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
            discount?: components["schemas"]["discount"] | null;
            /** @description The discounts applied to the subscription. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount. */
            discounts: (string | components["schemas"]["discount"])[];
            /**
             * Format: unix-time
             * @description If the subscription has ended, the date the subscription ended.
             */
            ended_at?: number | null;
            /** @description Unique identifier for the object. */
            id: string;
            invoice_settings: components["schemas"]["subscriptions_resource_subscription_invoice_settings"];
            /**
             * SubscriptionItemList
             * @description List of subscription items, each with an attached price.
             */
            items: {
                /** @description Details about each object. */
                data: components["schemas"]["subscription_item"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /** @description The most recent invoice this subscription has generated. */
            latest_invoice?: (string | components["schemas"]["invoice"]) | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * Format: unix-time
             * @description Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
             */
            next_pending_invoice_item_invoice?: number | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "subscription";
            /** @description The account (if any) the charge was made on behalf of for charges associated with this subscription. See the Connect documentation for details. */
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            /** @description If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment). */
            pause_collection?: components["schemas"]["subscriptions_resource_pause_collection"] | null;
            /** @description Payment settings passed on to invoices created by the subscription. */
            payment_settings?: components["schemas"]["subscriptions_resource_payment_settings"] | null;
            /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
            pending_invoice_item_interval?: components["schemas"]["subscription_pending_invoice_item_interval"] | null;
            /** @description You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2). */
            pending_setup_intent?: (string | components["schemas"]["setup_intent"]) | null;
            /** @description If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid. */
            pending_update?: components["schemas"]["subscriptions_resource_pending_update"] | null;
            /** @description The schedule attached to the subscription */
            schedule?: (string | components["schemas"]["subscription_schedule"]) | null;
            /**
             * Format: unix-time
             * @description Date when the subscription was first created. The date might differ from the `created` date due to backdating.
             */
            start_date: number;
            /**
             * @description Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`.
             *
             *     For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.
             *
             *     A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
             *
             *     A subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/docs/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged.
             *
             *     If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).
             *
             *     If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
             * @enum {string}
             */
            status: "active" | "canceled" | "incomplete" | "incomplete_expired" | "past_due" | "paused" | "trialing" | "unpaid";
            /** @description ID of the test clock this subscription belongs to. */
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
            /** @description The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
            transfer_data?: components["schemas"]["subscription_transfer_data"] | null;
            /**
             * Format: unix-time
             * @description If the subscription has a trial, the end of that trial.
             */
            trial_end?: number | null;
            /** @description Settings related to subscription trials. */
            trial_settings?: components["schemas"]["subscriptions_trials_resource_trial_settings"] | null;
            /**
             * Format: unix-time
             * @description If the subscription has a trial, the beginning of that trial.
             */
            trial_start?: number | null;
        };
        /** SubscriptionAutomaticTax */
        subscription_automatic_tax: {
            /** @description Whether Stripe automatically computes tax on this subscription. */
            enabled: boolean;
            /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
            liability?: components["schemas"]["connect_account_reference"] | null;
        };
        /** SubscriptionBillingThresholds */
        subscription_billing_thresholds: {
            /** @description Monetary threshold that triggers the subscription to create an invoice */
            amount_gte?: number | null;
            /** @description Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
            reset_billing_cycle_anchor?: boolean | null;
        };
        /** SubscriptionDetailsData */
        subscription_details_data: {
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) defined as subscription metadata when an invoice is created. Becomes an immutable snapshot of the subscription metadata at the time of invoice finalization.
             *      *Note: This attribute is populated only for invoices created on or after June 29, 2023.* */
            metadata?: {
                [key: string]: string;
            } | null;
        };
        /**
         * SubscriptionItem
         * @description Subscription items allow you to create customer subscriptions with more than
         *     one plan, making it easy to represent complex billing relationships.
         */
        subscription_item: {
            /** @description Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
            billing_thresholds?: components["schemas"]["subscription_item_billing_thresholds"] | null;
            /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
            created: number;
            /** @description The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount. */
            discounts: (string | components["schemas"]["discount"])[];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "subscription_item";
            price: components["schemas"]["price"];
            /** @description The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed. */
            quantity?: number;
            /** @description The `subscription` this `subscription_item` belongs to. */
            subscription: string;
            /** @description The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. */
            tax_rates?: components["schemas"]["tax_rate"][] | null;
        };
        /** SubscriptionItemBillingThresholds */
        subscription_item_billing_thresholds: {
            /** @description Usage threshold that triggers the subscription to create an invoice */
            usage_gte?: number | null;
        };
        /** subscription_payment_method_options_card */
        subscription_payment_method_options_card: {
            mandate_options?: components["schemas"]["invoice_mandate_options_card"];
            /**
             * @description Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time.
             * @enum {string|null}
             */
            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa" | null;
            /**
             * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
             * @enum {string|null}
             */
            request_three_d_secure?: "any" | "automatic" | "challenge" | null;
        };
        /** SubscriptionPendingInvoiceItemInterval */
        subscription_pending_invoice_item_interval: {
            /**
             * @description Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
             * @enum {string}
             */
            interval: "day" | "month" | "week" | "year";
            /** @description The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
            interval_count: number;
        };
        /**
         * SubscriptionSchedule
         * @description A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
         *
         *     Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
         */
        subscription_schedule: {
            /** @description ID of the Connect Application that created the schedule. */
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            /**
             * Format: unix-time
             * @description Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
             */
            canceled_at?: number | null;
            /**
             * Format: unix-time
             * @description Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
             */
            completed_at?: number | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. */
            current_phase?: components["schemas"]["subscription_schedule_current_phase"] | null;
            /** @description ID of the customer who owns the subscription schedule. */
            customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
            default_settings: components["schemas"]["subscription_schedules_resource_default_settings"];
            /**
             * @description Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
             * @enum {string}
             */
            end_behavior: "cancel" | "none" | "release" | "renew";
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "subscription_schedule";
            /** @description Configuration for the subscription schedule's phases. */
            phases: components["schemas"]["subscription_schedule_phase_configuration"][];
            /**
             * Format: unix-time
             * @description Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
             */
            released_at?: number | null;
            /** @description ID of the subscription once managed by the subscription schedule (if it is released). */
            released_subscription?: string | null;
            /**
             * @description The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
             * @enum {string}
             */
            status: "active" | "canceled" | "completed" | "not_started" | "released";
            /** @description ID of the subscription managed by the subscription schedule. */
            subscription?: (string | components["schemas"]["subscription"]) | null;
            /** @description ID of the test clock this subscription schedule belongs to. */
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
        };
        /**
         * SubscriptionScheduleAddInvoiceItem
         * @description An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.
         */
        subscription_schedule_add_invoice_item: {
            /** @description The stackable discounts that will be applied to the item. */
            discounts: components["schemas"]["discounts_resource_stackable_discount"][];
            /** @description ID of the price used to generate the invoice item. */
            price: string | components["schemas"]["price"] | components["schemas"]["deleted_price"];
            /** @description The quantity of the invoice item. */
            quantity?: number | null;
            /** @description The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item. */
            tax_rates?: components["schemas"]["tax_rate"][] | null;
        };
        /**
         * SubscriptionScheduleConfigurationItem
         * @description A phase item describes the price and quantity of a phase.
         */
        subscription_schedule_configuration_item: {
            /** @description Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
            billing_thresholds?: components["schemas"]["subscription_item_billing_thresholds"] | null;
            /** @description The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount. */
            discounts: components["schemas"]["discounts_resource_stackable_discount"][];
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description ID of the price to which the customer should be subscribed. */
            price: string | components["schemas"]["price"] | components["schemas"]["deleted_price"];
            /** @description Quantity of the plan to which the customer should be subscribed. */
            quantity?: number;
            /** @description The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. */
            tax_rates?: components["schemas"]["tax_rate"][] | null;
        };
        /** SubscriptionScheduleCurrentPhase */
        subscription_schedule_current_phase: {
            /**
             * Format: unix-time
             * @description The end of this phase of the subscription schedule.
             */
            end_date: number;
            /**
             * Format: unix-time
             * @description The start of this phase of the subscription schedule.
             */
            start_date: number;
        };
        /**
         * SubscriptionSchedulePhaseConfiguration
         * @description A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
         */
        subscription_schedule_phase_configuration: {
            /** @description A list of prices and quantities that will generate invoice items appended to the next invoice for this phase. */
            add_invoice_items: components["schemas"]["subscription_schedule_add_invoice_item"][];
            /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule. */
            application_fee_percent?: number | null;
            automatic_tax?: components["schemas"]["schedules_phase_automatic_tax"];
            /**
             * @description Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
             * @enum {string|null}
             */
            billing_cycle_anchor?: "automatic" | "phase_start" | null;
            /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
            billing_thresholds?: components["schemas"]["subscription_billing_thresholds"] | null;
            /**
             * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
             * @enum {string|null}
             */
            collection_method?: "charge_automatically" | "send_invoice" | null;
            /** @description ID of the coupon to use during this phase of the subscription schedule. */
            coupon?: (string | components["schemas"]["coupon"] | components["schemas"]["deleted_coupon"]) | null;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
            default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
            /** @description The default tax rates to apply to the subscription during this phase of the subscription schedule. */
            default_tax_rates?: components["schemas"]["tax_rate"][] | null;
            /** @description Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
            description?: string | null;
            /** @description The stackable discounts that will be applied to the subscription on this phase. Subscription item discounts are applied before subscription discounts. */
            discounts: components["schemas"]["discounts_resource_stackable_discount"][];
            /**
             * Format: unix-time
             * @description The end of this phase of the subscription schedule.
             */
            end_date: number;
            /** @description The invoice settings applicable during this phase. */
            invoice_settings?: components["schemas"]["invoice_setting_subscription_schedule_phase_setting"] | null;
            /** @description Subscription items to configure the subscription to during this phase of the subscription schedule. */
            items: components["schemas"]["subscription_schedule_configuration_item"][];
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`. */
            metadata?: {
                [key: string]: string;
            } | null;
            /** @description The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details. */
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            /**
             * @description If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
             * @enum {string}
             */
            proration_behavior: "always_invoice" | "create_prorations" | "none";
            /**
             * Format: unix-time
             * @description The start of this phase of the subscription schedule.
             */
            start_date: number;
            /** @description The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
            transfer_data?: components["schemas"]["subscription_transfer_data"] | null;
            /**
             * Format: unix-time
             * @description When the trial ends within the phase.
             */
            trial_end?: number | null;
        };
        /** SubscriptionSchedulesResourceDefaultSettings */
        subscription_schedules_resource_default_settings: {
            /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule. */
            application_fee_percent?: number | null;
            automatic_tax?: components["schemas"]["subscription_schedules_resource_default_settings_automatic_tax"];
            /**
             * @description Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
             * @enum {string}
             */
            billing_cycle_anchor: "automatic" | "phase_start";
            /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
            billing_thresholds?: components["schemas"]["subscription_billing_thresholds"] | null;
            /**
             * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
             * @enum {string|null}
             */
            collection_method?: "charge_automatically" | "send_invoice" | null;
            /** @description ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
            default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
            /** @description Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
            description?: string | null;
            invoice_settings: components["schemas"]["invoice_setting_subscription_schedule_setting"];
            /** @description The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details. */
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            /** @description The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
            transfer_data?: components["schemas"]["subscription_transfer_data"] | null;
        };
        /** SubscriptionSchedulesResourceDefaultSettingsAutomaticTax */
        subscription_schedules_resource_default_settings_automatic_tax: {
            /** @description Whether Stripe automatically computes tax on invoices created during this phase. */
            enabled: boolean;
            /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
            liability?: components["schemas"]["connect_account_reference"] | null;
        };
        /** SubscriptionTransferData */
        subscription_transfer_data: {
            /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
            amount_percent?: number | null;
            /** @description The account where funds from the payment will be transferred to upon payment success. */
            destination: string | components["schemas"]["account"];
        };
        /** SubscriptionsResourceBillingCycleAnchorConfig */
        subscriptions_resource_billing_cycle_anchor_config: {
            /** @description The day of the month of the billing_cycle_anchor. */
            day_of_month: number;
            /** @description The hour of the day of the billing_cycle_anchor. */
            hour?: number | null;
            /** @description The minute of the hour of the billing_cycle_anchor. */
            minute?: number | null;
            /** @description The month to start full cycle billing periods. */
            month?: number | null;
            /** @description The second of the minute of the billing_cycle_anchor. */
            second?: number | null;
        };
        /**
         * SubscriptionsResourcePauseCollection
         * @description The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
         *     should be paused.
         */
        subscriptions_resource_pause_collection: {
            /**
             * @description The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
             * @enum {string}
             */
            behavior: "keep_as_draft" | "mark_uncollectible" | "void";
            /**
             * Format: unix-time
             * @description The time after which the subscription will resume collecting payments.
             */
            resumes_at?: number | null;
        };
        /** SubscriptionsResourcePaymentMethodOptions */
        subscriptions_resource_payment_method_options: {
            /** @description This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription. */
            acss_debit?: components["schemas"]["invoice_payment_method_options_acss_debit"] | null;
            /** @description This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription. */
            bancontact?: components["schemas"]["invoice_payment_method_options_bancontact"] | null;
            /** @description This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription. */
            card?: components["schemas"]["subscription_payment_method_options_card"] | null;
            /** @description This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription. */
            customer_balance?: components["schemas"]["invoice_payment_method_options_customer_balance"] | null;
            /** @description This sub-hash contains details about the Konbini payment method options to pass to invoices created by the subscription. */
            konbini?: components["schemas"]["invoice_payment_method_options_konbini"] | null;
            /** @description This sub-hash contains details about the SEPA Direct Debit payment method options to pass to invoices created by the subscription. */
            sepa_debit?: components["schemas"]["invoice_payment_method_options_sepa_debit"] | null;
            /** @description This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription. */
            us_bank_account?: components["schemas"]["invoice_payment_method_options_us_bank_account"] | null;
        };
        /** SubscriptionsResourcePaymentSettings */
        subscriptions_resource_payment_settings: {
            /** @description Payment-method-specific configuration to provide to invoices created by the subscription. */
            payment_method_options?: components["schemas"]["subscriptions_resource_payment_method_options"] | null;
            /** @description The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
            payment_method_types?: ("ach_credit_transfer" | "ach_debit" | "acss_debit" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "jp_credit_transfer" | "kakao_pay" | "konbini" | "kr_card" | "link" | "multibanco" | "naver_pay" | "p24" | "payco" | "paynow" | "paypal" | "promptpay" | "revolut_pay" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "swish" | "us_bank_account" | "wechat_pay")[] | null;
            /**
             * @description Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off`.
             * @enum {string|null}
             */
            save_default_payment_method?: "off" | "on_subscription" | null;
        };
        /**
         * SubscriptionsResourcePendingUpdate
         * @description Pending Updates store the changes pending from a previous update that will be applied
         *     to the Subscription upon successful payment.
         */
        subscriptions_resource_pending_update: {
            /**
             * Format: unix-time
             * @description If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
             */
            billing_cycle_anchor?: number | null;
            /**
             * Format: unix-time
             * @description The point after which the changes reflected by this update will be discarded and no longer applied.
             */
            expires_at: number;
            /** @description List of subscription items, each with an attached plan, that will be set if the update is applied. */
            subscription_items?: components["schemas"]["subscription_item"][] | null;
            /**
             * Format: unix-time
             * @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
             */
            trial_end?: number | null;
            /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
            trial_from_plan?: boolean | null;
        };
        /** SubscriptionsResourceSubscriptionInvoiceSettings */
        subscriptions_resource_subscription_invoice_settings: {
            /** @description The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription. */
            account_tax_ids?: (string | components["schemas"]["tax_id"] | components["schemas"]["deleted_tax_id"])[] | null;
            issuer: components["schemas"]["connect_account_reference"];
        };
        /**
         * SubscriptionsTrialsResourceEndBehavior
         * @description Defines how a subscription behaves when a free trial ends.
         */
        subscriptions_trials_resource_end_behavior: {
            /**
             * @description Indicates how the subscription should change when the trial ends if the user did not provide a payment method.
             * @enum {string}
             */
            missing_payment_method: "cancel" | "create_invoice" | "pause";
        };
        /**
         * SubscriptionsTrialsResourceTrialSettings
         * @description Configures how this subscription behaves during the trial period.
         */
        subscriptions_trials_resource_trial_settings: {
            end_behavior: components["schemas"]["subscriptions_trials_resource_end_behavior"];
        };
        /**
         * TaxProductResourceTaxCalculation
         * @description A Tax Calculation allows you to calculate the tax to collect from your customer.
         *
         *     Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom)
         */
        "tax.calculation": {
            /** @description Total amount after taxes in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount_total: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource. */
            customer?: string | null;
            customer_details: components["schemas"]["tax_product_resource_customer_details"];
            /**
             * Format: unix-time
             * @description Timestamp of date at which the tax calculation will expire.
             */
            expires_at?: number | null;
            /** @description Unique identifier for the calculation. */
            id?: string | null;
            /**
             * TaxProductResourceTaxCalculationLineItemList
             * @description The list of items the customer is purchasing.
             */
            line_items?: {
                /** @description Details about each object. */
                data: components["schemas"]["tax.calculation_line_item"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            } | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax.calculation";
            /** @description The details of the ship from location, such as the address. */
            ship_from_details?: components["schemas"]["tax_product_resource_ship_from_details"] | null;
            /** @description The shipping cost details for the calculation. */
            shipping_cost?: components["schemas"]["tax_product_resource_tax_calculation_shipping_cost"] | null;
            /** @description The amount of tax to be collected on top of the line item prices. */
            tax_amount_exclusive: number;
            /** @description The amount of tax already included in the line item prices. */
            tax_amount_inclusive: number;
            /** @description Breakdown of individual tax amounts that add up to the total. */
            tax_breakdown: components["schemas"]["tax_product_resource_tax_breakdown"][];
            /**
             * Format: unix-time
             * @description Timestamp of date at which the tax rules and rates in effect applies for the calculation.
             */
            tax_date: number;
        };
        /** TaxProductResourceTaxCalculationLineItem */
        "tax.calculation_line_item": {
            /** @description The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount. */
            amount: number;
            /** @description The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount_tax: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax.calculation_line_item";
            /** @description The ID of an existing [Product](https://stripe.com/docs/api/products/object). */
            product?: string | null;
            /** @description The number of units of the item being purchased. For reversals, this is the quantity reversed. */
            quantity: number;
            /** @description A custom identifier for this line item. */
            reference?: string | null;
            /**
             * @description Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
             * @enum {string}
             */
            tax_behavior: "exclusive" | "inclusive";
            /** @description Detailed account of taxes relevant to this line item. */
            tax_breakdown?: components["schemas"]["tax_product_resource_line_item_tax_breakdown"][] | null;
            /** @description The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource. */
            tax_code: string;
        };
        /**
         * TaxProductRegistrationsResourceTaxRegistration
         * @description A Tax `Registration` lets us know that your business is registered to collect tax on payments within a region, enabling you to [automatically collect tax](https://stripe.com/docs/tax).
         *
         *     Stripe doesn't register on your behalf with the relevant authorities when you create a Tax `Registration` object. For more information on how to register to collect tax, see [our guide](https://stripe.com/docs/tax/registering).
         *
         *     Related guide: [Using the Registrations API](https://stripe.com/docs/tax/registrations-api)
         */
        "tax.registration": {
            /**
             * Format: unix-time
             * @description Time at which the registration becomes active. Measured in seconds since the Unix epoch.
             */
            active_from: number;
            /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country: string;
            country_options: components["schemas"]["tax_product_registrations_resource_country_options"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /**
             * Format: unix-time
             * @description If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. Measured in seconds since the Unix epoch.
             */
            expires_at?: number | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax.registration";
            /**
             * @description The status of the registration. This field is present for convenience and can be deduced from `active_from` and `expires_at`.
             * @enum {string}
             */
            status: "active" | "expired" | "scheduled";
        };
        /**
         * TaxProductResourceTaxSettings
         * @description You can use Tax `Settings` to manage configurations used by Stripe Tax calculations.
         *
         *     Related guide: [Using the Settings API](https://stripe.com/docs/tax/settings-api)
         */
        "tax.settings": {
            defaults: components["schemas"]["tax_product_resource_tax_settings_defaults"];
            /** @description The place where your business is located. */
            head_office?: components["schemas"]["tax_product_resource_tax_settings_head_office"] | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax.settings";
            /**
             * @description The status of the Tax `Settings`.
             * @enum {string}
             */
            status: "active" | "pending";
            status_details: components["schemas"]["tax_product_resource_tax_settings_status_details"];
        };
        /**
         * TaxProductResourceTaxTransaction
         * @description A Tax Transaction records the tax collected from or refunded to your customer.
         *
         *     Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom#tax-transaction)
         */
        "tax.transaction": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource. */
            customer?: string | null;
            customer_details: components["schemas"]["tax_product_resource_customer_details"];
            /** @description Unique identifier for the transaction. */
            id: string;
            /**
             * TaxProductResourceTaxTransactionLineItemList
             * @description The tax collected or refunded, by line item.
             */
            line_items?: {
                /** @description Details about each object. */
                data: components["schemas"]["tax.transaction_line_item"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            } | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax.transaction";
            /**
             * Format: unix-time
             * @description The Unix timestamp representing when the tax liability is assumed or reduced.
             */
            posted_at: number;
            /** @description A custom unique identifier, such as 'myOrder_123'. */
            reference: string;
            /** @description If `type=reversal`, contains information about what was reversed. */
            reversal?: components["schemas"]["tax_product_resource_tax_transaction_resource_reversal"] | null;
            /** @description The details of the ship from location, such as the address. */
            ship_from_details?: components["schemas"]["tax_product_resource_ship_from_details"] | null;
            /** @description The shipping cost details for the transaction. */
            shipping_cost?: components["schemas"]["tax_product_resource_tax_transaction_shipping_cost"] | null;
            /**
             * Format: unix-time
             * @description Timestamp of date at which the tax rules and rates in effect applies for the calculation.
             */
            tax_date: number;
            /**
             * @description If `reversal`, this transaction reverses an earlier transaction.
             * @enum {string}
             */
            type: "reversal" | "transaction";
        };
        /** TaxProductResourceTaxTransactionLineItem */
        "tax.transaction_line_item": {
            /** @description The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount. */
            amount: number;
            /** @description The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount_tax: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax.transaction_line_item";
            /** @description The ID of an existing [Product](https://stripe.com/docs/api/products/object). */
            product?: string | null;
            /** @description The number of units of the item being purchased. For reversals, this is the quantity reversed. */
            quantity: number;
            /** @description A custom identifier for this line item in the transaction. */
            reference: string;
            /** @description If `type=reversal`, contains information about what was reversed. */
            reversal?: components["schemas"]["tax_product_resource_tax_transaction_line_item_resource_reversal"] | null;
            /**
             * @description Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
             * @enum {string}
             */
            tax_behavior: "exclusive" | "inclusive";
            /** @description The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource. */
            tax_code: string;
            /**
             * @description If `reversal`, this line item reverses an earlier transaction.
             * @enum {string}
             */
            type: "reversal" | "transaction";
        };
        /**
         * TaxProductResourceTaxCode
         * @description [Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.
         */
        tax_code: {
            /** @description A detailed description of which types of products the tax code represents. */
            description: string;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description A short name for the tax code. */
            name: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax_code";
        };
        /** TaxDeductedAtSource */
        tax_deducted_at_source: {
            /** @description Unique identifier for the object. */
            id: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax_deducted_at_source";
            /**
             * Format: unix-time
             * @description The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
             */
            period_end: number;
            /**
             * Format: unix-time
             * @description The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
             */
            period_start: number;
            /** @description The TAN that was supplied to Stripe when TDS was assessed */
            tax_deduction_account_number: string;
        };
        /** TaxIDsOwner */
        tax_i_ds_owner: {
            /** @description The account being referenced when `type` is `account`. */
            account?: string | components["schemas"]["account"];
            /** @description The Connect Application being referenced when `type` is `application`. */
            application?: string | components["schemas"]["application"];
            /** @description The customer being referenced when `type` is `customer`. */
            customer?: string | components["schemas"]["customer"];
            /**
             * @description Type of owner referenced.
             * @enum {string}
             */
            type: "account" | "application" | "customer" | "self";
        };
        /**
         * tax_id
         * @description You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers) or account.
         *     Customer and account tax IDs get displayed on related invoices and credit notes.
         *
         *     Related guides: [Customer tax identification numbers](https://stripe.com/docs/billing/taxes/tax-ids), [Account tax IDs](https://stripe.com/docs/invoicing/connect#account-tax-ids)
         */
        tax_id: {
            /** @description Two-letter ISO code representing the country of the tax ID. */
            country?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description ID of the customer. */
            customer?: (string | components["schemas"]["customer"]) | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax_id";
            /** @description The account or customer the tax ID belongs to. */
            owner?: components["schemas"]["tax_i_ds_owner"] | null;
            /**
             * @description Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `by_tin`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `li_vat`, `ma_vat`, `md_vat`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `tz_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `uz_tin`, `uz_vat`, `ve_rif`, `vn_tin`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
             * @enum {string}
             */
            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "unknown" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
            /** @description Value of the tax ID. */
            value: string;
            /** @description Tax ID verification information. */
            verification?: components["schemas"]["tax_id_verification"] | null;
        };
        /** tax_id_verification */
        tax_id_verification: {
            /**
             * @description Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
             * @enum {string}
             */
            status: "pending" | "unavailable" | "unverified" | "verified";
            /** @description Verified address. */
            verified_address?: string | null;
            /** @description Verified name. */
            verified_name?: string | null;
        };
        /** TaxProductRegistrationsResourceCountryOptions */
        tax_product_registrations_resource_country_options: {
            ae?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            at?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            au?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            be?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            bg?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            bh?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            by?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            ca?: components["schemas"]["tax_product_registrations_resource_country_options_canada"];
            ch?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            cl?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            co?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            cr?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            cy?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            cz?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            de?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            dk?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            ec?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            ee?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            eg?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            es?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            fi?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            fr?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            gb?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            ge?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            gr?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            hr?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            hu?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            id?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            ie?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            is?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            it?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            jp?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            ke?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            kr?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            kz?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            lt?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            lu?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            lv?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            ma?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            md?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            mt?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            mx?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            my?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            ng?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            nl?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            no?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            nz?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            om?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            pl?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            pt?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            ro?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            rs?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            ru?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            sa?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            se?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            sg?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
            si?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            sk?: components["schemas"]["tax_product_registrations_resource_country_options_europe"];
            th?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            tr?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            tz?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            us?: components["schemas"]["tax_product_registrations_resource_country_options_united_states"];
            uz?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            vn?: components["schemas"]["tax_product_registrations_resource_country_options_simplified"];
            za?: components["schemas"]["tax_product_registrations_resource_country_options_default"];
        };
        /** TaxProductRegistrationsResourceCountryOptionsCaProvinceStandard */
        tax_product_registrations_resource_country_options_ca_province_standard: {
            /** @description Two-letter CA province code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)). */
            province: string;
        };
        /** TaxProductRegistrationsResourceCountryOptionsCanada */
        tax_product_registrations_resource_country_options_canada: {
            province_standard?: components["schemas"]["tax_product_registrations_resource_country_options_ca_province_standard"];
            /**
             * @description Type of registration in Canada.
             * @enum {string}
             */
            type: "province_standard" | "simplified" | "standard";
        };
        /** TaxProductRegistrationsResourceCountryOptionsDefault */
        tax_product_registrations_resource_country_options_default: {
            /**
             * @description Type of registration in `country`.
             * @enum {string}
             */
            type: "standard";
        };
        /** TaxProductRegistrationsResourceCountryOptionsEuStandard */
        tax_product_registrations_resource_country_options_eu_standard: {
            /**
             * @description Place of supply scheme used in an EU standard registration.
             * @enum {string}
             */
            place_of_supply_scheme: "small_seller" | "standard";
        };
        /** TaxProductRegistrationsResourceCountryOptionsEurope */
        tax_product_registrations_resource_country_options_europe: {
            standard?: components["schemas"]["tax_product_registrations_resource_country_options_eu_standard"];
            /**
             * @description Type of registration in an EU country.
             * @enum {string}
             */
            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
        };
        /** TaxProductRegistrationsResourceCountryOptionsSimplified */
        tax_product_registrations_resource_country_options_simplified: {
            /**
             * @description Type of registration in `country`.
             * @enum {string}
             */
            type: "simplified";
        };
        /** TaxProductRegistrationsResourceCountryOptionsUnitedStates */
        tax_product_registrations_resource_country_options_united_states: {
            local_amusement_tax?: components["schemas"]["tax_product_registrations_resource_country_options_us_local_amusement_tax"];
            local_lease_tax?: components["schemas"]["tax_product_registrations_resource_country_options_us_local_lease_tax"];
            /** @description Two-letter US state code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)). */
            state: string;
            state_sales_tax?: components["schemas"]["tax_product_registrations_resource_country_options_us_state_sales_tax"];
            /**
             * @description Type of registration in the US.
             * @enum {string}
             */
            type: "local_amusement_tax" | "local_lease_tax" | "state_communications_tax" | "state_retail_delivery_fee" | "state_sales_tax";
        };
        /** TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTax */
        tax_product_registrations_resource_country_options_us_local_amusement_tax: {
            /** @description A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction. */
            jurisdiction: string;
        };
        /** TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTax */
        tax_product_registrations_resource_country_options_us_local_lease_tax: {
            /** @description A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction. */
            jurisdiction: string;
        };
        /** TaxProductRegistrationsResourceCountryOptionsUsStateSalesTax */
        tax_product_registrations_resource_country_options_us_state_sales_tax: {
            /** @description Elections for the state sales tax registration. */
            elections?: components["schemas"]["tax_product_registrations_resource_country_options_us_state_sales_tax_election"][];
        };
        /** TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxElection */
        tax_product_registrations_resource_country_options_us_state_sales_tax_election: {
            /** @description A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction. */
            jurisdiction?: string;
            /**
             * @description The type of the election for the state sales tax registration.
             * @enum {string}
             */
            type: "local_use_tax" | "simplified_sellers_use_tax" | "single_local_use_tax";
        };
        /** TaxProductResourceCustomerDetails */
        tax_product_resource_customer_details: {
            /** @description The customer's postal address (for example, home or business location). */
            address?: components["schemas"]["tax_product_resource_postal_address"] | null;
            /**
             * @description The type of customer address provided.
             * @enum {string|null}
             */
            address_source?: "billing" | "shipping" | null;
            /** @description The customer's IP address (IPv4 or IPv6). */
            ip_address?: string | null;
            /** @description The customer's tax IDs (for example, EU VAT numbers). */
            tax_ids: components["schemas"]["tax_product_resource_customer_details_resource_tax_id"][];
            /**
             * @description The taxability override used for taxation.
             * @enum {string}
             */
            taxability_override: "customer_exempt" | "none" | "reverse_charge";
        };
        /** TaxProductResourceCustomerDetailsResourceTaxId */
        tax_product_resource_customer_details_resource_tax_id: {
            /**
             * @description The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, or `unknown`
             * @enum {string}
             */
            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "unknown" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
            /** @description The value of the tax ID. */
            value: string;
        };
        /** TaxProductResourceJurisdiction */
        tax_product_resource_jurisdiction: {
            /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country: string;
            /** @description A human-readable name for the jurisdiction imposing the tax. */
            display_name: string;
            /**
             * @description Indicates the level of the jurisdiction imposing the tax.
             * @enum {string}
             */
            level: "city" | "country" | "county" | "district" | "state";
            /** @description [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
            state?: string | null;
        };
        /** TaxProductResourceLineItemTaxBreakdown */
        tax_product_resource_line_item_tax_breakdown: {
            /** @description The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount: number;
            jurisdiction: components["schemas"]["tax_product_resource_jurisdiction"];
            /**
             * @description Indicates whether the jurisdiction was determined by the origin (merchant's address) or destination (customer's address).
             * @enum {string}
             */
            sourcing: "destination" | "origin";
            /** @description Details regarding the rate for this tax. This field will be `null` when the tax is not imposed, for example if the product is exempt from tax. */
            tax_rate_details?: components["schemas"]["tax_product_resource_line_item_tax_rate_details"] | null;
            /**
             * @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
             * @enum {string}
             */
            taxability_reason: "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
            /** @description The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            taxable_amount: number;
        };
        /** TaxProductResourceLineItemTaxRateDetails */
        tax_product_resource_line_item_tax_rate_details: {
            /** @description A localized display name for tax type, intended to be human-readable. For example, "Local Sales and Use Tax", "Value-added tax (VAT)", or "Umsatzsteuer (USt.)". */
            display_name: string;
            /** @description The tax rate percentage as a string. For example, 8.5% is represented as "8.5". */
            percentage_decimal: string;
            /**
             * @description The tax type, such as `vat` or `sales_tax`.
             * @enum {string}
             */
            tax_type: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "retail_delivery_fee" | "rst" | "sales_tax" | "service_tax" | "vat";
        };
        /** TaxProductResourcePostalAddress */
        tax_product_resource_postal_address: {
            /** @description City, district, suburb, town, or village. */
            city?: string | null;
            /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country: string;
            /** @description Address line 1 (e.g., street, PO Box, or company name). */
            line1?: string | null;
            /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
            line2?: string | null;
            /** @description ZIP or postal code. */
            postal_code?: string | null;
            /** @description State/province as an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) subdivision code, without country prefix. Example: "NY" or "TX". */
            state?: string | null;
        };
        /** TaxProductResourceShipFromDetails */
        tax_product_resource_ship_from_details: {
            address: components["schemas"]["tax_product_resource_postal_address"];
        };
        /** TaxProductResourceTaxBreakdown */
        tax_product_resource_tax_breakdown: {
            /** @description The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount: number;
            /** @description Specifies whether the tax amount is included in the line item amount. */
            inclusive: boolean;
            tax_rate_details: components["schemas"]["tax_product_resource_tax_rate_details"];
            /**
             * @description The reasoning behind this tax, for example, if the product is tax exempt. We might extend the possible values for this field to support new tax rules.
             * @enum {string}
             */
            taxability_reason: "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
            /** @description The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            taxable_amount: number;
        };
        /** TaxProductResourceTaxCalculationShippingCost */
        tax_product_resource_tax_calculation_shipping_cost: {
            /** @description The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount. */
            amount: number;
            /** @description The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount_tax: number;
            /** @description The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object). */
            shipping_rate?: string;
            /**
             * @description Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
             * @enum {string}
             */
            tax_behavior: "exclusive" | "inclusive";
            /** @description Detailed account of taxes relevant to shipping cost. */
            tax_breakdown?: components["schemas"]["tax_product_resource_line_item_tax_breakdown"][];
            /** @description The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping. */
            tax_code: string;
        };
        /** TaxProductResourceTaxRateDetails */
        tax_product_resource_tax_rate_details: {
            /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string | null;
            /** @description The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate. */
            flat_amount?: components["schemas"]["tax_rate_flat_amount"] | null;
            /** @description The tax rate percentage as a string. For example, 8.5% is represented as `"8.5"`. */
            percentage_decimal: string;
            /**
             * @description Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location.
             * @enum {string|null}
             */
            rate_type?: "flat_amount" | "percentage" | null;
            /** @description State, county, province, or region. */
            state?: string | null;
            /**
             * @description The tax type, such as `vat` or `sales_tax`.
             * @enum {string|null}
             */
            tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "retail_delivery_fee" | "rst" | "sales_tax" | "service_tax" | "vat" | null;
        };
        /** TaxProductResourceTaxSettingsDefaults */
        tax_product_resource_tax_settings_defaults: {
            /**
             * @description Default [tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#tax-behavior) used to specify whether the price is considered inclusive of taxes or exclusive of taxes. If the item's price has a tax behavior set, it will take precedence over the default tax behavior.
             * @enum {string|null}
             */
            tax_behavior?: "exclusive" | "inclusive" | "inferred_by_currency" | null;
            /** @description Default [tax code](https://stripe.com/docs/tax/tax-categories) used to classify your products and prices. */
            tax_code?: string | null;
        };
        /** TaxProductResourceTaxSettingsHeadOffice */
        tax_product_resource_tax_settings_head_office: {
            address: components["schemas"]["address"];
        };
        /** TaxProductResourceTaxSettingsStatusDetails */
        tax_product_resource_tax_settings_status_details: {
            active?: components["schemas"]["tax_product_resource_tax_settings_status_details_resource_active"];
            pending?: components["schemas"]["tax_product_resource_tax_settings_status_details_resource_pending"];
        };
        /** TaxProductResourceTaxSettingsStatusDetailsResourceActive */
        tax_product_resource_tax_settings_status_details_resource_active: Record<string, never>;
        /** TaxProductResourceTaxSettingsStatusDetailsResourcePending */
        tax_product_resource_tax_settings_status_details_resource_pending: {
            /** @description The list of missing fields that are required to perform calculations. It includes the entry `head_office` when the status is `pending`. It is recommended to set the optional values even if they aren't listed as required for calculating taxes. Calculations can fail if missing fields aren't explicitly provided on every call. */
            missing_fields?: string[] | null;
        };
        /** TaxProductResourceTaxTransactionLineItemResourceReversal */
        tax_product_resource_tax_transaction_line_item_resource_reversal: {
            /** @description The `id` of the line item to reverse in the original transaction. */
            original_line_item: string;
        };
        /** TaxProductResourceTaxTransactionResourceReversal */
        tax_product_resource_tax_transaction_resource_reversal: {
            /** @description The `id` of the reversed `Transaction` object. */
            original_transaction?: string | null;
        };
        /** TaxProductResourceTaxTransactionShippingCost */
        tax_product_resource_tax_transaction_shipping_cost: {
            /** @description The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount. */
            amount: number;
            /** @description The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount_tax: number;
            /** @description The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object). */
            shipping_rate?: string;
            /**
             * @description Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
             * @enum {string}
             */
            tax_behavior: "exclusive" | "inclusive";
            /** @description The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping. */
            tax_code: string;
        };
        /**
         * TaxRate
         * @description Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
         *
         *     Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
         */
        tax_rate: {
            /** @description Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
            active: boolean;
            /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
            description?: string | null;
            /** @description The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. */
            display_name: string;
            /** @description Actual/effective tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true,
             *     this percentage reflects the rate actually used to calculate tax based on the product's taxability
             *     and whether the user is registered to collect taxes in the corresponding jurisdiction. */
            effective_percentage?: number | null;
            /** @description The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate. */
            flat_amount?: components["schemas"]["tax_rate_flat_amount"] | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description This specifies if the tax rate is inclusive or exclusive. */
            inclusive: boolean;
            /** @description The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
            jurisdiction?: string | null;
            /**
             * @description The level of the jurisdiction that imposes this tax rate. Will be `null` for manually defined tax rates.
             * @enum {string|null}
             */
            jurisdiction_level?: "city" | "country" | "county" | "district" | "multiple" | "state" | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "tax_rate";
            /** @description Tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions. */
            percentage: number;
            /**
             * @description Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location.
             * @enum {string|null}
             */
            rate_type?: "flat_amount" | "percentage" | null;
            /** @description [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
            state?: string | null;
            /**
             * @description The high-level tax type, such as `vat` or `sales_tax`.
             * @enum {string|null}
             */
            tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "retail_delivery_fee" | "rst" | "sales_tax" | "service_tax" | "vat" | null;
        };
        /**
         * TaxRateFlatAmount
         * @description The amount of the tax rate when the `rate_type`` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.
         */
        tax_rate_flat_amount: {
            /** @description Amount of the tax when the `rate_type` is `flat_amount`. This positive integer represents how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
            amount: number;
            /** @description Three-letter ISO currency code, in lowercase. */
            currency: string;
        };
        /**
         * TerminalConfigurationConfiguration
         * @description A Configurations object represents how features should be configured for terminal readers.
         */
        "terminal.configuration": {
            bbpos_wisepos_e?: components["schemas"]["terminal_configuration_configuration_resource_device_type_specific_config"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Whether this Configuration is the default for your account */
            is_account_default?: boolean | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description String indicating the name of the Configuration object, set by the user */
            name?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "terminal.configuration";
            offline?: components["schemas"]["terminal_configuration_configuration_resource_offline_config"];
            reboot_window?: components["schemas"]["terminal_configuration_configuration_resource_reboot_window"];
            stripe_s700?: components["schemas"]["terminal_configuration_configuration_resource_device_type_specific_config"];
            tipping?: components["schemas"]["terminal_configuration_configuration_resource_tipping"];
            verifone_p400?: components["schemas"]["terminal_configuration_configuration_resource_device_type_specific_config"];
        };
        /**
         * TerminalConnectionToken
         * @description A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
         *
         *     Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
         */
        "terminal.connection_token": {
            /** @description The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens). */
            location?: string;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "terminal.connection_token";
            /** @description Your application should pass this token to the Stripe Terminal SDK. */
            secret: string;
        };
        /**
         * TerminalLocationLocation
         * @description A Location represents a grouping of readers.
         *
         *     Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
         */
        "terminal.location": {
            address: components["schemas"]["address"];
            /** @description The ID of a configuration that will be used to customize all readers in this location. */
            configuration_overrides?: string;
            /** @description The display name of the location. */
            display_name: string;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "terminal.location";
        };
        /**
         * TerminalReaderReader
         * @description A Reader represents a physical device for accepting payment details.
         *
         *     Related guide: [Connecting to a reader](https://stripe.com/docs/terminal/payments/connect-reader)
         */
        "terminal.reader": {
            /** @description The most recent action performed by the reader. */
            action?: components["schemas"]["terminal_reader_reader_resource_reader_action"] | null;
            /** @description The current software version of the reader. */
            device_sw_version?: string | null;
            /**
             * @description Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `stripe_s700`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, `simulated_wisepos_e`, or `mobile_phone_reader`.
             * @enum {string}
             */
            device_type: "bbpos_chipper2x" | "bbpos_wisepad3" | "bbpos_wisepos_e" | "mobile_phone_reader" | "simulated_wisepos_e" | "stripe_m2" | "stripe_s700" | "verifone_P400";
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The local IP address of the reader. */
            ip_address?: string | null;
            /** @description Custom label given to the reader for easier identification. */
            label: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description The location identifier of the reader. */
            location?: (string | components["schemas"]["terminal.location"]) | null;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "terminal.reader";
            /** @description Serial number of the reader. */
            serial_number: string;
            /**
             * @description The networking status of the reader. We do not recommend using this field in flows that may block taking payments.
             * @enum {string|null}
             */
            status?: "offline" | "online" | null;
        };
        /** TerminalConfigurationConfigurationResourceCurrencySpecificConfig */
        terminal_configuration_configuration_resource_currency_specific_config: {
            /** @description Fixed amounts displayed when collecting a tip */
            fixed_amounts?: number[] | null;
            /** @description Percentages displayed when collecting a tip */
            percentages?: number[] | null;
            /** @description Below this amount, fixed amounts will be displayed; above it, percentages will be displayed */
            smart_tip_threshold?: number;
        };
        /** TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig */
        terminal_configuration_configuration_resource_device_type_specific_config: {
            /** @description A File ID representing an image you would like displayed on the reader. */
            splashscreen?: string | components["schemas"]["file"];
        };
        /** TerminalConfigurationConfigurationResourceOfflineConfig */
        terminal_configuration_configuration_resource_offline_config: {
            /** @description Determines whether to allow transactions to be collected while reader is offline. Defaults to false. */
            enabled?: boolean | null;
        };
        /** TerminalConfigurationConfigurationResourceRebootWindow */
        terminal_configuration_configuration_resource_reboot_window: {
            /** @description Integer between 0 to 23 that represents the end hour of the reboot time window. The value must be different than the start_hour. */
            end_hour: number;
            /** @description Integer between 0 to 23 that represents the start hour of the reboot time window. */
            start_hour: number;
        };
        /** TerminalConfigurationConfigurationResourceTipping */
        terminal_configuration_configuration_resource_tipping: {
            aud?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            cad?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            chf?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            czk?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            dkk?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            eur?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            gbp?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            hkd?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            myr?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            nok?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            nzd?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            pln?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            sek?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            sgd?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            usd?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
        };
        /**
         * TerminalReaderReaderResourceCart
         * @description Represents a cart to be displayed on the reader
         */
        terminal_reader_reader_resource_cart: {
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description List of line items in the cart. */
            line_items: components["schemas"]["terminal_reader_reader_resource_line_item"][];
            /** @description Tax amount for the entire cart. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            tax?: number | null;
            /** @description Total amount for the entire cart, including tax. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            total: number;
        };
        /**
         * TerminalReaderReaderResourceLineItem
         * @description Represents a line item to be displayed on the reader
         */
        terminal_reader_reader_resource_line_item: {
            /** @description The amount of the line item. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
            amount: number;
            /** @description Description of the line item. */
            description: string;
            /** @description The quantity of the line item. */
            quantity: number;
        };
        /**
         * TerminalReaderReaderResourceProcessConfig
         * @description Represents a per-transaction override of a reader configuration
         */
        terminal_reader_reader_resource_process_config: {
            /** @description Enable customer initiated cancellation when processing this payment. */
            enable_customer_cancellation?: boolean;
            /** @description Override showing a tipping selection screen on this transaction. */
            skip_tipping?: boolean;
            tipping?: components["schemas"]["terminal_reader_reader_resource_tipping_config"];
        };
        /**
         * TerminalReaderReaderResourceProcessPaymentIntentAction
         * @description Represents a reader action to process a payment intent
         */
        terminal_reader_reader_resource_process_payment_intent_action: {
            /** @description Most recent PaymentIntent processed by the reader. */
            payment_intent: string | components["schemas"]["payment_intent"];
            process_config?: components["schemas"]["terminal_reader_reader_resource_process_config"];
        };
        /**
         * TerminalReaderReaderResourceProcessSetupConfig
         * @description Represents a per-setup override of a reader configuration
         */
        terminal_reader_reader_resource_process_setup_config: {
            /** @description Enable customer initiated cancellation when processing this SetupIntent. */
            enable_customer_cancellation?: boolean;
        };
        /**
         * TerminalReaderReaderResourceProcessSetupIntentAction
         * @description Represents a reader action to process a setup intent
         */
        terminal_reader_reader_resource_process_setup_intent_action: {
            /** @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
            generated_card?: string;
            process_config?: components["schemas"]["terminal_reader_reader_resource_process_setup_config"];
            /** @description Most recent SetupIntent processed by the reader. */
            setup_intent: string | components["schemas"]["setup_intent"];
        };
        /**
         * TerminalReaderReaderResourceReaderAction
         * @description Represents an action performed by the reader
         */
        terminal_reader_reader_resource_reader_action: {
            /** @description Failure code, only set if status is `failed`. */
            failure_code?: string | null;
            /** @description Detailed failure message, only set if status is `failed`. */
            failure_message?: string | null;
            process_payment_intent?: components["schemas"]["terminal_reader_reader_resource_process_payment_intent_action"];
            process_setup_intent?: components["schemas"]["terminal_reader_reader_resource_process_setup_intent_action"];
            refund_payment?: components["schemas"]["terminal_reader_reader_resource_refund_payment_action"];
            set_reader_display?: components["schemas"]["terminal_reader_reader_resource_set_reader_display_action"];
            /**
             * @description Status of the action performed by the reader.
             * @enum {string}
             */
            status: "failed" | "in_progress" | "succeeded";
            /**
             * @description Type of action performed by the reader.
             * @enum {string}
             */
            type: "process_payment_intent" | "process_setup_intent" | "refund_payment" | "set_reader_display";
        };
        /**
         * TerminalReaderReaderResourceRefundPaymentAction
         * @description Represents a reader action to refund a payment
         */
        terminal_reader_reader_resource_refund_payment_action: {
            /** @description The amount being refunded. */
            amount?: number;
            /** @description Charge that is being refunded. */
            charge?: string | components["schemas"]["charge"];
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            };
            /** @description Payment intent that is being refunded. */
            payment_intent?: string | components["schemas"]["payment_intent"];
            /**
             * @description The reason for the refund.
             * @enum {string}
             */
            reason?: "duplicate" | "fraudulent" | "requested_by_customer";
            /** @description Unique identifier for the refund object. */
            refund?: string | components["schemas"]["refund"];
            /** @description Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge. */
            refund_application_fee?: boolean;
            refund_payment_config?: components["schemas"]["terminal_reader_reader_resource_refund_payment_config"];
            /** @description Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge. */
            reverse_transfer?: boolean;
        };
        /**
         * TerminalReaderReaderResourceRefundPaymentConfig
         * @description Represents a per-transaction override of a reader configuration
         */
        terminal_reader_reader_resource_refund_payment_config: {
            /** @description Enable customer initiated cancellation when refunding this payment. */
            enable_customer_cancellation?: boolean;
        };
        /**
         * TerminalReaderReaderResourceSetReaderDisplayAction
         * @description Represents a reader action to set the reader display
         */
        terminal_reader_reader_resource_set_reader_display_action: {
            /** @description Cart object to be displayed by the reader. */
            cart?: components["schemas"]["terminal_reader_reader_resource_cart"] | null;
            /**
             * @description Type of information to be displayed by the reader.
             * @enum {string}
             */
            type: "cart";
        };
        /**
         * TerminalReaderReaderResourceTippingConfig
         * @description Represents a per-transaction tipping configuration
         */
        terminal_reader_reader_resource_tipping_config: {
            /** @description Amount used to calculate tip suggestions on tipping selection screen for this transaction. Must be a positive integer in the smallest currency unit (e.g., 100 cents to represent $1.00 or 100 to represent ¥100, a zero-decimal currency). */
            amount_eligible?: number;
        };
        /**
         * TestClock
         * @description A test clock enables deterministic control over objects in testmode. With a test clock, you can create
         *     objects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances,
         *     you can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.
         */
        "test_helpers.test_clock": {
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /**
             * Format: unix-time
             * @description Time at which this clock is scheduled to auto delete.
             */
            deletes_after: number;
            /**
             * Format: unix-time
             * @description Time at which all objects belonging to this clock are frozen.
             */
            frozen_time: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description The custom name supplied at creation. */
            name?: string | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "test_helpers.test_clock";
            /**
             * @description The status of the Test Clock.
             * @enum {string}
             */
            status: "advancing" | "internal_failure" | "ready";
            status_details: components["schemas"]["billing_clocks_resource_status_details_status_details"];
        };
        /** three_d_secure_details */
        three_d_secure_details: {
            /**
             * @description For authenticated transactions: how the customer was authenticated by
             *     the issuing bank.
             * @enum {string|null}
             */
            authentication_flow?: "challenge" | "frictionless" | null;
            /**
             * @description The Electronic Commerce Indicator (ECI). A protocol-level field
             *     indicating what degree of authentication was performed.
             * @enum {string|null}
             */
            electronic_commerce_indicator?: "01" | "02" | "05" | "06" | "07" | null;
            /**
             * @description Indicates the outcome of 3D Secure authentication.
             * @enum {string|null}
             */
            result?: "attempt_acknowledged" | "authenticated" | "exempted" | "failed" | "not_supported" | "processing_error" | null;
            /**
             * @description Additional information about why 3D Secure succeeded or failed based
             *     on the `result`.
             * @enum {string|null}
             */
            result_reason?: "abandoned" | "bypassed" | "canceled" | "card_not_enrolled" | "network_not_supported" | "protocol_error" | "rejected" | null;
            /** @description The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
             *     (dsTransId) for this payment. */
            transaction_id?: string | null;
            /**
             * @description The version of 3D Secure that was used.
             * @enum {string|null}
             */
            version?: "1.0.2" | "2.1.0" | "2.2.0" | null;
        };
        /** three_d_secure_details_charge */
        three_d_secure_details_charge: {
            /**
             * @description For authenticated transactions: how the customer was authenticated by
             *     the issuing bank.
             * @enum {string|null}
             */
            authentication_flow?: "challenge" | "frictionless" | null;
            /**
             * @description The Electronic Commerce Indicator (ECI). A protocol-level field
             *     indicating what degree of authentication was performed.
             * @enum {string|null}
             */
            electronic_commerce_indicator?: "01" | "02" | "05" | "06" | "07" | null;
            /**
             * @description The exemption requested via 3DS and accepted by the issuer at authentication time.
             * @enum {string|null}
             */
            exemption_indicator?: "low_risk" | "none" | null;
            /** @description Whether Stripe requested the value of `exemption_indicator` in the transaction. This will depend on
             *     the outcome of Stripe's internal risk assessment. */
            exemption_indicator_applied?: boolean;
            /**
             * @description Indicates the outcome of 3D Secure authentication.
             * @enum {string|null}
             */
            result?: "attempt_acknowledged" | "authenticated" | "exempted" | "failed" | "not_supported" | "processing_error" | null;
            /**
             * @description Additional information about why 3D Secure succeeded or failed based
             *     on the `result`.
             * @enum {string|null}
             */
            result_reason?: "abandoned" | "bypassed" | "canceled" | "card_not_enrolled" | "network_not_supported" | "protocol_error" | "rejected" | null;
            /** @description The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
             *     (dsTransId) for this payment. */
            transaction_id?: string | null;
            /**
             * @description The version of 3D Secure that was used.
             * @enum {string|null}
             */
            version?: "1.0.2" | "2.1.0" | "2.2.0" | null;
        };
        /** three_d_secure_usage */
        three_d_secure_usage: {
            /** @description Whether 3D Secure is supported on this card. */
            supported: boolean;
        };
        /** ThresholdsResourceUsageAlertFilter */
        thresholds_resource_usage_alert_filter: {
            /** @description Limit the scope of the alert to this customer ID */
            customer?: (string | components["schemas"]["customer"]) | null;
            /** @enum {string} */
            type: "customer";
        };
        /**
         * ThresholdsResourceUsageThresholdConfig
         * @description The usage threshold alert configuration enables setting up alerts for when a certain usage threshold on a specific meter is crossed.
         */
        thresholds_resource_usage_threshold_config: {
            /** @description The filters allow limiting the scope of this usage alert. You can only specify up to one filter at this time. */
            filters?: components["schemas"]["thresholds_resource_usage_alert_filter"][] | null;
            /** @description The value at which this alert will trigger. */
            gte: number;
            /** @description The [Billing Meter](/api/billing/meter) ID whose usage is monitored. */
            meter: string | components["schemas"]["billing.meter"];
            /**
             * @description Defines how the alert will behave.
             * @enum {string}
             */
            recurrence: "one_time";
        };
        /**
         * Token
         * @description Tokenization is the process Stripe uses to collect sensitive card or bank
         *     account details, or personally identifiable information (PII), directly from
         *     your customers in a secure manner. A token representing this information is
         *     returned to your server to use. Use our
         *     [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
         *     on the client-side. This guarantees that no sensitive card data touches your server,
         *     and allows your integration to operate in a PCI-compliant way.
         *
         *     If you can't use client-side tokenization, you can also create tokens using
         *     the API with either your publishable or secret API key. If
         *     your integration uses this method, you're responsible for any PCI compliance
         *     that it might require, and you must keep your secret API key safe. Unlike with
         *     client-side tokenization, your customer's information isn't sent directly to
         *     Stripe, so we can't determine how it's handled or stored.
         *
         *     You can't store or use tokens more than once. To store card or bank account
         *     information for later use, create [Customer](https://stripe.com/docs/api#customers)
         *     objects or [External accounts](/api#external_accounts).
         *     [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
         *     performs best with integrations that use client-side tokenization.
         */
        token: {
            bank_account?: components["schemas"]["bank_account"];
            card?: components["schemas"]["card"];
            /** @description IP address of the client that generates the token. */
            client_ip?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "token";
            /** @description Type of the token: `account`, `bank_account`, `card`, or `pii`. */
            type: string;
            /** @description Determines if you have already used this token (you can only use tokens once). */
            used: boolean;
        };
        /** token_card_networks */
        token_card_networks: {
            /** @description The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card. */
            preferred?: string | null;
        };
        /**
         * Topup
         * @description To top up your Stripe balance, you create a top-up object. You can retrieve
         *     individual top-ups, as well as list all top-ups. Top-ups are identified by a
         *     unique, random ID.
         *
         *     Related guide: [Topping up your platform account](https://stripe.com/docs/connect/top-ups)
         */
        topup: {
            /** @description Amount transferred. */
            amount: number;
            /** @description ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up. */
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up. */
            expected_availability_date?: number | null;
            /** @description Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
            failure_code?: string | null;
            /** @description Message to user further explaining reason for top-up failure if available. */
            failure_message?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "topup";
            /** @description The source field is deprecated. It might not always be present in the API response. */
            source?: components["schemas"]["source"] | null;
            /** @description Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. */
            statement_descriptor?: string | null;
            /**
             * @description The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
             * @enum {string}
             */
            status: "canceled" | "failed" | "pending" | "reversed" | "succeeded";
            /** @description A string that identifies this top-up as part of a group. */
            transfer_group?: string | null;
        };
        /**
         * Transfer
         * @description A `Transfer` object is created when you move funds between Stripe accounts as
         *     part of Connect.
         *
         *     Before April 6, 2017, transfers also represented movement of funds from a
         *     Stripe account to a card or bank account. This behavior has since been split
         *     out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
         *     information, read about the
         *     [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
         *
         *     Related guide: [Creating separate charges and transfers](https://stripe.com/docs/connect/separate-charges-and-transfers)
         */
        transfer: {
            /** @description Amount in cents (or local equivalent) to be transferred. */
            amount: number;
            /** @description Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued). */
            amount_reversed: number;
            /** @description Balance transaction that describes the impact of this transfer on your account balance. */
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            /**
             * Format: unix-time
             * @description Time that this record of the transfer was first created.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description ID of the Stripe account the transfer was sent to. */
            destination?: (string | components["schemas"]["account"]) | null;
            /** @description If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer. */
            destination_payment?: string | components["schemas"]["charge"];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "transfer";
            /**
             * TransferReversalList
             * @description A list of reversals that have been applied to the transfer.
             */
            reversals: {
                /** @description Details about each object. */
                data: components["schemas"]["transfer_reversal"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            };
            /** @description Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. */
            reversed: boolean;
            /** @description ID of the charge that was used to fund the transfer. If null, the transfer was funded from the available balance. */
            source_transaction?: (string | components["schemas"]["charge"]) | null;
            /** @description The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`. */
            source_type?: string;
            /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details. */
            transfer_group?: string | null;
        };
        /** transfer_data */
        transfer_data: {
            /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
            amount?: number;
            /** @description The account (if any) that the payment is attributed to for tax
             *     reporting, and where funds from the payment are transferred to after
             *     payment success. */
            destination: string | components["schemas"]["account"];
        };
        /**
         * TransferReversal
         * @description [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
         *     connected account, either entirely or partially, and can also specify whether
         *     to refund any related application fees. Transfer reversals add to the
         *     platform's balance and subtract from the destination account's balance.
         *
         *     Reversing a transfer that was made for a [destination
         *     charge](/docs/connect/destination-charges) is allowed only up to the amount of
         *     the charge. It is possible to reverse a
         *     [transfer_group](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options)
         *     transfer only if the destination account has enough balance to cover the
         *     reversal.
         *
         *     Related guide: [Reverse transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#reverse-transfers)
         */
        transfer_reversal: {
            /** @description Amount, in cents (or local equivalent). */
            amount: number;
            /** @description Balance transaction that describes the impact on your account balance. */
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description Linked payment refund for the transfer reversal. */
            destination_payment_refund?: (string | components["schemas"]["refund"]) | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "transfer_reversal";
            /** @description ID of the refund responsible for the transfer reversal. */
            source_refund?: (string | components["schemas"]["refund"]) | null;
            /** @description ID of the transfer that was reversed. */
            transfer: string | components["schemas"]["transfer"];
        };
        /** TransferSchedule */
        transfer_schedule: {
            /** @description The number of days charges for the account will be held before being paid out. */
            delay_days: number;
            /** @description How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. */
            interval: string;
            /** @description The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months. */
            monthly_anchor?: number;
            /** @description The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. */
            weekly_anchor?: string;
        };
        /** TransformQuantity */
        transform_quantity: {
            /** @description Divide usage by this number. */
            divide_by: number;
            /**
             * @description After division, either round the result `up` or `down`.
             * @enum {string}
             */
            round: "down" | "up";
        };
        /** TransformUsage */
        transform_usage: {
            /** @description Divide usage by this number. */
            divide_by: number;
            /**
             * @description After division, either round the result `up` or `down`.
             * @enum {string}
             */
            round: "down" | "up";
        };
        /**
         * TreasuryReceivedCreditsResourceCreditReversal
         * @description You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
         */
        "treasury.credit_reversal": {
            /** @description Amount (in cents) transferred. */
            amount: number;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description The FinancialAccount to reverse funds from. */
            financial_account: string;
            /** @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
            hosted_regulatory_receipt_url?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description The rails used to reverse the funds.
             * @enum {string}
             */
            network: "ach" | "stripe";
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.credit_reversal";
            /** @description The ReceivedCredit being reversed. */
            received_credit: string;
            /**
             * @description Status of the CreditReversal
             * @enum {string}
             */
            status: "canceled" | "posted" | "processing";
            status_transitions: components["schemas"]["treasury_received_credits_resource_status_transitions"];
            /** @description The Transaction associated with this object. */
            transaction?: (string | components["schemas"]["treasury.transaction"]) | null;
        };
        /**
         * TreasuryReceivedDebitsResourceDebitReversal
         * @description You can reverse some [ReceivedDebits](https://stripe.com/docs/api#received_debits) depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal.
         */
        "treasury.debit_reversal": {
            /** @description Amount (in cents) transferred. */
            amount: number;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description The FinancialAccount to reverse funds from. */
            financial_account?: string | null;
            /** @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
            hosted_regulatory_receipt_url?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Other flows linked to a DebitReversal. */
            linked_flows?: components["schemas"]["treasury_received_debits_resource_debit_reversal_linked_flows"] | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description The rails used to reverse the funds.
             * @enum {string}
             */
            network: "ach" | "card";
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.debit_reversal";
            /** @description The ReceivedDebit being reversed. */
            received_debit: string;
            /**
             * @description Status of the DebitReversal
             * @enum {string}
             */
            status: "failed" | "processing" | "succeeded";
            status_transitions: components["schemas"]["treasury_received_debits_resource_status_transitions"];
            /** @description The Transaction associated with this object. */
            transaction?: (string | components["schemas"]["treasury.transaction"]) | null;
        };
        /**
         * TreasuryFinancialAccountsResourceFinancialAccount
         * @description Stripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance.
         *     FinancialAccounts serve as the source and destination of Treasury’s money movement APIs.
         */
        "treasury.financial_account": {
            /** @description The array of paths to active Features in the Features hash. */
            active_features?: ("card_issuing" | "deposit_insurance" | "financial_addresses.aba" | "financial_addresses.aba.forwarding" | "inbound_transfers.ach" | "intra_stripe_flows" | "outbound_payments.ach" | "outbound_payments.us_domestic_wire" | "outbound_transfers.ach" | "outbound_transfers.us_domestic_wire" | "remote_deposit_capture")[];
            balance: components["schemas"]["treasury_financial_accounts_resource_balance"];
            /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country: string;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            features?: components["schemas"]["treasury.financial_account_features"];
            /** @description The set of credentials that resolve to a FinancialAccount. */
            financial_addresses: components["schemas"]["treasury_financial_accounts_resource_financial_address"][];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.financial_account";
            /** @description The array of paths to pending Features in the Features hash. */
            pending_features?: ("card_issuing" | "deposit_insurance" | "financial_addresses.aba" | "financial_addresses.aba.forwarding" | "inbound_transfers.ach" | "intra_stripe_flows" | "outbound_payments.ach" | "outbound_payments.us_domestic_wire" | "outbound_transfers.ach" | "outbound_transfers.us_domestic_wire" | "remote_deposit_capture")[];
            /** @description The set of functionalities that the platform can restrict on the FinancialAccount. */
            platform_restrictions?: components["schemas"]["treasury_financial_accounts_resource_platform_restrictions"] | null;
            /** @description The array of paths to restricted Features in the Features hash. */
            restricted_features?: ("card_issuing" | "deposit_insurance" | "financial_addresses.aba" | "financial_addresses.aba.forwarding" | "inbound_transfers.ach" | "intra_stripe_flows" | "outbound_payments.ach" | "outbound_payments.us_domestic_wire" | "outbound_transfers.ach" | "outbound_transfers.us_domestic_wire" | "remote_deposit_capture")[];
            /**
             * @description Status of this FinancialAccount.
             * @enum {string}
             */
            status: "closed" | "open";
            status_details: components["schemas"]["treasury_financial_accounts_resource_status_details"];
            /** @description The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. */
            supported_currencies: string[];
        };
        /**
         * TreasuryFinancialAccountsResourceFinancialAccountFeatures
         * @description Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.
         *     Stripe or the platform can control Features via the requested field.
         */
        "treasury.financial_account_features": {
            card_issuing?: components["schemas"]["treasury_financial_accounts_resource_toggle_settings"];
            deposit_insurance?: components["schemas"]["treasury_financial_accounts_resource_toggle_settings"];
            financial_addresses?: components["schemas"]["treasury_financial_accounts_resource_financial_addresses_features"];
            inbound_transfers?: components["schemas"]["treasury_financial_accounts_resource_inbound_transfers"];
            intra_stripe_flows?: components["schemas"]["treasury_financial_accounts_resource_toggle_settings"];
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.financial_account_features";
            outbound_payments?: components["schemas"]["treasury_financial_accounts_resource_outbound_payments"];
            outbound_transfers?: components["schemas"]["treasury_financial_accounts_resource_outbound_transfers"];
        };
        /**
         * TreasuryInboundTransfersResourceInboundTransfer
         * @description Use [InboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
         *
         *     Related guide: [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers)
         */
        "treasury.inbound_transfer": {
            /** @description Amount (in cents) transferred. */
            amount: number;
            /** @description Returns `true` if the InboundTransfer is able to be canceled. */
            cancelable: boolean;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description Details about this InboundTransfer's failure. Only set when status is `failed`. */
            failure_details?: components["schemas"]["treasury_inbound_transfers_resource_failure_details"] | null;
            /** @description The FinancialAccount that received the funds. */
            financial_account: string;
            /** @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
            hosted_regulatory_receipt_url?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            linked_flows: components["schemas"]["treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.inbound_transfer";
            /** @description The origin payment method to be debited for an InboundTransfer. */
            origin_payment_method?: string | null;
            /** @description Details about the PaymentMethod for an InboundTransfer. */
            origin_payment_method_details?: components["schemas"]["inbound_transfers"] | null;
            /** @description Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state. */
            returned?: boolean | null;
            /** @description Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`. */
            statement_descriptor: string;
            /**
             * @description Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been "confirmed" and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.
             * @enum {string}
             */
            status: "canceled" | "failed" | "processing" | "succeeded";
            status_transitions: components["schemas"]["treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions"];
            /** @description The Transaction associated with this object. */
            transaction?: (string | components["schemas"]["treasury.transaction"]) | null;
        };
        /**
         * TreasuryOutboundPaymentsResourceOutboundPayment
         * @description Use [OutboundPayments](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).
         *
         *     Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
         *
         *     Related guide: [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments)
         */
        "treasury.outbound_payment": {
            /** @description Amount (in cents) transferred. */
            amount: number;
            /** @description Returns `true` if the object can be canceled, and `false` otherwise. */
            cancelable: boolean;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description ID of the [customer](https://stripe.com/docs/api/customers) to whom an OutboundPayment is sent. */
            customer?: string | null;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`. */
            destination_payment_method?: string | null;
            /** @description Details about the PaymentMethod for an OutboundPayment. */
            destination_payment_method_details?: components["schemas"]["outbound_payments_payment_method_details"] | null;
            /** @description Details about the end user. */
            end_user_details?: components["schemas"]["treasury_outbound_payments_resource_outbound_payment_resource_end_user_details"] | null;
            /**
             * Format: unix-time
             * @description The date when funds are expected to arrive in the destination account.
             */
            expected_arrival_date: number;
            /** @description The FinancialAccount that funds were pulled from. */
            financial_account: string;
            /** @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
            hosted_regulatory_receipt_url?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.outbound_payment";
            /** @description Details about a returned OutboundPayment. Only set when the status is `returned`. */
            returned_details?: components["schemas"]["treasury_outbound_payments_resource_returned_status"] | null;
            /** @description The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer). */
            statement_descriptor: string;
            /**
             * @description Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`.
             * @enum {string}
             */
            status: "canceled" | "failed" | "posted" | "processing" | "returned";
            status_transitions: components["schemas"]["treasury_outbound_payments_resource_outbound_payment_resource_status_transitions"];
            /** @description Details about network-specific tracking information if available. */
            tracking_details?: components["schemas"]["treasury_outbound_payments_resource_outbound_payment_resource_tracking_details"] | null;
            /** @description The Transaction associated with this object. */
            transaction: string | components["schemas"]["treasury.transaction"];
        };
        /**
         * TreasuryOutboundTransfersResourceOutboundTransfer
         * @description Use [OutboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers) to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.
         *
         *     Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
         *
         *     Related guide: [Moving money with Treasury using OutboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers)
         */
        "treasury.outbound_transfer": {
            /** @description Amount (in cents) transferred. */
            amount: number;
            /** @description Returns `true` if the object can be canceled, and `false` otherwise. */
            cancelable: boolean;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string | null;
            /** @description The PaymentMethod used as the payment instrument for an OutboundTransfer. */
            destination_payment_method?: string | null;
            destination_payment_method_details: components["schemas"]["outbound_transfers_payment_method_details"];
            /**
             * Format: unix-time
             * @description The date when funds are expected to arrive in the destination account.
             */
            expected_arrival_date: number;
            /** @description The FinancialAccount that funds were pulled from. */
            financial_account: string;
            /** @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
            hosted_regulatory_receipt_url?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.outbound_transfer";
            /** @description Details about a returned OutboundTransfer. Only set when the status is `returned`. */
            returned_details?: components["schemas"]["treasury_outbound_transfers_resource_returned_details"] | null;
            /** @description Information about the OutboundTransfer to be sent to the recipient account. */
            statement_descriptor: string;
            /**
             * @description Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`.
             * @enum {string}
             */
            status: "canceled" | "failed" | "posted" | "processing" | "returned";
            status_transitions: components["schemas"]["treasury_outbound_transfers_resource_status_transitions"];
            /** @description Details about network-specific tracking information if available. */
            tracking_details?: components["schemas"]["treasury_outbound_transfers_resource_outbound_transfer_resource_tracking_details"] | null;
            /** @description The Transaction associated with this object. */
            transaction: string | components["schemas"]["treasury.transaction"];
        };
        /**
         * TreasuryReceivedCreditsResourceReceivedCredit
         * @description ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.
         */
        "treasury.received_credit": {
            /** @description Amount (in cents) transferred. */
            amount: number;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description: string;
            /**
             * @description Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.
             * @enum {string|null}
             */
            failure_code?: "account_closed" | "account_frozen" | "international_transaction" | "other" | null;
            /** @description The FinancialAccount that received the funds. */
            financial_account?: string | null;
            /** @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
            hosted_regulatory_receipt_url?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            initiating_payment_method_details: components["schemas"]["treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details"];
            linked_flows: components["schemas"]["treasury_received_credits_resource_linked_flows"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description The rails used to send the funds.
             * @enum {string}
             */
            network: "ach" | "card" | "stripe" | "us_domestic_wire";
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.received_credit";
            /** @description Details describing when a ReceivedCredit may be reversed. */
            reversal_details?: components["schemas"]["treasury_received_credits_resource_reversal_details"] | null;
            /**
             * @description Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.
             * @enum {string}
             */
            status: "failed" | "succeeded";
            /** @description The Transaction associated with this object. */
            transaction?: (string | components["schemas"]["treasury.transaction"]) | null;
        };
        /**
         * TreasuryReceivedDebitsResourceReceivedDebit
         * @description ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount.
         */
        "treasury.received_debit": {
            /** @description Amount (in cents) transferred. */
            amount: number;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description: string;
            /**
             * @description Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn't have sufficient funds, is closed, or is frozen.
             * @enum {string|null}
             */
            failure_code?: "account_closed" | "account_frozen" | "insufficient_funds" | "international_transaction" | "other" | null;
            /** @description The FinancialAccount that funds were pulled from. */
            financial_account?: string | null;
            /** @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
            hosted_regulatory_receipt_url?: string | null;
            /** @description Unique identifier for the object. */
            id: string;
            initiating_payment_method_details?: components["schemas"]["treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details"];
            linked_flows: components["schemas"]["treasury_received_debits_resource_linked_flows"];
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description The network used for the ReceivedDebit.
             * @enum {string}
             */
            network: "ach" | "card" | "stripe";
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.received_debit";
            /** @description Details describing when a ReceivedDebit might be reversed. */
            reversal_details?: components["schemas"]["treasury_received_debits_resource_reversal_details"] | null;
            /**
             * @description Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.
             * @enum {string}
             */
            status: "failed" | "succeeded";
            /** @description The Transaction associated with this object. */
            transaction?: (string | components["schemas"]["treasury.transaction"]) | null;
        };
        /**
         * TreasuryTransactionsResourceTransaction
         * @description Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance.
         */
        "treasury.transaction": {
            /** @description Amount (in cents) transferred. */
            amount: number;
            balance_impact: components["schemas"]["treasury_transactions_resource_balance_impact"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
            description: string;
            /**
             * TreasuryTransactionsResourceTransactionEntryList
             * @description A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.
             */
            entries?: {
                /** @description Details about each object. */
                data: components["schemas"]["treasury.transaction_entry"][];
                /** @description True if this list has another page of items after this one that can be fetched. */
                has_more: boolean;
                /**
                 * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                 * @enum {string}
                 */
                object: "list";
                /** @description The URL where this list can be accessed. */
                url: string;
            } | null;
            /** @description The FinancialAccount associated with this object. */
            financial_account: string;
            /** @description ID of the flow that created the Transaction. */
            flow?: string | null;
            /** @description Details of the flow that created the Transaction. */
            flow_details?: components["schemas"]["treasury_transactions_resource_flow_details"] | null;
            /**
             * @description Type of the flow that created the Transaction.
             * @enum {string}
             */
            flow_type: "credit_reversal" | "debit_reversal" | "inbound_transfer" | "issuing_authorization" | "other" | "outbound_payment" | "outbound_transfer" | "received_credit" | "received_debit";
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.transaction";
            /**
             * @description Status of the Transaction.
             * @enum {string}
             */
            status: "open" | "posted" | "void";
            status_transitions: components["schemas"]["treasury_transactions_resource_abstract_transaction_resource_status_transitions"];
        };
        /**
         * TreasuryTransactionsResourceTransactionEntry
         * @description TransactionEntries represent individual units of money movements within a single [Transaction](https://stripe.com/docs/api#transactions).
         */
        "treasury.transaction_entry": {
            balance_impact: components["schemas"]["treasury_transactions_resource_balance_impact"];
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /**
             * Format: unix-time
             * @description When the TransactionEntry will impact the FinancialAccount's balance.
             */
            effective_at: number;
            /** @description The FinancialAccount associated with this object. */
            financial_account: string;
            /** @description Token of the flow associated with the TransactionEntry. */
            flow?: string | null;
            /** @description Details of the flow associated with the TransactionEntry. */
            flow_details?: components["schemas"]["treasury_transactions_resource_flow_details"] | null;
            /**
             * @description Type of the flow associated with the TransactionEntry.
             * @enum {string}
             */
            flow_type: "credit_reversal" | "debit_reversal" | "inbound_transfer" | "issuing_authorization" | "other" | "outbound_payment" | "outbound_transfer" | "received_credit" | "received_debit";
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "treasury.transaction_entry";
            /** @description The Transaction associated with this object. */
            transaction: string | components["schemas"]["treasury.transaction"];
            /**
             * @description The specific money movement that generated the TransactionEntry.
             * @enum {string}
             */
            type: "credit_reversal" | "credit_reversal_posting" | "debit_reversal" | "inbound_transfer" | "inbound_transfer_return" | "issuing_authorization_hold" | "issuing_authorization_release" | "other" | "outbound_payment" | "outbound_payment_cancellation" | "outbound_payment_failure" | "outbound_payment_posting" | "outbound_payment_return" | "outbound_transfer" | "outbound_transfer_cancellation" | "outbound_transfer_failure" | "outbound_transfer_posting" | "outbound_transfer_return" | "received_credit" | "received_debit";
        };
        /**
         * TreasuryFinancialAccountsResourceABARecord
         * @description ABA Records contain U.S. bank account details per the ABA format.
         */
        treasury_financial_accounts_resource_aba_record: {
            /** @description The name of the person or business that owns the bank account. */
            account_holder_name: string;
            /** @description The account number. */
            account_number?: string | null;
            /** @description The last four characters of the account number. */
            account_number_last4: string;
            /** @description Name of the bank. */
            bank_name: string;
            /** @description Routing number for the account. */
            routing_number: string;
        };
        /**
         * TreasuryFinancialAccountsResourceAbaToggleSettings
         * @description Toggle settings for enabling/disabling the ABA address feature
         */
        treasury_financial_accounts_resource_aba_toggle_settings: {
            /** @description Whether the FinancialAccount should have the Feature. */
            requested: boolean;
            /**
             * @description Whether the Feature is operational.
             * @enum {string}
             */
            status: "active" | "pending" | "restricted";
            /** @description Additional details; includes at least one entry when the status is not `active`. */
            status_details: components["schemas"]["treasury_financial_accounts_resource_toggles_setting_status_details"][];
        };
        /**
         * TreasuryFinancialAccountsResourceAchToggleSettings
         * @description Toggle settings for enabling/disabling an ACH specific feature
         */
        treasury_financial_accounts_resource_ach_toggle_settings: {
            /** @description Whether the FinancialAccount should have the Feature. */
            requested: boolean;
            /**
             * @description Whether the Feature is operational.
             * @enum {string}
             */
            status: "active" | "pending" | "restricted";
            /** @description Additional details; includes at least one entry when the status is not `active`. */
            status_details: components["schemas"]["treasury_financial_accounts_resource_toggles_setting_status_details"][];
        };
        /**
         * TreasuryFinancialAccountsResourceBalance
         * @description Balance information for the FinancialAccount
         */
        treasury_financial_accounts_resource_balance: {
            /** @description Funds the user can spend right now. */
            cash: {
                [key: string]: number;
            };
            /** @description Funds not spendable yet, but will become available at a later time. */
            inbound_pending: {
                [key: string]: number;
            };
            /** @description Funds in the account, but not spendable because they are being held for pending outbound flows. */
            outbound_pending: {
                [key: string]: number;
            };
        };
        /** TreasuryFinancialAccountsResourceClosedStatusDetails */
        treasury_financial_accounts_resource_closed_status_details: {
            /** @description The array that contains reasons for a FinancialAccount closure. */
            reasons: ("account_rejected" | "closed_by_platform" | "other")[];
        };
        /**
         * TreasuryFinancialAccountsResourceFinancialAddress
         * @description FinancialAddresses contain identifying information that resolves to a FinancialAccount.
         */
        treasury_financial_accounts_resource_financial_address: {
            aba?: components["schemas"]["treasury_financial_accounts_resource_aba_record"];
            /** @description The list of networks that the address supports */
            supported_networks?: ("ach" | "us_domestic_wire")[];
            /**
             * @description The type of financial address
             * @enum {string}
             */
            type: "aba";
        };
        /**
         * TreasuryFinancialAccountsResourceFinancialAddressesFeatures
         * @description Settings related to Financial Addresses features on a Financial Account
         */
        treasury_financial_accounts_resource_financial_addresses_features: {
            aba?: components["schemas"]["treasury_financial_accounts_resource_aba_toggle_settings"];
        };
        /**
         * TreasuryFinancialAccountsResourceInboundTransfers
         * @description InboundTransfers contains inbound transfers features for a FinancialAccount.
         */
        treasury_financial_accounts_resource_inbound_transfers: {
            ach?: components["schemas"]["treasury_financial_accounts_resource_ach_toggle_settings"];
        };
        /**
         * TreasuryFinancialAccountsResourceOutboundPayments
         * @description Settings related to Outbound Payments features on a Financial Account
         */
        treasury_financial_accounts_resource_outbound_payments: {
            ach?: components["schemas"]["treasury_financial_accounts_resource_ach_toggle_settings"];
            us_domestic_wire?: components["schemas"]["treasury_financial_accounts_resource_toggle_settings"];
        };
        /**
         * TreasuryFinancialAccountsResourceOutboundTransfers
         * @description OutboundTransfers contains outbound transfers features for a FinancialAccount.
         */
        treasury_financial_accounts_resource_outbound_transfers: {
            ach?: components["schemas"]["treasury_financial_accounts_resource_ach_toggle_settings"];
            us_domestic_wire?: components["schemas"]["treasury_financial_accounts_resource_toggle_settings"];
        };
        /**
         * TreasuryFinancialAccountsResourcePlatformRestrictions
         * @description Restrictions that a Connect Platform has placed on this FinancialAccount.
         */
        treasury_financial_accounts_resource_platform_restrictions: {
            /**
             * @description Restricts all inbound money movement.
             * @enum {string|null}
             */
            inbound_flows?: "restricted" | "unrestricted" | null;
            /**
             * @description Restricts all outbound money movement.
             * @enum {string|null}
             */
            outbound_flows?: "restricted" | "unrestricted" | null;
        };
        /** TreasuryFinancialAccountsResourceStatusDetails */
        treasury_financial_accounts_resource_status_details: {
            /** @description Details related to the closure of this FinancialAccount */
            closed?: components["schemas"]["treasury_financial_accounts_resource_closed_status_details"] | null;
        };
        /**
         * TreasuryFinancialAccountsResourceToggleSettings
         * @description Toggle settings for enabling/disabling a feature
         */
        treasury_financial_accounts_resource_toggle_settings: {
            /** @description Whether the FinancialAccount should have the Feature. */
            requested: boolean;
            /**
             * @description Whether the Feature is operational.
             * @enum {string}
             */
            status: "active" | "pending" | "restricted";
            /** @description Additional details; includes at least one entry when the status is not `active`. */
            status_details: components["schemas"]["treasury_financial_accounts_resource_toggles_setting_status_details"][];
        };
        /**
         * TreasuryFinancialAccountsResourceTogglesSettingStatusDetails
         * @description Additional details on the FinancialAccount Features information.
         */
        treasury_financial_accounts_resource_toggles_setting_status_details: {
            /**
             * @description Represents the reason why the status is `pending` or `restricted`.
             * @enum {string}
             */
            code: "activating" | "capability_not_requested" | "financial_account_closed" | "rejected_other" | "rejected_unsupported_business" | "requirements_past_due" | "requirements_pending_verification" | "restricted_by_platform" | "restricted_other";
            /**
             * @description Represents what the user should do, if anything, to activate the Feature.
             * @enum {string|null}
             */
            resolution?: "contact_stripe" | "provide_information" | "remove_restriction" | null;
            /**
             * @description The `platform_restrictions` that are restricting this Feature.
             * @enum {string}
             */
            restriction?: "inbound_flows" | "outbound_flows";
        };
        /** TreasuryInboundTransfersResourceFailureDetails */
        treasury_inbound_transfers_resource_failure_details: {
            /**
             * @description Reason for the failure.
             * @enum {string}
             */
            code: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "debit_not_authorized" | "incorrect_account_holder_address" | "incorrect_account_holder_name" | "incorrect_account_holder_tax_id" | "insufficient_funds" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
        };
        /** TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows */
        treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows: {
            /** @description If funds for this flow were returned after the flow went to the `succeeded` state, this field contains a reference to the ReceivedDebit return. */
            received_debit?: string | null;
        };
        /** TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions */
        treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions: {
            /**
             * Format: unix-time
             * @description Timestamp describing when an InboundTransfer changed status to `canceled`.
             */
            canceled_at?: number | null;
            /**
             * Format: unix-time
             * @description Timestamp describing when an InboundTransfer changed status to `failed`.
             */
            failed_at?: number | null;
            /**
             * Format: unix-time
             * @description Timestamp describing when an InboundTransfer changed status to `succeeded`.
             */
            succeeded_at?: number | null;
        };
        /** TreasuryOutboundPaymentsResourceACHTrackingDetails */
        treasury_outbound_payments_resource_ach_tracking_details: {
            /** @description ACH trace ID of the OutboundPayment for payments sent over the `ach` network. */
            trace_id: string;
        };
        /** TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails */
        treasury_outbound_payments_resource_outbound_payment_resource_end_user_details: {
            /** @description IP address of the user initiating the OutboundPayment. Set if `present` is set to `true`. IP address collection is required for risk and compliance reasons. This will be used to help determine if the OutboundPayment is authorized or should be blocked. */
            ip_address?: string | null;
            /** @description `true` if the OutboundPayment creation request is being made on behalf of an end user by a platform. Otherwise, `false`. */
            present: boolean;
        };
        /** TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions */
        treasury_outbound_payments_resource_outbound_payment_resource_status_transitions: {
            /**
             * Format: unix-time
             * @description Timestamp describing when an OutboundPayment changed status to `canceled`.
             */
            canceled_at?: number | null;
            /**
             * Format: unix-time
             * @description Timestamp describing when an OutboundPayment changed status to `failed`.
             */
            failed_at?: number | null;
            /**
             * Format: unix-time
             * @description Timestamp describing when an OutboundPayment changed status to `posted`.
             */
            posted_at?: number | null;
            /**
             * Format: unix-time
             * @description Timestamp describing when an OutboundPayment changed status to `returned`.
             */
            returned_at?: number | null;
        };
        /** TreasuryOutboundPaymentsResourceOutboundPaymentResourceTrackingDetails */
        treasury_outbound_payments_resource_outbound_payment_resource_tracking_details: {
            ach?: components["schemas"]["treasury_outbound_payments_resource_ach_tracking_details"];
            /**
             * @description The US bank account network used to send funds.
             * @enum {string}
             */
            type: "ach" | "us_domestic_wire";
            us_domestic_wire?: components["schemas"]["treasury_outbound_payments_resource_us_domestic_wire_tracking_details"];
        };
        /** TreasuryOutboundPaymentsResourceReturnedStatus */
        treasury_outbound_payments_resource_returned_status: {
            /**
             * @description Reason for the return.
             * @enum {string}
             */
            code: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "declined" | "incorrect_account_holder_name" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
            /** @description The Transaction associated with this object. */
            transaction: string | components["schemas"]["treasury.transaction"];
        };
        /** TreasuryOutboundPaymentsResourceUSDomesticWireTrackingDetails */
        treasury_outbound_payments_resource_us_domestic_wire_tracking_details: {
            /** @description CHIPS System Sequence Number (SSN) of the OutboundPayment for payments sent over the `us_domestic_wire` network. */
            chips?: string | null;
            /** @description IMAD of the OutboundPayment for payments sent over the `us_domestic_wire` network. */
            imad?: string | null;
            /** @description OMAD of the OutboundPayment for payments sent over the `us_domestic_wire` network. */
            omad?: string | null;
        };
        /** TreasuryOutboundTransfersResourceACHTrackingDetails */
        treasury_outbound_transfers_resource_ach_tracking_details: {
            /** @description ACH trace ID of the OutboundTransfer for transfers sent over the `ach` network. */
            trace_id: string;
        };
        /** TreasuryOutboundTransfersResourceOutboundTransferResourceTrackingDetails */
        treasury_outbound_transfers_resource_outbound_transfer_resource_tracking_details: {
            ach?: components["schemas"]["treasury_outbound_transfers_resource_ach_tracking_details"];
            /**
             * @description The US bank account network used to send funds.
             * @enum {string}
             */
            type: "ach" | "us_domestic_wire";
            us_domestic_wire?: components["schemas"]["treasury_outbound_transfers_resource_us_domestic_wire_tracking_details"];
        };
        /** TreasuryOutboundTransfersResourceReturnedDetails */
        treasury_outbound_transfers_resource_returned_details: {
            /**
             * @description Reason for the return.
             * @enum {string}
             */
            code: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "declined" | "incorrect_account_holder_name" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
            /** @description The Transaction associated with this object. */
            transaction: string | components["schemas"]["treasury.transaction"];
        };
        /** TreasuryOutboundTransfersResourceStatusTransitions */
        treasury_outbound_transfers_resource_status_transitions: {
            /**
             * Format: unix-time
             * @description Timestamp describing when an OutboundTransfer changed status to `canceled`
             */
            canceled_at?: number | null;
            /**
             * Format: unix-time
             * @description Timestamp describing when an OutboundTransfer changed status to `failed`
             */
            failed_at?: number | null;
            /**
             * Format: unix-time
             * @description Timestamp describing when an OutboundTransfer changed status to `posted`
             */
            posted_at?: number | null;
            /**
             * Format: unix-time
             * @description Timestamp describing when an OutboundTransfer changed status to `returned`
             */
            returned_at?: number | null;
        };
        /** TreasuryOutboundTransfersResourceUSDomesticWireTrackingDetails */
        treasury_outbound_transfers_resource_us_domestic_wire_tracking_details: {
            /** @description CHIPS System Sequence Number (SSN) of the OutboundTransfer for transfers sent over the `us_domestic_wire` network. */
            chips?: string | null;
            /** @description IMAD of the OutboundTransfer for transfers sent over the `us_domestic_wire` network. */
            imad?: string | null;
            /** @description OMAD of the OutboundTransfer for transfers sent over the `us_domestic_wire` network. */
            omad?: string | null;
        };
        /** TreasuryReceivedCreditsResourceLinkedFlows */
        treasury_received_credits_resource_linked_flows: {
            /** @description The CreditReversal created as a result of this ReceivedCredit being reversed. */
            credit_reversal?: string | null;
            /** @description Set if the ReceivedCredit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object. */
            issuing_authorization?: string | null;
            /** @description Set if the ReceivedCredit is also viewable as an [Issuing transaction](https://stripe.com/docs/api#issuing_transactions) object. */
            issuing_transaction?: string | null;
            /** @description ID of the source flow. Set if `network` is `stripe` and the source flow is visible to the user. Examples of source flows include OutboundPayments, payouts, or CreditReversals. */
            source_flow?: string | null;
            /** @description The expandable object of the source flow. */
            source_flow_details?: components["schemas"]["treasury_received_credits_resource_source_flows_details"] | null;
            /** @description The type of flow that originated the ReceivedCredit (for example, `outbound_payment`). */
            source_flow_type?: string | null;
        };
        /** TreasuryReceivedCreditsResourceReversalDetails */
        treasury_received_credits_resource_reversal_details: {
            /**
             * Format: unix-time
             * @description Time before which a ReceivedCredit can be reversed.
             */
            deadline?: number | null;
            /**
             * @description Set if a ReceivedCredit cannot be reversed.
             * @enum {string|null}
             */
            restricted_reason?: "already_reversed" | "deadline_passed" | "network_restricted" | "other" | "source_flow_restricted" | null;
        };
        /** TreasuryReceivedCreditsResourceSourceFlowsDetails */
        treasury_received_credits_resource_source_flows_details: {
            credit_reversal?: components["schemas"]["treasury.credit_reversal"];
            outbound_payment?: components["schemas"]["treasury.outbound_payment"];
            payout?: components["schemas"]["payout"];
            /**
             * @description The type of the source flow that originated the ReceivedCredit.
             * @enum {string}
             */
            type: "credit_reversal" | "other" | "outbound_payment" | "payout";
        };
        /** TreasuryReceivedCreditsResourceStatusTransitions */
        treasury_received_credits_resource_status_transitions: {
            /**
             * Format: unix-time
             * @description Timestamp describing when the CreditReversal changed status to `posted`
             */
            posted_at?: number | null;
        };
        /** TreasuryReceivedDebitsResourceDebitReversalLinkedFlows */
        treasury_received_debits_resource_debit_reversal_linked_flows: {
            /** @description Set if there is an Issuing dispute associated with the DebitReversal. */
            issuing_dispute?: string | null;
        };
        /** TreasuryReceivedDebitsResourceLinkedFlows */
        treasury_received_debits_resource_linked_flows: {
            /** @description The DebitReversal created as a result of this ReceivedDebit being reversed. */
            debit_reversal?: string | null;
            /** @description Set if the ReceivedDebit is associated with an InboundTransfer's return of funds. */
            inbound_transfer?: string | null;
            /** @description Set if the ReceivedDebit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object. */
            issuing_authorization?: string | null;
            /** @description Set if the ReceivedDebit is also viewable as an [Issuing Dispute](https://stripe.com/docs/api#issuing_disputes) object. */
            issuing_transaction?: string | null;
            /** @description Set if the ReceivedDebit was created due to a [Payout](https://stripe.com/docs/api#payouts) object. */
            payout?: string | null;
        };
        /** TreasuryReceivedDebitsResourceReversalDetails */
        treasury_received_debits_resource_reversal_details: {
            /**
             * Format: unix-time
             * @description Time before which a ReceivedDebit can be reversed.
             */
            deadline?: number | null;
            /**
             * @description Set if a ReceivedDebit can't be reversed.
             * @enum {string|null}
             */
            restricted_reason?: "already_reversed" | "deadline_passed" | "network_restricted" | "other" | "source_flow_restricted" | null;
        };
        /** TreasuryReceivedDebitsResourceStatusTransitions */
        treasury_received_debits_resource_status_transitions: {
            /**
             * Format: unix-time
             * @description Timestamp describing when the DebitReversal changed status to `completed`.
             */
            completed_at?: number | null;
        };
        /** TreasurySharedResourceBillingDetails */
        treasury_shared_resource_billing_details: {
            address: components["schemas"]["address"];
            /** @description Email address. */
            email?: string | null;
            /** @description Full name. */
            name?: string | null;
        };
        /** TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails */
        treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details: {
            /**
             * @description Set when `type` is `balance`.
             * @enum {string}
             */
            balance?: "payments";
            billing_details: components["schemas"]["treasury_shared_resource_billing_details"];
            financial_account?: components["schemas"]["received_payment_method_details_financial_account"];
            /** @description Set when `type` is `issuing_card`. This is an [Issuing Card](https://stripe.com/docs/api#issuing_cards) ID. */
            issuing_card?: string;
            /**
             * @description Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount.
             * @enum {string}
             */
            type: "balance" | "financial_account" | "issuing_card" | "stripe" | "us_bank_account";
            us_bank_account?: components["schemas"]["treasury_shared_resource_initiating_payment_method_details_us_bank_account"];
        };
        /** TreasurySharedResourceInitiatingPaymentMethodDetailsUSBankAccount */
        treasury_shared_resource_initiating_payment_method_details_us_bank_account: {
            /** @description Bank name. */
            bank_name?: string | null;
            /** @description The last four digits of the bank account number. */
            last4?: string | null;
            /** @description The routing number for the bank account. */
            routing_number?: string | null;
        };
        /** TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions */
        treasury_transactions_resource_abstract_transaction_resource_status_transitions: {
            /**
             * Format: unix-time
             * @description Timestamp describing when the Transaction changed status to `posted`.
             */
            posted_at?: number | null;
            /**
             * Format: unix-time
             * @description Timestamp describing when the Transaction changed status to `void`.
             */
            void_at?: number | null;
        };
        /**
         * TreasuryTransactionsResourceBalanceImpact
         * @description Change to a FinancialAccount's balance
         */
        treasury_transactions_resource_balance_impact: {
            /** @description The change made to funds the user can spend right now. */
            cash: number;
            /** @description The change made to funds that are not spendable yet, but will become available at a later time. */
            inbound_pending: number;
            /** @description The change made to funds in the account, but not spendable because they are being held for pending outbound flows. */
            outbound_pending: number;
        };
        /** TreasuryTransactionsResourceFlowDetails */
        treasury_transactions_resource_flow_details: {
            credit_reversal?: components["schemas"]["treasury.credit_reversal"];
            debit_reversal?: components["schemas"]["treasury.debit_reversal"];
            inbound_transfer?: components["schemas"]["treasury.inbound_transfer"];
            issuing_authorization?: components["schemas"]["issuing.authorization"];
            outbound_payment?: components["schemas"]["treasury.outbound_payment"];
            outbound_transfer?: components["schemas"]["treasury.outbound_transfer"];
            received_credit?: components["schemas"]["treasury.received_credit"];
            received_debit?: components["schemas"]["treasury.received_debit"];
            /**
             * @description Type of the flow that created the Transaction. Set to the same value as `flow_type`.
             * @enum {string}
             */
            type: "credit_reversal" | "debit_reversal" | "inbound_transfer" | "issuing_authorization" | "other" | "outbound_payment" | "outbound_transfer" | "received_credit" | "received_debit";
        };
        /** us_bank_account_networks */
        us_bank_account_networks: {
            /** @description The preferred network. */
            preferred?: string | null;
            /** @description All supported networks. */
            supported: ("ach" | "us_domestic_wire")[];
        };
        /**
         * UsageRecord
         * @description Usage records allow you to report customer usage and metrics to Stripe for
         *     metered billing of subscription prices.
         *
         *     Related guide: [Metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing)
         *
         *     This is our legacy usage-based billing API. See the [updated usage-based billing docs](https://docs.stripe.com/billing/subscriptions/usage-based).
         */
        usage_record: {
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "usage_record";
            /** @description The usage quantity for the specified date. */
            quantity: number;
            /** @description The ID of the subscription item this usage record contains data for. */
            subscription_item: string;
            /**
             * Format: unix-time
             * @description The timestamp when this usage occurred.
             */
            timestamp: number;
        };
        /**
         * UsageRecordSummary
         * @description A usage record summary represents an aggregated view of how much usage was accrued for a subscription item within a subscription billing period.
         */
        usage_record_summary: {
            /** @description Unique identifier for the object. */
            id: string;
            /** @description The invoice in which this usage period has been billed for. */
            invoice?: string | null;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "usage_record_summary";
            period: components["schemas"]["period"];
            /** @description The ID of the subscription item this summary is describing. */
            subscription_item: string;
            /** @description The total usage within this usage period. */
            total_usage: number;
        };
        /** verification_session_redaction */
        verification_session_redaction: {
            /**
             * @description Indicates whether this object and its related objects have been redacted or not.
             * @enum {string}
             */
            status: "processing" | "redacted";
        };
        /**
         * NotificationWebhookEndpoint
         * @description You can configure [webhook endpoints](https://docs.stripe.com/webhooks/) via the API to be
         *     notified about events that happen in your Stripe account or connected
         *     accounts.
         *
         *     Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
         *
         *     Related guide: [Setting up webhooks](https://docs.stripe.com/webhooks/configure)
         */
        webhook_endpoint: {
            /** @description The API version events are rendered as for this webhook endpoint. */
            api_version?: string | null;
            /** @description The ID of the associated Connect application. */
            application?: string | null;
            /**
             * Format: unix-time
             * @description Time at which the object was created. Measured in seconds since the Unix epoch.
             */
            created: number;
            /** @description An optional description of what the webhook is used for. */
            description?: string | null;
            /** @description The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection. */
            enabled_events: string[];
            /** @description Unique identifier for the object. */
            id: string;
            /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
            livemode: boolean;
            /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
            metadata: {
                [key: string]: string;
            };
            /**
             * @description String representing the object's type. Objects of the same type share the same value.
             * @enum {string}
             */
            object: "webhook_endpoint";
            /** @description The endpoint's secret, used to generate [webhook signatures](https://docs.stripe.com/webhooks/signatures). Only returned at creation. */
            secret?: string;
            /** @description The status of the webhook. It can be `enabled` or `disabled`. */
            status: string;
            /** @description The URL of the webhook endpoint. */
            url: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetAccount: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The identifier of the account to create an account link for. */
                    account: string;
                    /**
                     * @description The collect parameter is deprecated. Use `collection_options` instead.
                     * @enum {string}
                     */
                    collect?: "currently_due" | "eventually_due";
                    /**
                     * collection_options_params
                     * @description Specifies the requirements that Stripe collects from connected accounts in the Connect Onboarding flow.
                     */
                    collection_options?: {
                        /** @enum {string} */
                        fields?: "currently_due" | "eventually_due";
                        /** @enum {string} */
                        future_requirements?: "include" | "omit";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user. */
                    refresh_url?: string;
                    /** @description The URL that the user will be redirected to upon leaving or completing the linked flow. */
                    return_url?: string;
                    /**
                     * @description The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
                     * @enum {string}
                     */
                    type: "account_onboarding" | "account_update";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account_link"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The identifier of the account to create an Account Session for. */
                    account: string;
                    /**
                     * account_session_create_components_param
                     * @description Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).
                     */
                    components: {
                        /** account_config_param */
                        account_management?: {
                            enabled: boolean;
                            /** account_features_param */
                            features?: {
                                disable_stripe_user_authentication?: boolean;
                                external_account_collection?: boolean;
                            };
                        };
                        /** account_config_param */
                        account_onboarding?: {
                            enabled: boolean;
                            /** account_features_param */
                            features?: {
                                disable_stripe_user_authentication?: boolean;
                                external_account_collection?: boolean;
                            };
                        };
                        /** payouts_config_param */
                        balances?: {
                            enabled: boolean;
                            /** payouts_features_param */
                            features?: {
                                disable_stripe_user_authentication?: boolean;
                                edit_payout_schedule?: boolean;
                                external_account_collection?: boolean;
                                instant_payouts?: boolean;
                                standard_payouts?: boolean;
                            };
                        };
                        /** base_config_param */
                        documents?: {
                            enabled: boolean;
                            /** base_features_param */
                            features?: Record<string, never>;
                        };
                        /** account_config_param */
                        notification_banner?: {
                            enabled: boolean;
                            /** account_features_param */
                            features?: {
                                disable_stripe_user_authentication?: boolean;
                                external_account_collection?: boolean;
                            };
                        };
                        /** payments_config_param */
                        payment_details?: {
                            enabled: boolean;
                            /** payments_features_param */
                            features?: {
                                capture_payments?: boolean;
                                destination_on_behalf_of_charge_management?: boolean;
                                dispute_management?: boolean;
                                refund_management?: boolean;
                            };
                        };
                        /** payments_config_param */
                        payments?: {
                            enabled: boolean;
                            /** payments_features_param */
                            features?: {
                                capture_payments?: boolean;
                                destination_on_behalf_of_charge_management?: boolean;
                                dispute_management?: boolean;
                                refund_management?: boolean;
                            };
                        };
                        /** payouts_config_param */
                        payouts?: {
                            enabled: boolean;
                            /** payouts_features_param */
                            features?: {
                                disable_stripe_user_authentication?: boolean;
                                edit_payout_schedule?: boolean;
                                external_account_collection?: boolean;
                                instant_payouts?: boolean;
                                standard_payouts?: boolean;
                            };
                        };
                        /** base_config_param */
                        payouts_list?: {
                            enabled: boolean;
                            /** base_features_param */
                            features?: Record<string, never>;
                        };
                        /** base_config_param */
                        tax_registrations?: {
                            enabled: boolean;
                            /** base_features_param */
                            features?: Record<string, never>;
                        };
                        /** base_config_param */
                        tax_settings?: {
                            enabled: boolean;
                            /** base_features_param */
                            features?: Record<string, never>;
                        };
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account_session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccounts: {
        parameters: {
            query?: {
                /** @description Only return connected accounts that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["account"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
                    account_token?: string;
                    /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
                    bank_account?: {
                        account_holder_name?: string;
                        /** @enum {string} */
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        /** @enum {string} */
                        account_type?: "checking" | "futsu" | "savings" | "toza";
                        country: string;
                        currency?: string;
                        /** external_account_documents_param */
                        documents?: {
                            /** documents_param */
                            bank_account_ownership_verification?: {
                                files?: string[];
                            };
                        };
                        /** @enum {string} */
                        object?: "bank_account";
                        routing_number?: string;
                    } | string;
                    /**
                     * business_profile_specs
                     * @description Business information about the account.
                     */
                    business_profile?: {
                        /** annual_revenue_specs */
                        annual_revenue?: {
                            amount: number;
                            currency: string;
                            fiscal_year_end: string;
                        };
                        estimated_worker_count?: number;
                        mcc?: string;
                        /** monthly_estimated_revenue_specs */
                        monthly_estimated_revenue?: {
                            amount: number;
                            currency: string;
                        };
                        name?: string;
                        product_description?: string;
                        /** address_specs */
                        support_address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        support_email?: string;
                        support_phone?: string;
                        support_url?: string | "";
                        url?: string;
                    };
                    /**
                     * @description The business type. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
                     * @enum {string}
                     */
                    business_type?: "company" | "government_entity" | "individual" | "non_profit";
                    /**
                     * capabilities_param
                     * @description Each key of the dictionary represents a capability, and each capability
                     *     maps to its settings (for example, whether it has been requested or not). Each
                     *     capability is inactive until you have provided its specific
                     *     requirements and Stripe has verified them. An account might have some
                     *     of its requested capabilities be active and some be inactive.
                     *
                     *     Required when [account.controller.stripe_dashboard.type](/api/accounts/create#create_account-controller-dashboard-type)
                     *     is `none`, which includes Custom accounts.
                     */
                    capabilities?: {
                        /** capability_param */
                        acss_debit_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        affirm_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        afterpay_clearpay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        alma_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        amazon_pay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        au_becs_debit_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        bacs_debit_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        bancontact_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        blik_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        boleto_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        card_issuing?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        card_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        cartes_bancaires_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        cashapp_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        eps_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        fpx_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        gb_bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        giropay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        grabpay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        ideal_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        india_international_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        jcb_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        jp_bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        kakao_pay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        klarna_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        konbini_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        kr_card_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        legacy_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        link_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        mobilepay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        multibanco_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        mx_bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        naver_pay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        oxxo_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        p24_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        payco_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        paynow_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        promptpay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        revolut_pay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        samsung_pay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        sepa_bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        sepa_debit_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        sofort_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        swish_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        tax_reporting_us_1099_k?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        tax_reporting_us_1099_misc?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        transfers?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        treasury?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        twint_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        us_bank_account_ach_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        us_bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        zip_payments?: {
                            requested?: boolean;
                        };
                    };
                    /**
                     * company_specs
                     * @description Information about the company or business. This field is available for any `business_type`. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
                     */
                    company?: {
                        /** legal_entity_and_kyc_address_specs */
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        /** japan_address_kana_specs */
                        address_kana?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        /** japan_address_kanji_specs */
                        address_kanji?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        directors_provided?: boolean;
                        executives_provided?: boolean;
                        export_license_id?: string;
                        export_purpose_code?: string;
                        name?: string;
                        name_kana?: string;
                        name_kanji?: string;
                        owners_provided?: boolean;
                        /** company_ownership_declaration */
                        ownership_declaration?: {
                            /** Format: unix-time */
                            date?: number;
                            ip?: string;
                            user_agent?: string;
                        };
                        phone?: string;
                        registration_number?: string;
                        /** @enum {string} */
                        structure?: "" | "free_zone_establishment" | "free_zone_llc" | "government_instrumentality" | "governmental_unit" | "incorporated_non_profit" | "incorporated_partnership" | "limited_liability_partnership" | "llc" | "multi_member_llc" | "private_company" | "private_corporation" | "private_partnership" | "public_company" | "public_corporation" | "public_partnership" | "registered_charity" | "single_member_llc" | "sole_establishment" | "sole_proprietorship" | "tax_exempt_government_instrumentality" | "unincorporated_association" | "unincorporated_non_profit" | "unincorporated_partnership";
                        tax_id?: string;
                        tax_id_registrar?: string;
                        vat_id?: string;
                        /** verification_specs */
                        verification?: {
                            /** verification_document_specs */
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    /**
                     * controller_specs
                     * @description A hash of configuration describing the account controller's attributes.
                     */
                    controller?: {
                        /** controller_fees_specs */
                        fees?: {
                            /** @enum {string} */
                            payer?: "account" | "application";
                        };
                        /** controller_losses_specs */
                        losses?: {
                            /** @enum {string} */
                            payments?: "application" | "stripe";
                        };
                        /** @enum {string} */
                        requirement_collection?: "application" | "stripe";
                        /** controller_dashboard_specs */
                        stripe_dashboard?: {
                            /** @enum {string} */
                            type?: "express" | "full" | "none";
                        };
                    };
                    /** @description The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. Available countries include [Stripe's global markets](https://stripe.com/global) as well as countries where [cross-border payouts](https://stripe.com/docs/connect/cross-border-payouts) are supported. */
                    country?: string;
                    /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://docs.stripe.com/payouts). */
                    default_currency?: string;
                    /**
                     * documents_specs
                     * @description Documents that may be submitted to satisfy various informational requests.
                     */
                    documents?: {
                        /** documents_param */
                        bank_account_ownership_verification?: {
                            files?: string[];
                        };
                        /** documents_param */
                        company_license?: {
                            files?: string[];
                        };
                        /** documents_param */
                        company_memorandum_of_association?: {
                            files?: string[];
                        };
                        /** documents_param */
                        company_ministerial_decree?: {
                            files?: string[];
                        };
                        /** documents_param */
                        company_registration_verification?: {
                            files?: string[];
                        };
                        /** documents_param */
                        company_tax_id_verification?: {
                            files?: string[];
                        };
                        /** documents_param */
                        proof_of_registration?: {
                            files?: string[];
                        };
                    };
                    /** @description The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn't email the account without your consent. */
                    email?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A card or bank account to attach to the account for receiving [payouts](/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](/js), or a dictionary, as documented in the `external_account` parameter for [bank account](/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the [bank account](/api#account_create_bank_account) or [card creation](/api#account_create_card) APIs. After you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
                    external_account?: string;
                    /**
                     * account_groups_specs
                     * @description A hash of account group type to tokens. These are account groups this account should be added to
                     */
                    groups?: {
                        payments_pricing?: string | "";
                    };
                    /**
                     * individual_specs
                     * @description Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
                     */
                    individual?: {
                        /** address_specs */
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        /** japan_address_kana_specs */
                        address_kana?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        /** japan_address_kanji_specs */
                        address_kanji?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        } | "";
                        email?: string;
                        first_name?: string;
                        first_name_kana?: string;
                        first_name_kanji?: string;
                        full_name_aliases?: string[] | "";
                        gender?: string;
                        id_number?: string;
                        id_number_secondary?: string;
                        last_name?: string;
                        last_name_kana?: string;
                        last_name_kanji?: string;
                        maiden_name?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        phone?: string;
                        /** @enum {string} */
                        political_exposure?: "existing" | "none";
                        /** address_specs */
                        registered_address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        /** individual_relationship_specs */
                        relationship?: {
                            director?: boolean;
                            executive?: boolean;
                            owner?: boolean;
                            percent_ownership?: number | "";
                            title?: string;
                        };
                        ssn_last_4?: string;
                        /** person_verification_specs */
                        verification?: {
                            /** person_verification_document_specs */
                            additional_document?: {
                                back?: string;
                                front?: string;
                            };
                            /** person_verification_document_specs */
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * settings_specs
                     * @description Options for customizing how the account functions within Stripe.
                     */
                    settings?: {
                        /** bacs_debit_payments_specs */
                        bacs_debit_payments?: {
                            display_name?: string;
                        };
                        /** branding_settings_specs */
                        branding?: {
                            icon?: string;
                            logo?: string;
                            primary_color?: string;
                            secondary_color?: string;
                        };
                        /** card_issuing_settings_specs */
                        card_issuing?: {
                            /** settings_terms_of_service_specs */
                            tos_acceptance?: {
                                /** Format: unix-time */
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                        /** card_payments_settings_specs */
                        card_payments?: {
                            /** decline_charge_on_specs */
                            decline_on?: {
                                avs_failure?: boolean;
                                cvc_failure?: boolean;
                            };
                            statement_descriptor_prefix?: string;
                            statement_descriptor_prefix_kana?: string | "";
                            statement_descriptor_prefix_kanji?: string | "";
                        };
                        /** payments_settings_specs */
                        payments?: {
                            statement_descriptor?: string;
                            statement_descriptor_kana?: string;
                            statement_descriptor_kanji?: string;
                        };
                        /** payout_settings_specs */
                        payouts?: {
                            debit_negative_balances?: boolean;
                            /** transfer_schedule_specs */
                            schedule?: {
                                delay_days?: "minimum" | number;
                                /** @enum {string} */
                                interval?: "daily" | "manual" | "monthly" | "weekly";
                                monthly_anchor?: number;
                                /** @enum {string} */
                                weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
                            };
                            statement_descriptor?: string;
                        };
                        /** treasury_settings_specs */
                        treasury?: {
                            /** settings_terms_of_service_specs */
                            tos_acceptance?: {
                                /** Format: unix-time */
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                    };
                    /**
                     * tos_acceptance_specs
                     * @description Details on the account's acceptance of the [Stripe Services Agreement](/connect/updating-accounts#tos-acceptance). This property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. This property defaults to a `full` service agreement when empty.
                     */
                    tos_acceptance?: {
                        /** Format: unix-time */
                        date?: number;
                        ip?: string;
                        service_agreement?: string;
                        user_agent?: string;
                    };
                    /**
                     * @description The type of Stripe account to create. May be one of `custom`, `express` or `standard`.
                     * @enum {string}
                     */
                    type?: "custom" | "express" | "standard";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccount: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
                    account_token?: string;
                    /**
                     * business_profile_specs
                     * @description Business information about the account.
                     */
                    business_profile?: {
                        /** annual_revenue_specs */
                        annual_revenue?: {
                            amount: number;
                            currency: string;
                            fiscal_year_end: string;
                        };
                        estimated_worker_count?: number;
                        mcc?: string;
                        /** monthly_estimated_revenue_specs */
                        monthly_estimated_revenue?: {
                            amount: number;
                            currency: string;
                        };
                        name?: string;
                        product_description?: string;
                        /** address_specs */
                        support_address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        support_email?: string;
                        support_phone?: string;
                        support_url?: string | "";
                        url?: string;
                    };
                    /**
                     * @description The business type. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
                     * @enum {string}
                     */
                    business_type?: "company" | "government_entity" | "individual" | "non_profit";
                    /**
                     * capabilities_param
                     * @description Each key of the dictionary represents a capability, and each capability
                     *     maps to its settings (for example, whether it has been requested or not). Each
                     *     capability is inactive until you have provided its specific
                     *     requirements and Stripe has verified them. An account might have some
                     *     of its requested capabilities be active and some be inactive.
                     *
                     *     Required when [account.controller.stripe_dashboard.type](/api/accounts/create#create_account-controller-dashboard-type)
                     *     is `none`, which includes Custom accounts.
                     */
                    capabilities?: {
                        /** capability_param */
                        acss_debit_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        affirm_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        afterpay_clearpay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        alma_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        amazon_pay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        au_becs_debit_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        bacs_debit_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        bancontact_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        blik_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        boleto_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        card_issuing?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        card_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        cartes_bancaires_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        cashapp_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        eps_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        fpx_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        gb_bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        giropay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        grabpay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        ideal_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        india_international_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        jcb_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        jp_bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        kakao_pay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        klarna_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        konbini_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        kr_card_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        legacy_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        link_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        mobilepay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        multibanco_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        mx_bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        naver_pay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        oxxo_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        p24_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        payco_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        paynow_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        promptpay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        revolut_pay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        samsung_pay_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        sepa_bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        sepa_debit_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        sofort_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        swish_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        tax_reporting_us_1099_k?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        tax_reporting_us_1099_misc?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        transfers?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        treasury?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        twint_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        us_bank_account_ach_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        us_bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        /** capability_param */
                        zip_payments?: {
                            requested?: boolean;
                        };
                    };
                    /**
                     * company_specs
                     * @description Information about the company or business. This field is available for any `business_type`. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
                     */
                    company?: {
                        /** legal_entity_and_kyc_address_specs */
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        /** japan_address_kana_specs */
                        address_kana?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        /** japan_address_kanji_specs */
                        address_kanji?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        directors_provided?: boolean;
                        executives_provided?: boolean;
                        export_license_id?: string;
                        export_purpose_code?: string;
                        name?: string;
                        name_kana?: string;
                        name_kanji?: string;
                        owners_provided?: boolean;
                        /** company_ownership_declaration */
                        ownership_declaration?: {
                            /** Format: unix-time */
                            date?: number;
                            ip?: string;
                            user_agent?: string;
                        };
                        phone?: string;
                        registration_number?: string;
                        /** @enum {string} */
                        structure?: "" | "free_zone_establishment" | "free_zone_llc" | "government_instrumentality" | "governmental_unit" | "incorporated_non_profit" | "incorporated_partnership" | "limited_liability_partnership" | "llc" | "multi_member_llc" | "private_company" | "private_corporation" | "private_partnership" | "public_company" | "public_corporation" | "public_partnership" | "registered_charity" | "single_member_llc" | "sole_establishment" | "sole_proprietorship" | "tax_exempt_government_instrumentality" | "unincorporated_association" | "unincorporated_non_profit" | "unincorporated_partnership";
                        tax_id?: string;
                        tax_id_registrar?: string;
                        vat_id?: string;
                        /** verification_specs */
                        verification?: {
                            /** verification_document_specs */
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://docs.stripe.com/payouts). */
                    default_currency?: string;
                    /**
                     * documents_specs
                     * @description Documents that may be submitted to satisfy various informational requests.
                     */
                    documents?: {
                        /** documents_param */
                        bank_account_ownership_verification?: {
                            files?: string[];
                        };
                        /** documents_param */
                        company_license?: {
                            files?: string[];
                        };
                        /** documents_param */
                        company_memorandum_of_association?: {
                            files?: string[];
                        };
                        /** documents_param */
                        company_ministerial_decree?: {
                            files?: string[];
                        };
                        /** documents_param */
                        company_registration_verification?: {
                            files?: string[];
                        };
                        /** documents_param */
                        company_tax_id_verification?: {
                            files?: string[];
                        };
                        /** documents_param */
                        proof_of_registration?: {
                            files?: string[];
                        };
                    };
                    /** @description The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn't email the account without your consent. */
                    email?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A card or bank account to attach to the account for receiving [payouts](/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](/js), or a dictionary, as documented in the `external_account` parameter for [bank account](/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the [bank account](/api#account_create_bank_account) or [card creation](/api#account_create_card) APIs. After you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
                    external_account?: string;
                    /**
                     * account_groups_specs
                     * @description A hash of account group type to tokens. These are account groups this account should be added to
                     */
                    groups?: {
                        payments_pricing?: string | "";
                    };
                    /**
                     * individual_specs
                     * @description Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
                     */
                    individual?: {
                        /** address_specs */
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        /** japan_address_kana_specs */
                        address_kana?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        /** japan_address_kanji_specs */
                        address_kanji?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        } | "";
                        email?: string;
                        first_name?: string;
                        first_name_kana?: string;
                        first_name_kanji?: string;
                        full_name_aliases?: string[] | "";
                        gender?: string;
                        id_number?: string;
                        id_number_secondary?: string;
                        last_name?: string;
                        last_name_kana?: string;
                        last_name_kanji?: string;
                        maiden_name?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        phone?: string;
                        /** @enum {string} */
                        political_exposure?: "existing" | "none";
                        /** address_specs */
                        registered_address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        /** individual_relationship_specs */
                        relationship?: {
                            director?: boolean;
                            executive?: boolean;
                            owner?: boolean;
                            percent_ownership?: number | "";
                            title?: string;
                        };
                        ssn_last_4?: string;
                        /** person_verification_specs */
                        verification?: {
                            /** person_verification_document_specs */
                            additional_document?: {
                                back?: string;
                                front?: string;
                            };
                            /** person_verification_document_specs */
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * settings_specs_update
                     * @description Options for customizing how the account functions within Stripe.
                     */
                    settings?: {
                        /** bacs_debit_payments_specs */
                        bacs_debit_payments?: {
                            display_name?: string;
                        };
                        /** branding_settings_specs */
                        branding?: {
                            icon?: string;
                            logo?: string;
                            primary_color?: string;
                            secondary_color?: string;
                        };
                        /** card_issuing_settings_specs */
                        card_issuing?: {
                            /** settings_terms_of_service_specs */
                            tos_acceptance?: {
                                /** Format: unix-time */
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                        /** card_payments_settings_specs */
                        card_payments?: {
                            /** decline_charge_on_specs */
                            decline_on?: {
                                avs_failure?: boolean;
                                cvc_failure?: boolean;
                            };
                            statement_descriptor_prefix?: string;
                            statement_descriptor_prefix_kana?: string | "";
                            statement_descriptor_prefix_kanji?: string | "";
                        };
                        /** invoices_settings_specs */
                        invoices?: {
                            default_account_tax_ids?: string[] | "";
                        };
                        /** payments_settings_specs */
                        payments?: {
                            statement_descriptor?: string;
                            statement_descriptor_kana?: string;
                            statement_descriptor_kanji?: string;
                        };
                        /** payout_settings_specs */
                        payouts?: {
                            debit_negative_balances?: boolean;
                            /** transfer_schedule_specs */
                            schedule?: {
                                delay_days?: "minimum" | number;
                                /** @enum {string} */
                                interval?: "daily" | "manual" | "monthly" | "weekly";
                                monthly_anchor?: number;
                                /** @enum {string} */
                                weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
                            };
                            statement_descriptor?: string;
                        };
                        /** treasury_settings_specs */
                        treasury?: {
                            /** settings_terms_of_service_specs */
                            tos_acceptance?: {
                                /** Format: unix-time */
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                    };
                    /**
                     * tos_acceptance_specs
                     * @description Details on the account's acceptance of the [Stripe Services Agreement](/connect/updating-accounts#tos-acceptance). This property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. This property defaults to a `full` service agreement when empty.
                     */
                    tos_acceptance?: {
                        /** Format: unix-time */
                        date?: number;
                        ip?: string;
                        service_agreement?: string;
                        user_agent?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteAccountsAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountBankAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
                    bank_account?: {
                        account_holder_name?: string;
                        /** @enum {string} */
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        /** @enum {string} */
                        account_type?: "checking" | "futsu" | "savings" | "toza";
                        country: string;
                        currency?: string;
                        /** external_account_documents_param */
                        documents?: {
                            /** documents_param */
                            bank_account_ownership_verification?: {
                                files?: string[];
                            };
                        };
                        /** @enum {string} */
                        object?: "bank_account";
                        routing_number?: string;
                    } | string;
                    /** @description When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
                    default_for_currency?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
                    external_account?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountBankAccountsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                account: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountBankAccountsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The name of the person or business that owns the bank account. */
                    account_holder_name?: string;
                    /**
                     * @description The type of entity that holds the account. This can be either `individual` or `company`.
                     * @enum {string}
                     */
                    account_holder_type?: "" | "company" | "individual";
                    /**
                     * @description The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
                     * @enum {string}
                     */
                    account_type?: "checking" | "futsu" | "savings" | "toza";
                    /** @description City/District/Suburb/Town/Village. */
                    address_city?: string;
                    /** @description Billing address country, if provided when creating card. */
                    address_country?: string;
                    /** @description Address line 1 (Street address/PO Box/Company name). */
                    address_line1?: string;
                    /** @description Address line 2 (Apartment/Suite/Unit/Building). */
                    address_line2?: string;
                    /** @description State/County/Province/Region. */
                    address_state?: string;
                    /** @description ZIP or postal code. */
                    address_zip?: string;
                    /** @description When set to true, this becomes the default external account for its currency. */
                    default_for_currency?: boolean;
                    /**
                     * external_account_documents_param
                     * @description Documents that may be submitted to satisfy various informational requests.
                     */
                    documents?: {
                        /** documents_param */
                        bank_account_ownership_verification?: {
                            files?: string[];
                        };
                    };
                    /** @description Two digit number representing the card’s expiration month. */
                    exp_month?: string;
                    /** @description Four digit number representing the card’s expiration year. */
                    exp_year?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Cardholder name. */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteAccountsAccountBankAccountsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_external_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountCapabilities: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["capability"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountCapabilitiesCapability: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                account: string;
                capability: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["capability"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountCapabilitiesCapability: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
                capability: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description To request a new capability for an account, pass true. There can be a delay before the requested capability becomes active. If the capability has any activation requirements, the response includes them in the `requirements` arrays.
                     *
                     *     If a capability isn't permanent, you can remove it from the account by passing false. Some capabilities are permanent after they've been requested. Attempting to remove a permanent capability returns an error. */
                    requested?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["capability"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountExternalAccounts: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Filter external accounts according to a particular object type. */
                object?: "bank_account" | "card";
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
                        data: (components["schemas"]["bank_account"] | components["schemas"]["card"])[];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountExternalAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
                    bank_account?: {
                        account_holder_name?: string;
                        /** @enum {string} */
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        /** @enum {string} */
                        account_type?: "checking" | "futsu" | "savings" | "toza";
                        country: string;
                        currency?: string;
                        /** external_account_documents_param */
                        documents?: {
                            /** documents_param */
                            bank_account_ownership_verification?: {
                                files?: string[];
                            };
                        };
                        /** @enum {string} */
                        object?: "bank_account";
                        routing_number?: string;
                    } | string;
                    /** @description When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
                    default_for_currency?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
                    external_account?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountExternalAccountsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                account: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountExternalAccountsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The name of the person or business that owns the bank account. */
                    account_holder_name?: string;
                    /**
                     * @description The type of entity that holds the account. This can be either `individual` or `company`.
                     * @enum {string}
                     */
                    account_holder_type?: "" | "company" | "individual";
                    /**
                     * @description The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
                     * @enum {string}
                     */
                    account_type?: "checking" | "futsu" | "savings" | "toza";
                    /** @description City/District/Suburb/Town/Village. */
                    address_city?: string;
                    /** @description Billing address country, if provided when creating card. */
                    address_country?: string;
                    /** @description Address line 1 (Street address/PO Box/Company name). */
                    address_line1?: string;
                    /** @description Address line 2 (Apartment/Suite/Unit/Building). */
                    address_line2?: string;
                    /** @description State/County/Province/Region. */
                    address_state?: string;
                    /** @description ZIP or postal code. */
                    address_zip?: string;
                    /** @description When set to true, this becomes the default external account for its currency. */
                    default_for_currency?: boolean;
                    /**
                     * external_account_documents_param
                     * @description Documents that may be submitted to satisfy various informational requests.
                     */
                    documents?: {
                        /** documents_param */
                        bank_account_ownership_verification?: {
                            files?: string[];
                        };
                    };
                    /** @description Two digit number representing the card’s expiration month. */
                    exp_month?: string;
                    /** @description Four digit number representing the card’s expiration year. */
                    exp_year?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Cardholder name. */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteAccountsAccountExternalAccountsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_external_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountLoginLinks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["login_link"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountPeople: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Filters on the list of people returned based on the person's relationship to the account's company. */
                relationship?: {
                    director?: boolean;
                    executive?: boolean;
                    legal_guardian?: boolean;
                    owner?: boolean;
                    representative?: boolean;
                };
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["person"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountPeople: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * person_additional_tos_acceptances_specs
                     * @description Details on the legal guardian's or authorizer's acceptance of the required Stripe agreements.
                     */
                    additional_tos_acceptances?: {
                        /** settings_terms_of_service_specs */
                        account?: {
                            /** Format: unix-time */
                            date?: number;
                            ip?: string;
                            user_agent?: string | "";
                        };
                    };
                    /**
                     * legal_entity_and_kyc_address_specs
                     * @description The person's address.
                     */
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    /**
                     * japan_address_kana_specs
                     * @description The Kana variation of the person's address (Japan only).
                     */
                    address_kana?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    /**
                     * japan_address_kanji_specs
                     * @description The Kanji variation of the person's address (Japan only).
                     */
                    address_kanji?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    /** @description The person's date of birth. */
                    dob?: {
                        day: number;
                        month: number;
                        year: number;
                    } | "";
                    /**
                     * person_documents_specs
                     * @description Documents that may be submitted to satisfy various informational requests.
                     */
                    documents?: {
                        /** documents_param */
                        company_authorization?: {
                            files?: (string | "")[];
                        };
                        /** documents_param */
                        passport?: {
                            files?: (string | "")[];
                        };
                        /** documents_param */
                        visa?: {
                            files?: (string | "")[];
                        };
                    };
                    /** @description The person's email address. */
                    email?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The person's first name. */
                    first_name?: string;
                    /** @description The Kana variation of the person's first name (Japan only). */
                    first_name_kana?: string;
                    /** @description The Kanji variation of the person's first name (Japan only). */
                    first_name_kanji?: string;
                    /** @description A list of alternate names or aliases that the person is known by. */
                    full_name_aliases?: string[] | "";
                    /** @description The person's gender (International regulations require either "male" or "female"). */
                    gender?: string;
                    /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii). */
                    id_number?: string;
                    /** @description The person's secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii). */
                    id_number_secondary?: string;
                    /** @description The person's last name. */
                    last_name?: string;
                    /** @description The Kana variation of the person's last name (Japan only). */
                    last_name_kana?: string;
                    /** @description The Kanji variation of the person's last name (Japan only). */
                    last_name_kanji?: string;
                    /** @description The person's maiden name. */
                    maiden_name?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
                    nationality?: string;
                    /** @description A [person token](https://docs.stripe.com/connect/account-tokens), used to securely provide details to the person. */
                    person_token?: string;
                    /** @description The person's phone number. */
                    phone?: string;
                    /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
                    political_exposure?: string;
                    /**
                     * address_specs
                     * @description The person's registered address.
                     */
                    registered_address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    /**
                     * relationship_specs
                     * @description The relationship that this person has with the account's legal entity.
                     */
                    relationship?: {
                        director?: boolean;
                        executive?: boolean;
                        legal_guardian?: boolean;
                        owner?: boolean;
                        percent_ownership?: number | "";
                        representative?: boolean;
                        title?: string;
                    };
                    /** @description The last four digits of the person's Social Security number (U.S. only). */
                    ssn_last_4?: string;
                    /**
                     * person_verification_specs
                     * @description The person's verification status.
                     */
                    verification?: {
                        /** person_verification_document_specs */
                        additional_document?: {
                            back?: string;
                            front?: string;
                        };
                        /** person_verification_document_specs */
                        document?: {
                            back?: string;
                            front?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountPeoplePerson: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                account: string;
                person: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountPeoplePerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
                person: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * person_additional_tos_acceptances_specs
                     * @description Details on the legal guardian's or authorizer's acceptance of the required Stripe agreements.
                     */
                    additional_tos_acceptances?: {
                        /** settings_terms_of_service_specs */
                        account?: {
                            /** Format: unix-time */
                            date?: number;
                            ip?: string;
                            user_agent?: string | "";
                        };
                    };
                    /**
                     * legal_entity_and_kyc_address_specs
                     * @description The person's address.
                     */
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    /**
                     * japan_address_kana_specs
                     * @description The Kana variation of the person's address (Japan only).
                     */
                    address_kana?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    /**
                     * japan_address_kanji_specs
                     * @description The Kanji variation of the person's address (Japan only).
                     */
                    address_kanji?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    /** @description The person's date of birth. */
                    dob?: {
                        day: number;
                        month: number;
                        year: number;
                    } | "";
                    /**
                     * person_documents_specs
                     * @description Documents that may be submitted to satisfy various informational requests.
                     */
                    documents?: {
                        /** documents_param */
                        company_authorization?: {
                            files?: (string | "")[];
                        };
                        /** documents_param */
                        passport?: {
                            files?: (string | "")[];
                        };
                        /** documents_param */
                        visa?: {
                            files?: (string | "")[];
                        };
                    };
                    /** @description The person's email address. */
                    email?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The person's first name. */
                    first_name?: string;
                    /** @description The Kana variation of the person's first name (Japan only). */
                    first_name_kana?: string;
                    /** @description The Kanji variation of the person's first name (Japan only). */
                    first_name_kanji?: string;
                    /** @description A list of alternate names or aliases that the person is known by. */
                    full_name_aliases?: string[] | "";
                    /** @description The person's gender (International regulations require either "male" or "female"). */
                    gender?: string;
                    /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii). */
                    id_number?: string;
                    /** @description The person's secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii). */
                    id_number_secondary?: string;
                    /** @description The person's last name. */
                    last_name?: string;
                    /** @description The Kana variation of the person's last name (Japan only). */
                    last_name_kana?: string;
                    /** @description The Kanji variation of the person's last name (Japan only). */
                    last_name_kanji?: string;
                    /** @description The person's maiden name. */
                    maiden_name?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
                    nationality?: string;
                    /** @description A [person token](https://docs.stripe.com/connect/account-tokens), used to securely provide details to the person. */
                    person_token?: string;
                    /** @description The person's phone number. */
                    phone?: string;
                    /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
                    political_exposure?: string;
                    /**
                     * address_specs
                     * @description The person's registered address.
                     */
                    registered_address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    /**
                     * relationship_specs
                     * @description The relationship that this person has with the account's legal entity.
                     */
                    relationship?: {
                        director?: boolean;
                        executive?: boolean;
                        legal_guardian?: boolean;
                        owner?: boolean;
                        percent_ownership?: number | "";
                        representative?: boolean;
                        title?: string;
                    };
                    /** @description The last four digits of the person's Social Security number (U.S. only). */
                    ssn_last_4?: string;
                    /**
                     * person_verification_specs
                     * @description The person's verification status.
                     */
                    verification?: {
                        /** person_verification_document_specs */
                        additional_document?: {
                            back?: string;
                            front?: string;
                        };
                        /** person_verification_document_specs */
                        document?: {
                            back?: string;
                            front?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteAccountsAccountPeoplePerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
                person: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_person"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountPersons: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Filters on the list of people returned based on the person's relationship to the account's company. */
                relationship?: {
                    director?: boolean;
                    executive?: boolean;
                    legal_guardian?: boolean;
                    owner?: boolean;
                    representative?: boolean;
                };
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["person"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountPersons: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * person_additional_tos_acceptances_specs
                     * @description Details on the legal guardian's or authorizer's acceptance of the required Stripe agreements.
                     */
                    additional_tos_acceptances?: {
                        /** settings_terms_of_service_specs */
                        account?: {
                            /** Format: unix-time */
                            date?: number;
                            ip?: string;
                            user_agent?: string | "";
                        };
                    };
                    /**
                     * legal_entity_and_kyc_address_specs
                     * @description The person's address.
                     */
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    /**
                     * japan_address_kana_specs
                     * @description The Kana variation of the person's address (Japan only).
                     */
                    address_kana?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    /**
                     * japan_address_kanji_specs
                     * @description The Kanji variation of the person's address (Japan only).
                     */
                    address_kanji?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    /** @description The person's date of birth. */
                    dob?: {
                        day: number;
                        month: number;
                        year: number;
                    } | "";
                    /**
                     * person_documents_specs
                     * @description Documents that may be submitted to satisfy various informational requests.
                     */
                    documents?: {
                        /** documents_param */
                        company_authorization?: {
                            files?: (string | "")[];
                        };
                        /** documents_param */
                        passport?: {
                            files?: (string | "")[];
                        };
                        /** documents_param */
                        visa?: {
                            files?: (string | "")[];
                        };
                    };
                    /** @description The person's email address. */
                    email?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The person's first name. */
                    first_name?: string;
                    /** @description The Kana variation of the person's first name (Japan only). */
                    first_name_kana?: string;
                    /** @description The Kanji variation of the person's first name (Japan only). */
                    first_name_kanji?: string;
                    /** @description A list of alternate names or aliases that the person is known by. */
                    full_name_aliases?: string[] | "";
                    /** @description The person's gender (International regulations require either "male" or "female"). */
                    gender?: string;
                    /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii). */
                    id_number?: string;
                    /** @description The person's secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii). */
                    id_number_secondary?: string;
                    /** @description The person's last name. */
                    last_name?: string;
                    /** @description The Kana variation of the person's last name (Japan only). */
                    last_name_kana?: string;
                    /** @description The Kanji variation of the person's last name (Japan only). */
                    last_name_kanji?: string;
                    /** @description The person's maiden name. */
                    maiden_name?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
                    nationality?: string;
                    /** @description A [person token](https://docs.stripe.com/connect/account-tokens), used to securely provide details to the person. */
                    person_token?: string;
                    /** @description The person's phone number. */
                    phone?: string;
                    /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
                    political_exposure?: string;
                    /**
                     * address_specs
                     * @description The person's registered address.
                     */
                    registered_address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    /**
                     * relationship_specs
                     * @description The relationship that this person has with the account's legal entity.
                     */
                    relationship?: {
                        director?: boolean;
                        executive?: boolean;
                        legal_guardian?: boolean;
                        owner?: boolean;
                        percent_ownership?: number | "";
                        representative?: boolean;
                        title?: string;
                    };
                    /** @description The last four digits of the person's Social Security number (U.S. only). */
                    ssn_last_4?: string;
                    /**
                     * person_verification_specs
                     * @description The person's verification status.
                     */
                    verification?: {
                        /** person_verification_document_specs */
                        additional_document?: {
                            back?: string;
                            front?: string;
                        };
                        /** person_verification_document_specs */
                        document?: {
                            back?: string;
                            front?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountPersonsPerson: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                account: string;
                person: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountPersonsPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
                person: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * person_additional_tos_acceptances_specs
                     * @description Details on the legal guardian's or authorizer's acceptance of the required Stripe agreements.
                     */
                    additional_tos_acceptances?: {
                        /** settings_terms_of_service_specs */
                        account?: {
                            /** Format: unix-time */
                            date?: number;
                            ip?: string;
                            user_agent?: string | "";
                        };
                    };
                    /**
                     * legal_entity_and_kyc_address_specs
                     * @description The person's address.
                     */
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    /**
                     * japan_address_kana_specs
                     * @description The Kana variation of the person's address (Japan only).
                     */
                    address_kana?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    /**
                     * japan_address_kanji_specs
                     * @description The Kanji variation of the person's address (Japan only).
                     */
                    address_kanji?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    /** @description The person's date of birth. */
                    dob?: {
                        day: number;
                        month: number;
                        year: number;
                    } | "";
                    /**
                     * person_documents_specs
                     * @description Documents that may be submitted to satisfy various informational requests.
                     */
                    documents?: {
                        /** documents_param */
                        company_authorization?: {
                            files?: (string | "")[];
                        };
                        /** documents_param */
                        passport?: {
                            files?: (string | "")[];
                        };
                        /** documents_param */
                        visa?: {
                            files?: (string | "")[];
                        };
                    };
                    /** @description The person's email address. */
                    email?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The person's first name. */
                    first_name?: string;
                    /** @description The Kana variation of the person's first name (Japan only). */
                    first_name_kana?: string;
                    /** @description The Kanji variation of the person's first name (Japan only). */
                    first_name_kanji?: string;
                    /** @description A list of alternate names or aliases that the person is known by. */
                    full_name_aliases?: string[] | "";
                    /** @description The person's gender (International regulations require either "male" or "female"). */
                    gender?: string;
                    /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii). */
                    id_number?: string;
                    /** @description The person's secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii). */
                    id_number_secondary?: string;
                    /** @description The person's last name. */
                    last_name?: string;
                    /** @description The Kana variation of the person's last name (Japan only). */
                    last_name_kana?: string;
                    /** @description The Kanji variation of the person's last name (Japan only). */
                    last_name_kanji?: string;
                    /** @description The person's maiden name. */
                    maiden_name?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
                    nationality?: string;
                    /** @description A [person token](https://docs.stripe.com/connect/account-tokens), used to securely provide details to the person. */
                    person_token?: string;
                    /** @description The person's phone number. */
                    phone?: string;
                    /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
                    political_exposure?: string;
                    /**
                     * address_specs
                     * @description The person's registered address.
                     */
                    registered_address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    /**
                     * relationship_specs
                     * @description The relationship that this person has with the account's legal entity.
                     */
                    relationship?: {
                        director?: boolean;
                        executive?: boolean;
                        legal_guardian?: boolean;
                        owner?: boolean;
                        percent_ownership?: number | "";
                        representative?: boolean;
                        title?: string;
                    };
                    /** @description The last four digits of the person's Social Security number (U.S. only). */
                    ssn_last_4?: string;
                    /**
                     * person_verification_specs
                     * @description The person's verification status.
                     */
                    verification?: {
                        /** person_verification_document_specs */
                        additional_document?: {
                            back?: string;
                            front?: string;
                        };
                        /** person_verification_document_specs */
                        document?: {
                            back?: string;
                            front?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteAccountsAccountPersonsPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
                person: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_person"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountReject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`. */
                    reason: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplePayDomains: {
        parameters: {
            query?: {
                domain_name?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["apple_pay_domain"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostApplePayDomains: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    domain_name: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apple_pay_domain"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplePayDomainsDomain: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                domain: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apple_pay_domain"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteApplePayDomainsDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                domain: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_apple_pay_domain"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplicationFees: {
        parameters: {
            query?: {
                /** @description Only return application fees for the charge specified by this charge ID. */
                charge?: string;
                /** @description Only return applications fees that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["application_fee"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplicationFeesFeeRefundsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                fee: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["fee_refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostApplicationFeesFeeRefundsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fee: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["fee_refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplicationFeesId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["application_fee"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostApplicationFeesIdRefund: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    directive?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["application_fee"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplicationFeesIdRefunds: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["fee_refund"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostApplicationFeesIdRefunds: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A positive integer, in _cents (or local equivalent)_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee. */
                    amount?: number;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["fee_refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAppsSecrets: {
        parameters: {
            query: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user. */
                scope: {
                    /** @enum {string} */
                    type: "account" | "user";
                    user?: string;
                };
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["apps.secret"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAppsSecrets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description The Unix timestamp for the expiry time of the secret, after which the secret deletes.
                     */
                    expires_at?: number;
                    /** @description A name for the secret that's unique within the scope. */
                    name: string;
                    /** @description The plaintext secret value to be stored. */
                    payload: string;
                    /**
                     * scope_param
                     * @description Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
                     */
                    scope: {
                        /** @enum {string} */
                        type: "account" | "user";
                        user?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apps.secret"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAppsSecretsDelete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A name for the secret that's unique within the scope. */
                    name: string;
                    /**
                     * scope_param
                     * @description Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
                     */
                    scope: {
                        /** @enum {string} */
                        type: "account" | "user";
                        user?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apps.secret"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAppsSecretsFind: {
        parameters: {
            query: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A name for the secret that's unique within the scope. */
                name: string;
                /** @description Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user. */
                scope: {
                    /** @enum {string} */
                    type: "account" | "user";
                    user?: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apps.secret"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBalance: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["balance"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBalanceHistory: {
        parameters: {
            query?: {
                /** @description Only return transactions that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                currency?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */
                payout?: string;
                /** @description Only returns the original transaction. */
                source?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. */
                type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["balance_transaction"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBalanceHistoryId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["balance_transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBalanceTransactions: {
        parameters: {
            query?: {
                /** @description Only return transactions that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                currency?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */
                payout?: string;
                /** @description Only returns the original transaction. */
                source?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. */
                type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["balance_transaction"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBalanceTransactionsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["balance_transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingAlerts: {
        parameters: {
            query?: {
                /** @description Filter results to only include this type of alert. */
                alert_type?: "usage_threshold";
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Filter results to only include alerts with the given meter. */
                meter?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["billing.alert"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingAlerts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description The type of alert to create.
                     * @enum {string}
                     */
                    alert_type: "usage_threshold";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The title of the alert. */
                    title: string;
                    /**
                     * usage_threshold_config
                     * @description The configuration of the usage threshold.
                     */
                    usage_threshold?: {
                        filters?: {
                            customer?: string;
                            /** @enum {string} */
                            type: "customer";
                        }[];
                        gte: number;
                        meter?: string;
                        /** @enum {string} */
                        recurrence: "one_time";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.alert"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingAlertsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.alert"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingAlertsIdActivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.alert"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingAlertsIdArchive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.alert"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingAlertsIdDeactivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.alert"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingCreditBalanceSummary: {
        parameters: {
            query: {
                /** @description The customer for which to fetch credit balance summary. */
                customer: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description The filter criteria for the credit balance summary. */
                filter: {
                    /** scope_param */
                    applicability_scope?: {
                        /** @enum {string} */
                        price_type: "metered";
                    };
                    credit_grant?: string;
                    /** @enum {string} */
                    type: "applicability_scope" | "credit_grant";
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.credit_balance_summary"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingCreditBalanceTransactions: {
        parameters: {
            query: {
                /** @description The credit grant for which to fetch credit balance transactions. */
                credit_grant?: string;
                /** @description The customer for which to fetch credit balance transactions. */
                customer: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["billing.credit_balance_transaction"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingCreditBalanceTransactionsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                /** @description Unique identifier for the object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.credit_balance_transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingCreditGrants: {
        parameters: {
            query?: {
                /** @description Only return credit grants for this customer. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["billing.credit_grant"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingCreditGrants: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * amount_param
                     * @description Amount of this credit grant.
                     */
                    amount: {
                        /** monetary_amount_param */
                        monetary?: {
                            currency: string;
                            value: number;
                        };
                        /** @enum {string} */
                        type: "monetary";
                    };
                    /**
                     * applicability_config_param
                     * @description Configuration specifying what this credit grant applies to.
                     */
                    applicability_config: {
                        /** scope_param */
                        scope: {
                            /** @enum {string} */
                            price_type: "metered";
                        };
                    };
                    /**
                     * @description The category of this credit grant.
                     * @enum {string}
                     */
                    category: "paid" | "promotional";
                    /** @description ID of the customer to receive the billing credits. */
                    customer: string;
                    /**
                     * Format: unix-time
                     * @description The time when the billing credits become effective—when they're eligible for use. Defaults to the current timestamp if not specified.
                     */
                    effective_at?: number;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description The time when the billing credits will expire. If not specified, the billing credits don't expire.
                     */
                    expires_at?: number;
                    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object (for example, cost basis) in a structured format. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description A descriptive name shown in the Dashboard. */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.credit_grant"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingCreditGrantsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                /** @description Unique identifier for the object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.credit_grant"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingCreditGrantsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for the object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The time when the billing credits created by this credit grant expire. If set to empty, the billing credits never expire. */
                    expires_at?: number | "";
                    /** @description Set of key-value pairs you can attach to an object. This can be useful for storing additional information about the object (for example, cost basis) in a structured format. */
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.credit_grant"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingCreditGrantsIdExpire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for the object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.credit_grant"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingCreditGrantsIdVoid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for the object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.credit_grant"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingMeterEventAdjustments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * event_adjustment_cancel_settings_param
                     * @description Specifies which event to cancel.
                     */
                    cancel?: {
                        identifier?: string;
                    };
                    /** @description The name of the meter event. Corresponds with the `event_name` field on a meter. */
                    event_name: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * @description Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.
                     * @enum {string}
                     */
                    type: "cancel";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.meter_event_adjustment"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingMeterEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The name of the meter event. Corresponds with the `event_name` field on a meter. */
                    event_name: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A unique identifier for the event. If not provided, one will be generated. We strongly advise using UUID-like identifiers. We will enforce uniqueness within a rolling period of at least 24 hours. The enforcement of uniqueness primarily addresses issues arising from accidental retries or other problems occurring within extremely brief time intervals. This approach helps prevent duplicate entries and ensures data integrity in high-frequency operations. */
                    identifier?: string;
                    /** @description The payload of the event. This must contain the fields corresponding to a meter's `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#payload-key-overrides). */
                    payload: {
                        [key: string]: string;
                    };
                    /**
                     * Format: unix-time
                     * @description The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.
                     */
                    timestamp?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.meter_event"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingMeters: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Filter results to only include meters with the given status. */
                status?: "active" | "inactive";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["billing.meter"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingMeters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * customer_mapping_param
                     * @description Fields that specify how to map a meter event to a customer.
                     */
                    customer_mapping?: {
                        event_payload_key: string;
                        /** @enum {string} */
                        type: "by_id";
                    };
                    /**
                     * aggregation_settings_param
                     * @description The default settings to aggregate a meter's events with.
                     */
                    default_aggregation: {
                        /** @enum {string} */
                        formula: "count" | "sum";
                    };
                    /** @description The meter's name. */
                    display_name: string;
                    /** @description The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events. */
                    event_name: string;
                    /**
                     * @description The time window to pre-aggregate meter events for, if any.
                     * @enum {string}
                     */
                    event_time_window?: "day" | "hour";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * meter_value_settings_param
                     * @description Fields that specify how to calculate a meter event's value.
                     */
                    value_settings?: {
                        event_payload_key: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.meter"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingMetersId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                /** @description Unique identifier for the object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.meter"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingMetersId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for the object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The meter's name. */
                    display_name?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.meter"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingMetersIdDeactivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for the object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.meter"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingMetersIdEventSummaries: {
        parameters: {
            query: {
                /** @description The customer for which to fetch event summaries. */
                customer: string;
                /** @description The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries. */
                end_time: number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries. */
                start_time: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, ..., 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC). */
                value_grouping_window?: "day" | "hour";
            };
            header?: never;
            path: {
                /** @description Unique identifier for the object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["billing.meter_event_summary"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingMetersIdReactivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for the object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing.meter"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingPortalConfigurations: {
        parameters: {
            query?: {
                /** @description Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations). */
                active?: boolean;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration). */
                is_default?: boolean;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["billing_portal.configuration"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingPortalConfigurations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * business_profile_create_param
                     * @description The business information shown to customers in the portal.
                     */
                    business_profile?: {
                        headline?: string | "";
                        privacy_policy_url?: string;
                        terms_of_service_url?: string;
                    };
                    /** @description The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
                    default_return_url?: string | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * features_creation_param
                     * @description Information about the features available in the portal.
                     */
                    features: {
                        /** customer_update_creation_param */
                        customer_update?: {
                            allowed_updates?: ("address" | "email" | "name" | "phone" | "shipping" | "tax_id")[] | "";
                            enabled: boolean;
                        };
                        /** invoice_list_param */
                        invoice_history?: {
                            enabled: boolean;
                        };
                        /** payment_method_update_param */
                        payment_method_update?: {
                            enabled: boolean;
                        };
                        /** subscription_cancel_creation_param */
                        subscription_cancel?: {
                            /** subscription_cancellation_reason_creation_param */
                            cancellation_reason?: {
                                enabled: boolean;
                                options: ("customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused")[] | "";
                            };
                            enabled: boolean;
                            /** @enum {string} */
                            mode?: "at_period_end" | "immediately";
                            /** @enum {string} */
                            proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        };
                        /** subscription_update_creation_param */
                        subscription_update?: {
                            default_allowed_updates?: ("price" | "promotion_code" | "quantity")[] | "";
                            enabled: boolean;
                            products?: {
                                prices: string[];
                                product: string;
                            }[] | "";
                            /** @enum {string} */
                            proration_behavior?: "always_invoice" | "create_prorations" | "none";
                            /** schedule_update_at_period_end_creating_param */
                            schedule_at_period_end?: {
                                conditions?: {
                                    /** @enum {string} */
                                    type: "decreasing_item_amount" | "shortening_interval";
                                }[];
                            };
                        };
                    };
                    /**
                     * login_page_create_param
                     * @description The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).
                     */
                    login_page?: {
                        enabled: boolean;
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing_portal.configuration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingPortalConfigurationsConfiguration: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                configuration: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing_portal.configuration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingPortalConfigurationsConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                configuration: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the configuration is active and can be used to create portal sessions. */
                    active?: boolean;
                    /**
                     * business_profile_update_param
                     * @description The business information shown to customers in the portal.
                     */
                    business_profile?: {
                        headline?: string | "";
                        privacy_policy_url?: string | "";
                        terms_of_service_url?: string | "";
                    };
                    /** @description The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
                    default_return_url?: string | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * features_updating_param
                     * @description Information about the features available in the portal.
                     */
                    features?: {
                        /** customer_update_updating_param */
                        customer_update?: {
                            allowed_updates?: ("address" | "email" | "name" | "phone" | "shipping" | "tax_id")[] | "";
                            enabled?: boolean;
                        };
                        /** invoice_list_param */
                        invoice_history?: {
                            enabled: boolean;
                        };
                        /** payment_method_update_param */
                        payment_method_update?: {
                            enabled: boolean;
                        };
                        /** subscription_cancel_updating_param */
                        subscription_cancel?: {
                            /** subscription_cancellation_reason_updating_param */
                            cancellation_reason?: {
                                enabled: boolean;
                                options?: ("customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused")[] | "";
                            };
                            enabled?: boolean;
                            /** @enum {string} */
                            mode?: "at_period_end" | "immediately";
                            /** @enum {string} */
                            proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        };
                        /** subscription_update_updating_param */
                        subscription_update?: {
                            default_allowed_updates?: ("price" | "promotion_code" | "quantity")[] | "";
                            enabled?: boolean;
                            products?: {
                                prices: string[];
                                product: string;
                            }[] | "";
                            /** @enum {string} */
                            proration_behavior?: "always_invoice" | "create_prorations" | "none";
                            /** schedule_update_at_period_end_updating_param */
                            schedule_at_period_end?: {
                                conditions?: {
                                    /** @enum {string} */
                                    type: "decreasing_item_amount" | "shortening_interval";
                                }[] | "";
                            };
                        };
                    };
                    /**
                     * login_page_update_param
                     * @description The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).
                     */
                    login_page?: {
                        enabled: boolean;
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing_portal.configuration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingPortalSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The ID of an existing [configuration](https://stripe.com/docs/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration. */
                    configuration?: string;
                    /** @description The ID of an existing customer. */
                    customer: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * flow_data_param
                     * @description Information about a specific flow for the customer to go through. See the [docs](https://stripe.com/docs/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.
                     */
                    flow_data?: {
                        /** flow_data_after_completion_param */
                        after_completion?: {
                            /** after_completion_hosted_confirmation_param */
                            hosted_confirmation?: {
                                custom_message?: string;
                            };
                            /** after_completion_redirect_param */
                            redirect?: {
                                return_url: string;
                            };
                            /** @enum {string} */
                            type: "hosted_confirmation" | "portal_homepage" | "redirect";
                        };
                        /** flow_data_subscription_cancel_param */
                        subscription_cancel?: {
                            /** retention_param */
                            retention?: {
                                /** coupon_offer_param */
                                coupon_offer: {
                                    coupon: string;
                                };
                                /** @enum {string} */
                                type: "coupon_offer";
                            };
                            subscription: string;
                        };
                        /** flow_data_subscription_update_param */
                        subscription_update?: {
                            subscription: string;
                        };
                        /** flow_data_subscription_update_confirm_param */
                        subscription_update_confirm?: {
                            discounts?: {
                                coupon?: string;
                                promotion_code?: string;
                            }[];
                            items: {
                                id: string;
                                price?: string;
                                quantity?: number;
                            }[];
                            subscription: string;
                        };
                        /** @enum {string} */
                        type: "payment_method_update" | "subscription_cancel" | "subscription_update" | "subscription_update_confirm";
                    };
                    /**
                     * @description The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
                     * @enum {string}
                     */
                    locale?: "auto" | "bg" | "cs" | "da" | "de" | "el" | "en" | "en-AU" | "en-CA" | "en-GB" | "en-IE" | "en-IN" | "en-NZ" | "en-SG" | "es" | "es-419" | "et" | "fi" | "fil" | "fr" | "fr-CA" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "lv" | "ms" | "mt" | "nb" | "nl" | "pl" | "pt" | "pt-BR" | "ro" | "ru" | "sk" | "sl" | "sv" | "th" | "tr" | "vi" | "zh" | "zh-HK" | "zh-TW";
                    /** @description The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays. */
                    on_behalf_of?: string;
                    /** @description The default URL to redirect customers to when they click on the portal's link to return to your website. */
                    return_url?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["billing_portal.session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCharges: {
        parameters: {
            query?: {
                /** @description Only return charges that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return charges for the customer specified by this customer ID. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID. */
                payment_intent?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return charges for this transfer group, limited to 100. */
                transfer_group?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["charge"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCharges: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
                    amount?: number;
                    application_fee?: number;
                    /** @description A fee in cents (or local equivalent) that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collect-fees). */
                    application_fee_amount?: number;
                    /** @description Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire after a set number of days (7 by default). For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation. */
                    capture?: boolean;
                    /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        number: string;
                        /** @enum {string} */
                        object?: "card";
                    } | string;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description The ID of an existing customer that will be charged in this request. */
                    customer?: string;
                    /** @description An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing. */
                    description?: string;
                    destination?: {
                        account: string;
                        amount?: number;
                    } | string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant). */
                    on_behalf_of?: string;
                    /**
                     * radar_options_with_hidden_options
                     * @description Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
                     */
                    radar_options?: {
                        session?: string;
                    };
                    /** @description The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
                    receipt_email?: string;
                    /**
                     * optional_fields_shipping
                     * @description Shipping information for the charge. Helps prevent fraud on charges for physical goods.
                     */
                    shipping?: {
                        /** optional_fields_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        carrier?: string;
                        name: string;
                        phone?: string;
                        tracking_number?: string;
                    };
                    /** @description A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer. */
                    source?: string;
                    /** @description For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
                     *
                     *     For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix. */
                    statement_descriptor?: string;
                    /** @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor. */
                    statement_descriptor_suffix?: string;
                    /**
                     * transfer_data_specs
                     * @description An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
                     */
                    transfer_data?: {
                        amount?: number;
                        destination: string;
                    };
                    /** @description A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options). */
                    transfer_group?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["charge"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetChargesSearch: {
        parameters: {
            query: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
                page?: string;
                /** @description The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges). */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["charge"][];
                        has_more: boolean;
                        next_page?: string | null;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value.
                         * @enum {string}
                         */
                        object: "search_result";
                        /** @description The total number of objects that match the query, only accurate up to 10,000. */
                        total_count?: number;
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetChargesCharge: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                charge: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["charge"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesCharge: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                charge: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge. */
                    customer?: string;
                    /** @description An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * fraud_details
                     * @description A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms.
                     */
                    fraud_details?: {
                        /** @enum {string} */
                        user_report: "" | "fraudulent" | "safe";
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address. */
                    receipt_email?: string;
                    /**
                     * optional_fields_shipping
                     * @description Shipping information for the charge. Helps prevent fraud on charges for physical goods.
                     */
                    shipping?: {
                        /** optional_fields_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        carrier?: string;
                        name: string;
                        phone?: string;
                        tracking_number?: string;
                    };
                    /** @description A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details. */
                    transfer_group?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["charge"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeCapture: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                charge: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. */
                    amount?: number;
                    /** @description An application fee to add on to this charge. */
                    application_fee?: number;
                    /** @description An application fee amount to add on to this charge, which must be less than or equal to the original amount. */
                    application_fee_amount?: number;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode. */
                    receipt_email?: string;
                    /** @description For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
                     *
                     *     For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix. */
                    statement_descriptor?: string;
                    /** @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor. */
                    statement_descriptor_suffix?: string;
                    /**
                     * transfer_data_specs
                     * @description An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
                     */
                    transfer_data?: {
                        amount?: number;
                    };
                    /** @description A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details. */
                    transfer_group?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["charge"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetChargesChargeDispute: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                charge: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeDispute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                charge: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * dispute_evidence_params
                     * @description Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.
                     */
                    evidence?: {
                        access_activity_log?: string;
                        billing_address?: string;
                        cancellation_policy?: string;
                        cancellation_policy_disclosure?: string;
                        cancellation_rebuttal?: string;
                        customer_communication?: string;
                        customer_email_address?: string;
                        customer_name?: string;
                        customer_purchase_ip?: string;
                        customer_signature?: string;
                        duplicate_charge_documentation?: string;
                        duplicate_charge_explanation?: string;
                        duplicate_charge_id?: string;
                        enhanced_evidence?: {
                            /** visa_compelling_evidence3 */
                            visa_compelling_evidence_3?: {
                                /** visa_compelling_evidence3_disputed_transaction */
                                disputed_transaction?: {
                                    customer_account_id?: string | "";
                                    customer_device_fingerprint?: string | "";
                                    customer_device_id?: string | "";
                                    customer_email_address?: string | "";
                                    customer_purchase_ip?: string | "";
                                    /** @enum {string} */
                                    merchandise_or_services?: "merchandise" | "services";
                                    product_description?: string | "";
                                    /** shipping_address */
                                    shipping_address?: {
                                        city?: string | "";
                                        country?: string | "";
                                        line1?: string | "";
                                        line2?: string | "";
                                        postal_code?: string | "";
                                        state?: string | "";
                                    };
                                };
                                prior_undisputed_transactions?: {
                                    charge: string;
                                    customer_account_id?: string | "";
                                    customer_device_fingerprint?: string | "";
                                    customer_device_id?: string | "";
                                    customer_email_address?: string | "";
                                    customer_purchase_ip?: string | "";
                                    product_description?: string | "";
                                    /** shipping_address */
                                    shipping_address?: {
                                        city?: string | "";
                                        country?: string | "";
                                        line1?: string | "";
                                        line2?: string | "";
                                        postal_code?: string | "";
                                        state?: string | "";
                                    };
                                }[];
                            };
                        } | "";
                        product_description?: string;
                        receipt?: string;
                        refund_policy?: string;
                        refund_policy_disclosure?: string;
                        refund_refusal_explanation?: string;
                        service_date?: string;
                        service_documentation?: string;
                        shipping_address?: string;
                        shipping_carrier?: string;
                        shipping_date?: string;
                        shipping_documentation?: string;
                        shipping_tracking_number?: string;
                        uncategorized_file?: string;
                        uncategorized_text?: string;
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default). */
                    submit?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeDisputeClose: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                charge: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeRefund: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier of the charge to refund. */
                charge: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge. */
                    amount?: number;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions. */
                    instructions_email?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The identifier of the PaymentIntent to refund. */
                    payment_intent?: string;
                    /**
                     * @description String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://stripe.com/docs/radar/lists), and will also help us improve our fraud detection algorithms.
                     * @enum {string}
                     */
                    reason?: "duplicate" | "fraudulent" | "requested_by_customer";
                    /** @description Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge. */
                    refund_application_fee?: boolean;
                    /** @description Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).<br><br>A transfer can be reversed only by the application that created the charge. */
                    reverse_transfer?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["charge"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetChargesChargeRefunds: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                charge: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["refund"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeRefunds: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier of the charge to refund. */
                charge: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description Customer whose customer balance to refund from. */
                    customer?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions. */
                    instructions_email?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * @description Origin of the refund
                     * @enum {string}
                     */
                    origin?: "customer_balance";
                    /** @description The identifier of the PaymentIntent to refund. */
                    payment_intent?: string;
                    /**
                     * @description String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://stripe.com/docs/radar/lists), and will also help us improve our fraud detection algorithms.
                     * @enum {string}
                     */
                    reason?: "duplicate" | "fraudulent" | "requested_by_customer";
                    /** @description Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge. */
                    refund_application_fee?: boolean;
                    /** @description Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).<br><br>A transfer can be reversed only by the application that created the charge. */
                    reverse_transfer?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetChargesChargeRefundsRefund: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                charge: string;
                refund: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeRefundsRefund: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                charge: string;
                refund: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCheckoutSessions: {
        parameters: {
            query?: {
                /** @description Only return Checkout Sessions that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return the Checkout Sessions for the Customer specified. */
                customer?: string;
                /** @description Only return the Checkout Sessions for the Customer details specified. */
                customer_details?: {
                    email: string;
                };
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return the Checkout Session for the PaymentIntent specified. */
                payment_intent?: string;
                /** @description Only return the Checkout Sessions for the Payment Link specified. */
                payment_link?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return the Checkout Sessions matching the given status. */
                status?: "complete" | "expired" | "open";
                /** @description Only return the Checkout Session for the subscription specified. */
                subscription?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["checkout.session"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCheckoutSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * adaptive_pricing_params
                     * @description Settings for price localization with [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing).
                     */
                    adaptive_pricing?: {
                        enabled?: boolean;
                    };
                    /**
                     * after_expiration_params
                     * @description Configure actions after a Checkout Session has expired.
                     */
                    after_expiration?: {
                        /** recovery_params */
                        recovery?: {
                            allow_promotion_codes?: boolean;
                            enabled: boolean;
                        };
                    };
                    /** @description Enables user redeemable promotion codes. */
                    allow_promotion_codes?: boolean;
                    /**
                     * automatic_tax_params
                     * @description Settings for automatic tax lookup for this session and resulting payments, invoices, and subscriptions.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * @description Specify whether Checkout should collect the customer's billing address. Defaults to `auto`.
                     * @enum {string}
                     */
                    billing_address_collection?: "auto" | "required";
                    /** @description If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website. This parameter is not allowed if ui_mode is `embedded`. */
                    cancel_url?: string;
                    /** @description A unique string to reference the Checkout Session. This can be a
                     *     customer ID, a cart ID, or similar, and can be used to reconcile the
                     *     session with your internal systems. */
                    client_reference_id?: string;
                    /**
                     * consent_collection_params
                     * @description Configure fields for the Checkout Session to gather active consent from customers.
                     */
                    consent_collection?: {
                        /** payment_method_reuse_agreement_params */
                        payment_method_reuse_agreement?: {
                            /** @enum {string} */
                            position: "auto" | "hidden";
                        };
                        /** @enum {string} */
                        promotions?: "auto" | "none";
                        /** @enum {string} */
                        terms_of_service?: "none" | "required";
                    };
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). Required in `setup` mode when `payment_method_types` is not set. */
                    currency?: string;
                    /** @description Collect additional information from your customer using custom fields. Up to 3 fields are supported. */
                    custom_fields?: {
                        /** custom_field_dropdown_param */
                        dropdown?: {
                            default_value?: string;
                            options: {
                                label: string;
                                value: string;
                            }[];
                        };
                        key: string;
                        /** custom_field_label_param */
                        label: {
                            custom: string;
                            /** @enum {string} */
                            type: "custom";
                        };
                        /** custom_field_numeric_param */
                        numeric?: {
                            default_value?: string;
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        optional?: boolean;
                        /** custom_field_text_param */
                        text?: {
                            default_value?: string;
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        /** @enum {string} */
                        type: "dropdown" | "numeric" | "text";
                    }[];
                    /**
                     * custom_text_param
                     * @description Display additional text for your customers using custom text.
                     */
                    custom_text?: {
                        after_submit?: {
                            message: string;
                        } | "";
                        shipping_address?: {
                            message: string;
                        } | "";
                        submit?: {
                            message: string;
                        } | "";
                        terms_of_service_acceptance?: {
                            message: string;
                        } | "";
                    };
                    /** @description ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recently saved card
                     *     payment method will be used to prefill the email, name, card details, and billing address
                     *     on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method)
                     *     will be used if it’s a card, otherwise the most recently saved card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer's card details.
                     *
                     *     If the Customer already has a valid [email](https://stripe.com/docs/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout.
                     *     If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.
                     *
                     *     If blank for Checkout Sessions in `subscription` mode or with `customer_creation` set as `always` in `payment` mode, Checkout will create a new Customer object based on information provided during the payment flow.
                     *
                     *     You can set [`payment_intent_data.setup_future_usage`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse. */
                    customer?: string;
                    /**
                     * @description Configure whether a Checkout Session creates a [Customer](https://stripe.com/docs/api/customers) during Session confirmation.
                     *
                     *     When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout
                     *     with [customer_details](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details).
                     *
                     *     Sessions that don't create Customers instead are grouped by [guest customers](https://stripe.com/docs/payments/checkout/guest-customers)
                     *     in the Dashboard. Promotion codes limited to first time customers will return invalid for these Sessions.
                     *
                     *     Can only be set in `payment` and `setup` mode.
                     * @enum {string}
                     */
                    customer_creation?: "always" | "if_required";
                    /** @description If provided, this value will be used when the Customer object is created.
                     *     If not provided, customers will be asked to enter their email address.
                     *     Use this parameter to prefill customer data if you already have an email
                     *     on file. To access information about the customer once a session is
                     *     complete, use the `customer` field. */
                    customer_email?: string;
                    /**
                     * customer_update_params
                     * @description Controls what fields on Customer can be updated by the Checkout Session. Can only be provided when `customer` is provided.
                     */
                    customer_update?: {
                        /** @enum {string} */
                        address?: "auto" | "never";
                        /** @enum {string} */
                        name?: "auto" | "never";
                        /** @enum {string} */
                        shipping?: "auto" | "never";
                    };
                    /** @description The coupon or promotion code to apply to this Session. Currently, only up to one may be specified. */
                    discounts?: {
                        coupon?: string;
                        promotion_code?: string;
                    }[];
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 30 minutes to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
                     */
                    expires_at?: number;
                    /**
                     * invoice_creation_params
                     * @description Generate a post-purchase Invoice for one-time payments.
                     */
                    invoice_creation?: {
                        enabled: boolean;
                        /** invoice_data_params */
                        invoice_data?: {
                            account_tax_ids?: string[] | "";
                            custom_fields?: {
                                name: string;
                                value: string;
                            }[] | "";
                            description?: string;
                            footer?: string;
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                            metadata?: {
                                [key: string]: string;
                            };
                            rendering_options?: {
                                /** @enum {string} */
                                amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                            } | "";
                        };
                    };
                    /** @description A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).
                     *
                     *     For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.
                     *
                     *     For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only. */
                    line_items?: {
                        /** adjustable_quantity_params */
                        adjustable_quantity?: {
                            enabled: boolean;
                            maximum?: number;
                            minimum?: number;
                        };
                        dynamic_tax_rates?: string[];
                        price?: string;
                        /** price_data_with_product_data */
                        price_data?: {
                            currency: string;
                            product?: string;
                            /** product_data */
                            product_data?: {
                                description?: string;
                                images?: string[];
                                metadata?: {
                                    [key: string]: string;
                                };
                                name: string;
                                tax_code?: string;
                            };
                            /** recurring_adhoc */
                            recurring?: {
                                /** @enum {string} */
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[];
                    }[];
                    /**
                     * @description The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
                     * @enum {string}
                     */
                    locale?: "auto" | "bg" | "cs" | "da" | "de" | "el" | "en" | "en-GB" | "es" | "es-419" | "et" | "fi" | "fil" | "fr" | "fr-CA" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "lv" | "ms" | "mt" | "nb" | "nl" | "pl" | "pt" | "pt-BR" | "ro" | "ru" | "sk" | "sl" | "sv" | "th" | "tr" | "vi" | "zh" | "zh-HK" | "zh-TW";
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * @description The mode of the Checkout Session. Pass `subscription` if the Checkout Session includes at least one recurring item.
                     * @enum {string}
                     */
                    mode?: "payment" | "setup" | "subscription";
                    /**
                     * payment_intent_data_params
                     * @description A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode.
                     */
                    payment_intent_data?: {
                        application_fee_amount?: number;
                        /** @enum {string} */
                        capture_method?: "automatic" | "automatic_async" | "manual";
                        description?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                        receipt_email?: string;
                        /** @enum {string} */
                        setup_future_usage?: "off_session" | "on_session";
                        /** shipping */
                        shipping?: {
                            /** address */
                            address: {
                                city?: string;
                                country?: string;
                                line1: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            carrier?: string;
                            name: string;
                            phone?: string;
                            tracking_number?: string;
                        };
                        statement_descriptor?: string;
                        statement_descriptor_suffix?: string;
                        /** transfer_data_params */
                        transfer_data?: {
                            amount?: number;
                            destination: string;
                        };
                        transfer_group?: string;
                    };
                    /**
                     * @description Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.
                     *     This may occur if the Checkout Session includes a free trial or a discount.
                     *
                     *     Can only be set in `subscription` mode. Defaults to `always`.
                     *
                     *     If you'd like information on how to collect a payment method outside of Checkout, read the guide on configuring [subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
                     * @enum {string}
                     */
                    payment_method_collection?: "always" | "if_required";
                    /** @description The ID of the payment method configuration to use with this Checkout session. */
                    payment_method_configuration?: string;
                    /**
                     * payment_method_data_param
                     * @description This parameter allows you to set some attributes on the payment method created during a Checkout session.
                     */
                    payment_method_data?: {
                        /** @enum {string} */
                        allow_redisplay?: "always" | "limited" | "unspecified";
                    };
                    /**
                     * payment_method_options_param
                     * @description Payment-method-specific configuration.
                     */
                    payment_method_options?: {
                        /** payment_method_options_param */
                        acss_debit?: {
                            /** @enum {string} */
                            currency?: "cad" | "usd";
                            /** mandate_options_param */
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                default_for?: ("invoice" | "subscription")[];
                                interval_description?: string;
                                /** @enum {string} */
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                /** @enum {string} */
                                transaction_type?: "business" | "personal";
                            };
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session" | "on_session";
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                        /** payment_method_options_param */
                        affirm?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        afterpay_clearpay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        alipay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        amazon_pay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session";
                        };
                        /** payment_method_options_param */
                        au_becs_debit?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        bacs_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session" | "on_session";
                        };
                        /** payment_method_options_param */
                        bancontact?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        boleto?: {
                            expires_after_days?: number;
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session" | "on_session";
                        };
                        /** payment_method_options_param */
                        card?: {
                            /** installments_param */
                            installments?: {
                                enabled?: boolean;
                            };
                            /** @enum {string} */
                            request_extended_authorization?: "if_available" | "never";
                            /** @enum {string} */
                            request_incremental_authorization?: "if_available" | "never";
                            /** @enum {string} */
                            request_multicapture?: "if_available" | "never";
                            /** @enum {string} */
                            request_overcapture?: "if_available" | "never";
                            /** @enum {string} */
                            request_three_d_secure?: "any" | "automatic" | "challenge";
                            /** @enum {string} */
                            setup_future_usage?: "off_session" | "on_session";
                            statement_descriptor_suffix_kana?: string;
                            statement_descriptor_suffix_kanji?: string;
                        };
                        /** payment_method_options_param */
                        cashapp?: {
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session" | "on_session";
                        };
                        /** payment_method_options_param */
                        customer_balance?: {
                            /** bank_transfer_param */
                            bank_transfer?: {
                                /** eu_bank_transfer_params */
                                eu_bank_transfer?: {
                                    country: string;
                                };
                                requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
                                /** @enum {string} */
                                type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
                            };
                            /** @enum {string} */
                            funding_type?: "bank_transfer";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        eps?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        fpx?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        giropay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        grabpay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        ideal?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        kakao_pay?: {
                            /** @enum {string} */
                            capture_method?: "manual";
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session";
                        };
                        /** payment_method_options_param */
                        klarna?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        konbini?: {
                            expires_after_days?: number;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        kr_card?: {
                            /** @enum {string} */
                            capture_method?: "manual";
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session";
                        };
                        /** payment_method_options_param */
                        link?: {
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session";
                        };
                        /** payment_method_options_param */
                        mobilepay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        multibanco?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        naver_pay?: {
                            /** @enum {string} */
                            capture_method?: "manual";
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session";
                        };
                        /** payment_method_options_param */
                        oxxo?: {
                            expires_after_days?: number;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        p24?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                            tos_shown_and_accepted?: boolean;
                        };
                        /** payment_method_options_param */
                        payco?: {
                            /** @enum {string} */
                            capture_method?: "manual";
                        };
                        /** payment_method_options_param */
                        paynow?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        paypal?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-DE" | "de-LU" | "el-GR" | "en-GB" | "en-US" | "es-ES" | "fi-FI" | "fr-BE" | "fr-FR" | "fr-LU" | "hu-HU" | "it-IT" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sk-SK" | "sv-SE";
                            reference?: string;
                            risk_correlation_id?: string;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        };
                        /** payment_method_options_param */
                        pix?: {
                            expires_after_seconds?: number;
                        };
                        /** payment_method_options_param */
                        revolut_pay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session";
                        };
                        /** payment_method_options_param */
                        samsung_pay?: {
                            /** @enum {string} */
                            capture_method?: "manual";
                        };
                        /** payment_method_options_param */
                        sepa_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session" | "on_session";
                        };
                        /** payment_method_options_param */
                        sofort?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                        /** payment_method_options_param */
                        swish?: {
                            reference?: string;
                        };
                        /** payment_method_options_param */
                        us_bank_account?: {
                            /** linked_account_options_param */
                            financial_connections?: {
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                prefetch?: ("balances" | "ownership" | "transactions")[];
                            };
                            /** @enum {string} */
                            setup_future_usage?: "none" | "off_session" | "on_session";
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant";
                        };
                        /** payment_method_options_param */
                        wechat_pay?: {
                            app_id?: string;
                            /** @enum {string} */
                            client: "android" | "ios" | "web";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        };
                    };
                    /** @description A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.
                     *
                     *     You can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
                     *     See [Dynamic Payment Methods](https://stripe.com/docs/payments/payment-methods/integration-options#using-dynamic-payment-methods) for more details.
                     *
                     *     Read more about the supported payment methods and their requirements in our [payment
                     *     method details guide](/docs/payments/checkout/payment-methods).
                     *
                     *     If multiple payment methods are passed, Checkout will dynamically reorder them to
                     *     prioritize the most relevant payment methods based on the customer's location and
                     *     other characteristics. */
                    payment_method_types?: ("acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip")[];
                    /**
                     * phone_number_collection_params
                     * @description Controls phone number collection settings for the session.
                     *
                     *     We recommend that you review your privacy policy and check with your legal contacts
                     *     before using this feature. Learn more about [collecting phone numbers with Checkout](https://stripe.com/docs/payments/checkout/phone-numbers).
                     */
                    phone_number_collection?: {
                        enabled: boolean;
                    };
                    /**
                     * @description This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`.
                     * @enum {string}
                     */
                    redirect_on_completion?: "always" | "if_required" | "never";
                    /** @description The URL to redirect your customer back to after they authenticate or cancel their payment on the
                     *     payment method's app or site. This parameter is required if ui_mode is `embedded`
                     *     and redirect-based payment methods are enabled on the session. */
                    return_url?: string;
                    /**
                     * saved_payment_method_options_param
                     * @description Controls saved payment method settings for the session. Only available in `payment` and `subscription` mode.
                     */
                    saved_payment_method_options?: {
                        allow_redisplay_filters?: ("always" | "limited" | "unspecified")[];
                        /** @enum {string} */
                        payment_method_save?: "disabled" | "enabled";
                    };
                    /**
                     * setup_intent_data_param
                     * @description A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in `setup` mode.
                     */
                    setup_intent_data?: {
                        description?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                    };
                    /**
                     * shipping_address_collection_params
                     * @description When set, provides configuration for Checkout to collect a shipping address from a customer.
                     */
                    shipping_address_collection?: {
                        allowed_countries: ("AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MK" | "ML" | "MM" | "MN" | "MO" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | "ZZ")[];
                    };
                    /** @description The shipping rate options to apply to this Session. Up to a maximum of 5. */
                    shipping_options?: {
                        shipping_rate?: string;
                        /** method_params */
                        shipping_rate_data?: {
                            /** delivery_estimate */
                            delivery_estimate?: {
                                /** delivery_estimate_bound */
                                maximum?: {
                                    /** @enum {string} */
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                                /** delivery_estimate_bound */
                                minimum?: {
                                    /** @enum {string} */
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                            };
                            display_name: string;
                            /** fixed_amount */
                            fixed_amount?: {
                                amount: number;
                                currency: string;
                                currency_options?: {
                                    [key: string]: {
                                        amount: number;
                                        /** @enum {string} */
                                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                    };
                                };
                            };
                            metadata?: {
                                [key: string]: string;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            tax_code?: string;
                            /** @enum {string} */
                            type?: "fixed_amount";
                        };
                    }[];
                    /**
                     * @description Describes the type of transaction being performed by Checkout in order to customize
                     *     relevant text on the page, such as the submit button. `submit_type` can only be
                     *     specified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.
                     * @enum {string}
                     */
                    submit_type?: "auto" | "book" | "donate" | "pay" | "subscribe";
                    /**
                     * subscription_data_params
                     * @description A subset of parameters to be passed to subscription creation for Checkout Sessions in `subscription` mode.
                     */
                    subscription_data?: {
                        application_fee_percent?: number;
                        /** Format: unix-time */
                        billing_cycle_anchor?: number;
                        default_tax_rates?: string[];
                        description?: string;
                        /** invoice_settings_params */
                        invoice_settings?: {
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                        /** @enum {string} */
                        proration_behavior?: "create_prorations" | "none";
                        /** transfer_data_specs */
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        };
                        /** Format: unix-time */
                        trial_end?: number;
                        trial_period_days?: number;
                        /** trial_settings_config */
                        trial_settings?: {
                            /** end_behavior */
                            end_behavior: {
                                /** @enum {string} */
                                missing_payment_method: "cancel" | "create_invoice" | "pause";
                            };
                        };
                    };
                    /** @description The URL to which Stripe should send customers when payment or setup
                     *     is complete.
                     *     This parameter is not allowed if ui_mode is `embedded`. If you’d like to use
                     *     information from the successful Checkout Session on your page, read the
                     *     guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page). */
                    success_url?: string;
                    /**
                     * tax_id_collection_params
                     * @description Controls tax ID collection during checkout.
                     */
                    tax_id_collection?: {
                        enabled: boolean;
                        /** @enum {string} */
                        required?: "if_supported" | "never";
                    };
                    /**
                     * @description The UI mode of the Session. Defaults to `hosted`.
                     * @enum {string}
                     */
                    ui_mode?: "embedded" | "hosted";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["checkout.session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCheckoutSessionsSession: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                session: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["checkout.session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCheckoutSessionsSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["checkout.session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCheckoutSessionsSessionExpire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["checkout.session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCheckoutSessionsSessionLineItems: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                session: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetClimateOrders: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["climate.order"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostClimateOrders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Requested amount of carbon removal units. Either this or `metric_tons` must be specified. */
                    amount?: number;
                    /**
                     * beneficiary_params
                     * @description Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set.
                     */
                    beneficiary?: {
                        public_name: string;
                    };
                    /** @description Request currency for the order as a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a supported [settlement currency for your account](https://stripe.com/docs/currencies). If omitted, the account's default currency will be used. */
                    currency?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * Format: decimal
                     * @description Requested number of tons for the order. Either this or `amount` must be specified.
                     */
                    metric_tons?: string;
                    /** @description Unique identifier of the Climate product. */
                    product: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["climate.order"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetClimateOrdersOrder: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                /** @description Unique identifier of the order. */
                order: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["climate.order"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostClimateOrdersOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the order. */
                order: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set. */
                    beneficiary?: {
                        public_name: string | "";
                    } | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["climate.order"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostClimateOrdersOrderCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the order. */
                order: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["climate.order"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetClimateProducts: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["climate.product"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetClimateProductsProduct: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                product: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["climate.product"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetClimateSuppliers: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["climate.supplier"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetClimateSuppliersSupplier: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                supplier: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["climate.supplier"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetConfirmationTokensConfirmationToken: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                confirmation_token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["confirmation_token"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCountrySpecs: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["country_spec"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCountrySpecsCountry: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                country: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["country_spec"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCoupons: {
        parameters: {
            query?: {
                /** @description A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["coupon"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCoupons: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed). */
                    amount_off?: number;
                    /**
                     * applies_to_params
                     * @description A hash containing directions for what this Coupon will apply discounts to.
                     */
                    applies_to?: {
                        products?: string[];
                    };
                    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed). */
                    currency?: string;
                    /** @description Coupons defined in each available currency option (only supported if `amount_off` is passed). Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
                    currency_options?: {
                        [key: string]: {
                            amount_off: number;
                        };
                    };
                    /**
                     * @description Specifies how long the discount will be in effect if used on a subscription. Defaults to `once`.
                     * @enum {string}
                     */
                    duration?: "forever" | "once" | "repeating";
                    /** @description Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect. */
                    duration_in_months?: number;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you. */
                    id?: string;
                    /** @description A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use. */
                    max_redemptions?: number;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set. */
                    name?: string;
                    /** @description A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed). */
                    percent_off?: number;
                    /**
                     * Format: unix-time
                     * @description Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.
                     */
                    redeem_by?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["coupon"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCouponsCoupon: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                coupon: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["coupon"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCouponsCoupon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                coupon: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Coupons defined in each available currency option (only supported if the coupon is amount-based). Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
                    currency_options?: {
                        [key: string]: {
                            amount_off: number;
                        };
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set. */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["coupon"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCouponsCoupon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                coupon: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_coupon"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCreditNotes: {
        parameters: {
            query?: {
                /** @description Only return credit notes that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return credit notes for the customer specified by this customer ID. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Only return credit notes for the invoice specified by this invoice ID. */
                invoice?: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["credit_note"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCreditNotes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The integer amount in cents (or local equivalent) representing the total amount of the credit note. */
                    amount?: number;
                    /** @description The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
                    credit_amount?: number;
                    /**
                     * Format: unix-time
                     * @description The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF.
                     */
                    effective_at?: number;
                    /**
                     * @description Type of email to send to the customer, one of `credit_note` or `none` and the default is `credit_note`.
                     * @enum {string}
                     */
                    email_type?: "credit_note" | "none";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description ID of the invoice. */
                    invoice: string;
                    /** @description Line items that make up the credit note. */
                    lines?: {
                        amount?: number;
                        description?: string;
                        invoice_line_item?: string;
                        quantity?: number;
                        tax_amounts?: {
                            amount: number;
                            tax_rate: string;
                            taxable_amount: number;
                        }[] | "";
                        tax_rates?: string[] | "";
                        /** @enum {string} */
                        type: "custom_line_item" | "invoice_line_item";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    }[];
                    /** @description The credit note's memo appears on the credit note PDF. */
                    memo?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe. */
                    out_of_band_amount?: number;
                    /**
                     * @description Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
                     * @enum {string}
                     */
                    reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
                    /** @description ID of an existing refund to link this credit note to. */
                    refund?: string;
                    /** @description The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
                    refund_amount?: number;
                    /**
                     * credit_note_shipping_cost
                     * @description When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note.
                     */
                    shipping_cost?: {
                        shipping_rate?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["credit_note"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCreditNotesPreview: {
        parameters: {
            query: {
                /** @description The integer amount in cents (or local equivalent) representing the total amount of the credit note. */
                amount?: number;
                /** @description The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
                credit_amount?: number;
                /** @description The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF. */
                effective_at?: number;
                /** @description Type of email to send to the customer, one of `credit_note` or `none` and the default is `credit_note`. */
                email_type?: "credit_note" | "none";
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description ID of the invoice. */
                invoice: string;
                /** @description Line items that make up the credit note. */
                lines?: {
                    amount?: number;
                    description?: string;
                    invoice_line_item?: string;
                    quantity?: number;
                    tax_amounts?: {
                        amount: number;
                        tax_rate: string;
                        taxable_amount: number;
                    }[] | "";
                    tax_rates?: string[] | "";
                    /** @enum {string} */
                    type: "custom_line_item" | "invoice_line_item";
                    unit_amount?: number;
                    /** Format: decimal */
                    unit_amount_decimal?: string;
                }[];
                /** @description The credit note's memo appears on the credit note PDF. */
                memo?: string;
                /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                metadata?: {
                    [key: string]: string;
                };
                /** @description The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe. */
                out_of_band_amount?: number;
                /** @description Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
                reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
                /** @description ID of an existing refund to link this credit note to. */
                refund?: string;
                /** @description The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
                refund_amount?: number;
                /** @description When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note. */
                shipping_cost?: {
                    shipping_rate?: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["credit_note"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCreditNotesPreviewLines: {
        parameters: {
            query: {
                /** @description The integer amount in cents (or local equivalent) representing the total amount of the credit note. */
                amount?: number;
                /** @description The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
                credit_amount?: number;
                /** @description The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF. */
                effective_at?: number;
                /** @description Type of email to send to the customer, one of `credit_note` or `none` and the default is `credit_note`. */
                email_type?: "credit_note" | "none";
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description ID of the invoice. */
                invoice: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Line items that make up the credit note. */
                lines?: {
                    amount?: number;
                    description?: string;
                    invoice_line_item?: string;
                    quantity?: number;
                    tax_amounts?: {
                        amount: number;
                        tax_rate: string;
                        taxable_amount: number;
                    }[] | "";
                    tax_rates?: string[] | "";
                    /** @enum {string} */
                    type: "custom_line_item" | "invoice_line_item";
                    unit_amount?: number;
                    /** Format: decimal */
                    unit_amount_decimal?: string;
                }[];
                /** @description The credit note's memo appears on the credit note PDF. */
                memo?: string;
                /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                metadata?: {
                    [key: string]: string;
                };
                /** @description The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe. */
                out_of_band_amount?: number;
                /** @description Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
                reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
                /** @description ID of an existing refund to link this credit note to. */
                refund?: string;
                /** @description The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
                refund_amount?: number;
                /** @description When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note. */
                shipping_cost?: {
                    shipping_rate?: string;
                };
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["credit_note_line_item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCreditNotesCreditNoteLines: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                credit_note: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["credit_note_line_item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCreditNotesId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["credit_note"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCreditNotesId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Credit note memo. */
                    memo?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["credit_note"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCreditNotesIdVoid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["credit_note"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomerSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * components
                     * @description Configuration for each component. Exactly 1 component must be enabled.
                     */
                    components: {
                        /** buy_button_param */
                        buy_button?: {
                            enabled: boolean;
                        };
                        /** payment_element_param */
                        payment_element?: {
                            enabled: boolean;
                            /** features_param */
                            features?: {
                                payment_method_allow_redisplay_filters?: ("always" | "limited" | "unspecified")[];
                                /** @enum {string} */
                                payment_method_redisplay?: "disabled" | "enabled";
                                payment_method_redisplay_limit?: number;
                                /** @enum {string} */
                                payment_method_remove?: "disabled" | "enabled";
                                /** @enum {string} */
                                payment_method_save?: "disabled" | "enabled";
                                /** @enum {string} */
                                payment_method_save_usage?: "off_session" | "on_session";
                            };
                        };
                        /** pricing_table_param */
                        pricing_table?: {
                            enabled: boolean;
                        };
                    };
                    /** @description The ID of an existing customer for which to create the Customer Session. */
                    customer: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["customer_session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomers: {
        parameters: {
            query?: {
                /** @description Only return customers that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A case-sensitive filter on the list based on the customer's `email` field. The value must be a string. */
                email?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Provides a list of customers that are associated with the specified test clock. The response will not include customers with test clocks if this parameter is not set. */
                test_clock?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["customer"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The customer's address. */
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    } | "";
                    /** @description An integer amount in cents (or local equivalent) that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
                    balance?: number;
                    /**
                     * cash_balance_param
                     * @description Balance information and default balance settings for this customer.
                     */
                    cash_balance?: {
                        /** balance_settings_param */
                        settings?: {
                            /** @enum {string} */
                            reconciliation_mode?: "automatic" | "manual" | "merchant_default";
                        };
                    };
                    coupon?: string;
                    /** @description An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
                    description?: string;
                    /** @description Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
                    email?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers. */
                    invoice_prefix?: string;
                    /**
                     * customer_param
                     * @description Default invoice settings for this customer.
                     */
                    invoice_settings?: {
                        custom_fields?: {
                            name: string;
                            value: string;
                        }[] | "";
                        default_payment_method?: string;
                        footer?: string;
                        rendering_options?: {
                            /** @enum {string} */
                            amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                            template?: string;
                        } | "";
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The customer's full name or business name. */
                    name?: string;
                    /** @description The sequence to be used on the customer's next invoice. Defaults to 1. */
                    next_invoice_sequence?: number;
                    payment_method?: string;
                    /** @description The customer's phone number. */
                    phone?: string;
                    /** @description Customer's preferred languages, ordered by preference. */
                    preferred_locales?: string[];
                    /** @description The ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount. */
                    promotion_code?: string;
                    /** @description The customer's shipping information. Appears on invoices emailed to this customer. */
                    shipping?: {
                        /** optional_fields_customer_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string;
                    } | "";
                    source?: string;
                    /**
                     * shared_tax_create_param
                     * @description Tax details about the customer.
                     */
                    tax?: {
                        ip_address?: string | "";
                        /** @enum {string} */
                        validate_location?: "deferred" | "immediately";
                    };
                    /**
                     * @description The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
                     * @enum {string}
                     */
                    tax_exempt?: "" | "exempt" | "none" | "reverse";
                    /** @description The customer's tax IDs. */
                    tax_id_data?: {
                        /** @enum {string} */
                        type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
                        value: string;
                    }[];
                    /** @description ID of the test clock to attach to the customer. */
                    test_clock?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["customer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersSearch: {
        parameters: {
            query: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
                page?: string;
                /** @description The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers). */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["customer"][];
                        has_more: boolean;
                        next_page?: string | null;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value.
                         * @enum {string}
                         */
                        object: "search_result";
                        /** @description The total number of objects that match the query, only accurate up to 10,000. */
                        total_count?: number;
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomer: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The customer's address. */
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    } | "";
                    /** @description An integer amount in cents (or local equivalent) that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
                    balance?: number;
                    /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
                    bank_account?: {
                        account_holder_name?: string;
                        /** @enum {string} */
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        country: string;
                        currency?: string;
                        /** @enum {string} */
                        object?: "bank_account";
                        routing_number?: string;
                    } | string;
                    /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        number: string;
                        /** @enum {string} */
                        object?: "card";
                    } | string;
                    /**
                     * cash_balance_param
                     * @description Balance information and default balance settings for this customer.
                     */
                    cash_balance?: {
                        /** balance_settings_param */
                        settings?: {
                            /** @enum {string} */
                            reconciliation_mode?: "automatic" | "manual" | "merchant_default";
                        };
                    };
                    coupon?: string;
                    /** @description ID of Alipay account to make the customer's new default for invoice payments. */
                    default_alipay_account?: string;
                    /** @description ID of bank account to make the customer's new default for invoice payments. */
                    default_bank_account?: string;
                    /** @description ID of card to make the customer's new default for invoice payments. */
                    default_card?: string;
                    /** @description If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.
                     *
                     *     Provide the ID of a payment source already attached to this customer to make it this customer's default payment source.
                     *
                     *     If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property. */
                    default_source?: string;
                    /** @description An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
                    description?: string;
                    /** @description Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
                    email?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers. */
                    invoice_prefix?: string;
                    /**
                     * customer_param
                     * @description Default invoice settings for this customer.
                     */
                    invoice_settings?: {
                        custom_fields?: {
                            name: string;
                            value: string;
                        }[] | "";
                        default_payment_method?: string;
                        footer?: string;
                        rendering_options?: {
                            /** @enum {string} */
                            amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                            template?: string;
                        } | "";
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The customer's full name or business name. */
                    name?: string;
                    /** @description The sequence to be used on the customer's next invoice. Defaults to 1. */
                    next_invoice_sequence?: number;
                    /** @description The customer's phone number. */
                    phone?: string;
                    /** @description Customer's preferred languages, ordered by preference. */
                    preferred_locales?: string[];
                    /** @description The ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount. */
                    promotion_code?: string;
                    /** @description The customer's shipping information. Appears on invoices emailed to this customer. */
                    shipping?: {
                        /** optional_fields_customer_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string;
                    } | "";
                    source?: string;
                    /**
                     * shared_tax_update_param
                     * @description Tax details about the customer.
                     */
                    tax?: {
                        ip_address?: string | "";
                        /** @enum {string} */
                        validate_location?: "auto" | "deferred" | "immediately";
                    };
                    /**
                     * @description The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
                     * @enum {string}
                     */
                    tax_exempt?: "" | "exempt" | "none" | "reverse";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["customer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_customer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerBalanceTransactions: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["customer_balance_transaction"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerBalanceTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The integer amount in **cents (or local equivalent)** to apply to the customer's credit balance. */
                    amount: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). Specifies the [`invoice_credit_balance`](https://stripe.com/docs/api/customers/object#customer_object-invoice_credit_balance) that this transaction will apply to. If the customer's `currency` is not set, it will be updated to this value. */
                    currency: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["customer_balance_transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerBalanceTransactionsTransaction: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
                transaction: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["customer_balance_transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerBalanceTransactionsTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                transaction: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["customer_balance_transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerBankAccounts: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["bank_account"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerBankAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details. */
                    alipay_account?: string;
                    /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
                    bank_account?: {
                        account_holder_name?: string;
                        /** @enum {string} */
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        country: string;
                        currency?: string;
                        /** @enum {string} */
                        object?: "bank_account";
                        routing_number?: string;
                    } | string;
                    /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        number: string;
                        /** @enum {string} */
                        object?: "card";
                    } | string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
                    source?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerBankAccountsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["bank_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerBankAccountsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The name of the person or business that owns the bank account. */
                    account_holder_name?: string;
                    /**
                     * @description The type of entity that holds the account. This can be either `individual` or `company`.
                     * @enum {string}
                     */
                    account_holder_type?: "company" | "individual";
                    /** @description City/District/Suburb/Town/Village. */
                    address_city?: string;
                    /** @description Billing address country, if provided when creating card. */
                    address_country?: string;
                    /** @description Address line 1 (Street address/PO Box/Company name). */
                    address_line1?: string;
                    /** @description Address line 2 (Apartment/Suite/Unit/Building). */
                    address_line2?: string;
                    /** @description State/County/Province/Region. */
                    address_state?: string;
                    /** @description ZIP or postal code. */
                    address_zip?: string;
                    /** @description Two digit number representing the card’s expiration month. */
                    exp_month?: string;
                    /** @description Four digit number representing the card’s expiration year. */
                    exp_year?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Cardholder name. */
                    name?: string;
                    /** owner */
                    owner?: {
                        /** source_address */
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        email?: string;
                        name?: string;
                        phone?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["card"] | components["schemas"]["bank_account"] | components["schemas"]["source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerBankAccountsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_source"] | components["schemas"]["deleted_payment_source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerBankAccountsIdVerify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
                    amounts?: number[];
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["bank_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerCards: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["card"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerCards: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details. */
                    alipay_account?: string;
                    /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
                    bank_account?: {
                        account_holder_name?: string;
                        /** @enum {string} */
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        country: string;
                        currency?: string;
                        /** @enum {string} */
                        object?: "bank_account";
                        routing_number?: string;
                    } | string;
                    /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        number: string;
                        /** @enum {string} */
                        object?: "card";
                    } | string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
                    source?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerCardsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["card"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerCardsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The name of the person or business that owns the bank account. */
                    account_holder_name?: string;
                    /**
                     * @description The type of entity that holds the account. This can be either `individual` or `company`.
                     * @enum {string}
                     */
                    account_holder_type?: "company" | "individual";
                    /** @description City/District/Suburb/Town/Village. */
                    address_city?: string;
                    /** @description Billing address country, if provided when creating card. */
                    address_country?: string;
                    /** @description Address line 1 (Street address/PO Box/Company name). */
                    address_line1?: string;
                    /** @description Address line 2 (Apartment/Suite/Unit/Building). */
                    address_line2?: string;
                    /** @description State/County/Province/Region. */
                    address_state?: string;
                    /** @description ZIP or postal code. */
                    address_zip?: string;
                    /** @description Two digit number representing the card’s expiration month. */
                    exp_month?: string;
                    /** @description Four digit number representing the card’s expiration year. */
                    exp_year?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Cardholder name. */
                    name?: string;
                    /** owner */
                    owner?: {
                        /** source_address */
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        email?: string;
                        name?: string;
                        phone?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["card"] | components["schemas"]["bank_account"] | components["schemas"]["source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerCardsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_source"] | components["schemas"]["deleted_payment_source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerCashBalance: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["cash_balance"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerCashBalance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * balance_settings_param
                     * @description A hash of settings for this cash balance.
                     */
                    settings?: {
                        /** @enum {string} */
                        reconciliation_mode?: "automatic" | "manual" | "merchant_default";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["cash_balance"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerCashBalanceTransactions: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["customer_cash_balance_transaction"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerCashBalanceTransactionsTransaction: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
                transaction: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["customer_cash_balance_transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerDiscount: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["discount"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerDiscount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_discount"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerFundingInstructions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * bank_transfer_params
                     * @description Additional parameters for `bank_transfer` funding types
                     */
                    bank_transfer: {
                        /** eu_bank_account_params */
                        eu_bank_transfer?: {
                            country: string;
                        };
                        requested_address_types?: ("iban" | "sort_code" | "spei" | "zengin")[];
                        /** @enum {string} */
                        type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
                    };
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * @description The `funding_type` to get the instructions for.
                     * @enum {string}
                     */
                    funding_type: "bank_transfer";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["funding_instructions"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerPaymentMethods: {
        parameters: {
            query?: {
                /** @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`. */
                allow_redisplay?: "always" | "limited" | "unspecified";
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request. */
                type?: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_method"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerPaymentMethodsPaymentMethod: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
                payment_method: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerSources: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Filter sources according to a particular object type. */
                object?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: (components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"])[];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerSources: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details. */
                    alipay_account?: string;
                    /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
                    bank_account?: {
                        account_holder_name?: string;
                        /** @enum {string} */
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        country: string;
                        currency?: string;
                        /** @enum {string} */
                        object?: "bank_account";
                        routing_number?: string;
                    } | string;
                    /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        number: string;
                        /** @enum {string} */
                        object?: "card";
                    } | string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
                    source?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerSourcesId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerSourcesId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The name of the person or business that owns the bank account. */
                    account_holder_name?: string;
                    /**
                     * @description The type of entity that holds the account. This can be either `individual` or `company`.
                     * @enum {string}
                     */
                    account_holder_type?: "company" | "individual";
                    /** @description City/District/Suburb/Town/Village. */
                    address_city?: string;
                    /** @description Billing address country, if provided when creating card. */
                    address_country?: string;
                    /** @description Address line 1 (Street address/PO Box/Company name). */
                    address_line1?: string;
                    /** @description Address line 2 (Apartment/Suite/Unit/Building). */
                    address_line2?: string;
                    /** @description State/County/Province/Region. */
                    address_state?: string;
                    /** @description ZIP or postal code. */
                    address_zip?: string;
                    /** @description Two digit number representing the card’s expiration month. */
                    exp_month?: string;
                    /** @description Four digit number representing the card’s expiration year. */
                    exp_year?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Cardholder name. */
                    name?: string;
                    /** owner */
                    owner?: {
                        /** source_address */
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        email?: string;
                        name?: string;
                        phone?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["card"] | components["schemas"]["bank_account"] | components["schemas"]["source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerSourcesId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_source"] | components["schemas"]["deleted_payment_source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerSourcesIdVerify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
                    amounts?: number[];
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["bank_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerSubscriptions: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["subscription"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerSubscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items. */
                    add_invoice_items?: {
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[];
                        price?: string;
                        /** one_time_price_data_with_negative_amounts */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
                    application_fee_percent?: number | "";
                    /**
                     * automatic_tax_config
                     * @description Automatic tax settings for this subscription. We recommend you only include this parameter when the existing value is being changed.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * Format: unix-time
                     * @description For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.
                     */
                    backdate_start_date?: number;
                    /**
                     * Format: unix-time
                     * @description A future timestamp in UTC format to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). The anchor is the reference point that aligns future billing cycle dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals.
                     */
                    billing_cycle_anchor?: number;
                    /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
                    billing_thresholds?: {
                        amount_gte?: number;
                        reset_billing_cycle_anchor?: boolean;
                    } | "";
                    /**
                     * Format: unix-time
                     * @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period.
                     */
                    cancel_at?: number;
                    /** @description Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. */
                    cancel_at_period_end?: boolean;
                    /**
                     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
                     * @enum {string}
                     */
                    collection_method?: "charge_automatically" | "send_invoice";
                    /** @description The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                    coupon?: string;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
                    days_until_due?: number;
                    /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
                    default_payment_method?: string;
                    /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
                    default_source?: string;
                    /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
                    default_tax_rates?: string[] | "";
                    /** @description The coupons to redeem into discounts for the subscription. If not specified or empty, inherits the discount from the subscription's customer. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * invoice_settings_param
                     * @description All invoices will be billed using the specified settings.
                     */
                    invoice_settings?: {
                        account_tax_ids?: string[] | "";
                        /** param */
                        issuer?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /** @description A list of up to 20 subscription items, each with an attached price. */
                    items?: {
                        billing_thresholds?: {
                            usage_gte: number;
                        } | "";
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        metadata?: {
                            [key: string]: string;
                        };
                        price?: string;
                        /** recurring_price_data */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** recurring_adhoc */
                            recurring: {
                                /** @enum {string} */
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session). */
                    off_session?: boolean;
                    /**
                     * @description Only applies to subscriptions with `collection_method=charge_automatically`.
                     *
                     *     Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can't be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
                     *
                     *     Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.
                     *
                     *     Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice can't be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn't create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
                     *
                     *     `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.
                     *
                     *     Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.
                     * @enum {string}
                     */
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    /**
                     * payment_settings
                     * @description Payment settings to pass to invoices created by the subscription.
                     */
                    payment_settings?: {
                        /** payment_method_options */
                        payment_method_options?: {
                            acss_debit?: {
                                /** mandate_options_param */
                                mandate_options?: {
                                    /** @enum {string} */
                                    transaction_type?: "business" | "personal";
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                            bancontact?: {
                                /** @enum {string} */
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            } | "";
                            card?: {
                                /** mandate_options_param */
                                mandate_options?: {
                                    amount?: number;
                                    /** @enum {string} */
                                    amount_type?: "fixed" | "maximum";
                                    description?: string;
                                };
                                /** @enum {string} */
                                network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa";
                                /** @enum {string} */
                                request_three_d_secure?: "any" | "automatic" | "challenge";
                            } | "";
                            customer_balance?: {
                                /** bank_transfer_param */
                                bank_transfer?: {
                                    /** eu_bank_transfer_param */
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            sepa_debit?: Record<string, never> | "";
                            us_bank_account?: {
                                /** invoice_linked_account_options_param */
                                financial_connections?: {
                                    /** invoice_linked_account_options_filters_param */
                                    filters?: {
                                        account_subcategories?: ("checking" | "savings")[];
                                    };
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                    prefetch?: ("balances" | "ownership" | "transactions")[];
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                        };
                        payment_method_types?: ("ach_credit_transfer" | "ach_debit" | "acss_debit" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "jp_credit_transfer" | "kakao_pay" | "konbini" | "kr_card" | "link" | "multibanco" | "naver_pay" | "p24" | "payco" | "paynow" | "paypal" | "promptpay" | "revolut_pay" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "swish" | "us_bank_account" | "wechat_pay")[] | "";
                        /** @enum {string} */
                        save_default_payment_method?: "off" | "on_subscription";
                    };
                    /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
                    pending_invoice_item_interval?: {
                        /** @enum {string} */
                        interval: "day" | "month" | "week" | "year";
                        interval_count?: number;
                    } | "";
                    /** @description The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                    promotion_code?: string;
                    /**
                     * @description Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) resulting from the `billing_cycle_anchor`. If no value is passed, the default is `create_prorations`.
                     * @enum {string}
                     */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    /**
                     * transfer_data_specs
                     * @description If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges.
                     */
                    transfer_data?: {
                        amount_percent?: number;
                        destination: string;
                    };
                    /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
                    trial_end?: "now" | number;
                    /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
                    trial_from_plan?: boolean;
                    /** @description Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
                    trial_period_days?: number;
                    /**
                     * trial_settings_config
                     * @description Settings related to subscription trials.
                     */
                    trial_settings?: {
                        /** end_behavior */
                        end_behavior: {
                            /** @enum {string} */
                            missing_payment_method: "cancel" | "create_invoice" | "pause";
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerSubscriptionsSubscriptionExposedId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
                subscription_exposed_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerSubscriptionsSubscriptionExposedId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                subscription_exposed_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items. */
                    add_invoice_items?: {
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[];
                        price?: string;
                        /** one_time_price_data_with_negative_amounts */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
                    application_fee_percent?: number | "";
                    /**
                     * automatic_tax_config
                     * @description Automatic tax settings for this subscription. We recommend you only include this parameter when the existing value is being changed.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * @description Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
                     * @enum {string}
                     */
                    billing_cycle_anchor?: "now" | "unchanged";
                    /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
                    billing_thresholds?: {
                        amount_gte?: number;
                        reset_billing_cycle_anchor?: boolean;
                    } | "";
                    /** @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
                    cancel_at?: number | "";
                    /** @description Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. */
                    cancel_at_period_end?: boolean;
                    /**
                     * cancellation_details_param
                     * @description Details about why this subscription was cancelled
                     */
                    cancellation_details?: {
                        comment?: string | "";
                        /** @enum {string} */
                        feedback?: "" | "customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused";
                    };
                    /**
                     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
                     * @enum {string}
                     */
                    collection_method?: "charge_automatically" | "send_invoice";
                    /** @description The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                    coupon?: string;
                    /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
                    days_until_due?: number;
                    /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
                    default_payment_method?: string;
                    /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
                    default_source?: string | "";
                    /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
                    default_tax_rates?: string[] | "";
                    /** @description The coupons to redeem into discounts for the subscription. If not specified or empty, inherits the discount from the subscription's customer. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * invoice_settings_param
                     * @description All invoices will be billed using the specified settings.
                     */
                    invoice_settings?: {
                        account_tax_ids?: string[] | "";
                        /** param */
                        issuer?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /** @description A list of up to 20 subscription items, each with an attached price. */
                    items?: {
                        billing_thresholds?: {
                            usage_gte: number;
                        } | "";
                        clear_usage?: boolean;
                        deleted?: boolean;
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        id?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        price?: string;
                        /** recurring_price_data */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** recurring_adhoc */
                            recurring: {
                                /** @enum {string} */
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session). */
                    off_session?: boolean;
                    /** @description If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment). */
                    pause_collection?: {
                        /** @enum {string} */
                        behavior: "keep_as_draft" | "mark_uncollectible" | "void";
                        /** Format: unix-time */
                        resumes_at?: number;
                    } | "";
                    /**
                     * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
                     *
                     *     Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
                     *
                     *     Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
                     *
                     *     Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
                     * @enum {string}
                     */
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    /**
                     * payment_settings
                     * @description Payment settings to pass to invoices created by the subscription.
                     */
                    payment_settings?: {
                        /** payment_method_options */
                        payment_method_options?: {
                            acss_debit?: {
                                /** mandate_options_param */
                                mandate_options?: {
                                    /** @enum {string} */
                                    transaction_type?: "business" | "personal";
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                            bancontact?: {
                                /** @enum {string} */
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            } | "";
                            card?: {
                                /** mandate_options_param */
                                mandate_options?: {
                                    amount?: number;
                                    /** @enum {string} */
                                    amount_type?: "fixed" | "maximum";
                                    description?: string;
                                };
                                /** @enum {string} */
                                network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa";
                                /** @enum {string} */
                                request_three_d_secure?: "any" | "automatic" | "challenge";
                            } | "";
                            customer_balance?: {
                                /** bank_transfer_param */
                                bank_transfer?: {
                                    /** eu_bank_transfer_param */
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            sepa_debit?: Record<string, never> | "";
                            us_bank_account?: {
                                /** invoice_linked_account_options_param */
                                financial_connections?: {
                                    /** invoice_linked_account_options_filters_param */
                                    filters?: {
                                        account_subcategories?: ("checking" | "savings")[];
                                    };
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                    prefetch?: ("balances" | "ownership" | "transactions")[];
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                        };
                        payment_method_types?: ("ach_credit_transfer" | "ach_debit" | "acss_debit" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "jp_credit_transfer" | "kakao_pay" | "konbini" | "kr_card" | "link" | "multibanco" | "naver_pay" | "p24" | "payco" | "paynow" | "paypal" | "promptpay" | "revolut_pay" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "swish" | "us_bank_account" | "wechat_pay")[] | "";
                        /** @enum {string} */
                        save_default_payment_method?: "off" | "on_subscription";
                    };
                    /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
                    pending_invoice_item_interval?: {
                        /** @enum {string} */
                        interval: "day" | "month" | "week" | "year";
                        interval_count?: number;
                    } | "";
                    /** @description The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                    promotion_code?: string;
                    /**
                     * @description Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
                     * @enum {string}
                     */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    /**
                     * Format: unix-time
                     * @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#upcoming_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
                     */
                    proration_date?: number;
                    /** @description If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value. */
                    transfer_data?: {
                        amount_percent?: number;
                        destination: string;
                    } | "";
                    /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
                    trial_end?: "now" | number;
                    /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
                    trial_from_plan?: boolean;
                    /**
                     * trial_settings_config
                     * @description Settings related to subscription trials.
                     */
                    trial_settings?: {
                        /** end_behavior */
                        end_behavior: {
                            /** @enum {string} */
                            missing_payment_method: "cancel" | "create_invoice" | "pause";
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerSubscriptionsSubscriptionExposedId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                subscription_exposed_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Can be set to `true` if `at_period_end` is not set to `true`. Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. */
                    invoice_now?: boolean;
                    /** @description Can be set to `true` if `at_period_end` is not set to `true`. Will generate a proration invoice item that credits remaining unused time until the subscription period end. */
                    prorate?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
                subscription_exposed_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["discount"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                subscription_exposed_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_discount"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerTaxIds: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["tax_id"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerTaxIds: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * @description Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `by_tin`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `li_vat`, `ma_vat`, `md_vat`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `tz_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `uz_tin`, `uz_vat`, `ve_rif`, `vn_tin`, or `za_vat`
                     * @enum {string}
                     */
                    type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
                    /** @description Value of the tax ID. */
                    value: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax_id"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerTaxIdsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax_id"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerTaxIdsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_tax_id"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetDisputes: {
        parameters: {
            query?: {
                /** @description Only return disputes associated to the charge specified by this charge ID. */
                charge?: string;
                /** @description Only return disputes that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID. */
                payment_intent?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["dispute"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetDisputesDispute: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                dispute: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostDisputesDispute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dispute: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * dispute_evidence_params
                     * @description Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.
                     */
                    evidence?: {
                        access_activity_log?: string;
                        billing_address?: string;
                        cancellation_policy?: string;
                        cancellation_policy_disclosure?: string;
                        cancellation_rebuttal?: string;
                        customer_communication?: string;
                        customer_email_address?: string;
                        customer_name?: string;
                        customer_purchase_ip?: string;
                        customer_signature?: string;
                        duplicate_charge_documentation?: string;
                        duplicate_charge_explanation?: string;
                        duplicate_charge_id?: string;
                        enhanced_evidence?: {
                            /** visa_compelling_evidence3 */
                            visa_compelling_evidence_3?: {
                                /** visa_compelling_evidence3_disputed_transaction */
                                disputed_transaction?: {
                                    customer_account_id?: string | "";
                                    customer_device_fingerprint?: string | "";
                                    customer_device_id?: string | "";
                                    customer_email_address?: string | "";
                                    customer_purchase_ip?: string | "";
                                    /** @enum {string} */
                                    merchandise_or_services?: "merchandise" | "services";
                                    product_description?: string | "";
                                    /** shipping_address */
                                    shipping_address?: {
                                        city?: string | "";
                                        country?: string | "";
                                        line1?: string | "";
                                        line2?: string | "";
                                        postal_code?: string | "";
                                        state?: string | "";
                                    };
                                };
                                prior_undisputed_transactions?: {
                                    charge: string;
                                    customer_account_id?: string | "";
                                    customer_device_fingerprint?: string | "";
                                    customer_device_id?: string | "";
                                    customer_email_address?: string | "";
                                    customer_purchase_ip?: string | "";
                                    product_description?: string | "";
                                    /** shipping_address */
                                    shipping_address?: {
                                        city?: string | "";
                                        country?: string | "";
                                        line1?: string | "";
                                        line2?: string | "";
                                        postal_code?: string | "";
                                        state?: string | "";
                                    };
                                }[];
                            };
                        } | "";
                        product_description?: string;
                        receipt?: string;
                        refund_policy?: string;
                        refund_policy_disclosure?: string;
                        refund_refusal_explanation?: string;
                        service_date?: string;
                        service_documentation?: string;
                        shipping_address?: string;
                        shipping_carrier?: string;
                        shipping_date?: string;
                        shipping_documentation?: string;
                        shipping_tracking_number?: string;
                        uncategorized_file?: string;
                        uncategorized_text?: string;
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default). */
                    submit?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostDisputesDisputeClose: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dispute: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetEntitlementsActiveEntitlements: {
        parameters: {
            query: {
                /** @description The ID of the customer. */
                customer: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["entitlements.active_entitlement"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetEntitlementsActiveEntitlementsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                /** @description The ID of the entitlement. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["entitlements.active_entitlement"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetEntitlementsFeatures: {
        parameters: {
            query?: {
                /** @description If set, filter results to only include features with the given archive status. */
                archived?: boolean;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description If set, filter results to only include features with the given lookup_key. */
                lookup_key?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["entitlements.feature"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostEntitlementsFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A unique key you provide as your own system identifier. This may be up to 80 characters. */
                    lookup_key: string;
                    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The feature's name, for your own purpose, not meant to be displayable to the customer. */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["entitlements.feature"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetEntitlementsFeaturesId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                /** @description The ID of the feature. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["entitlements.feature"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostEntitlementsFeaturesId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Inactive features cannot be attached to new products and will not be returned from the features list endpoint. */
                    active?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The feature's name, for your own purpose, not meant to be displayable to the customer. */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["entitlements.feature"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostEphemeralKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The ID of the Customer you'd like to modify using the resulting ephemeral key. */
                    customer?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The ID of the Issuing Card you'd like to access using the resulting ephemeral key. */
                    issuing_card?: string;
                    /** @description A single-use token, created by Stripe.js, used for creating ephemeral keys for Issuing Cards without exchanging sensitive information. */
                    nonce?: string;
                    /** @description The ID of the Identity VerificationSession you'd like to access using the resulting ephemeral key */
                    verification_session?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ephemeral_key"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteEphemeralKeysKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ephemeral_key"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetEvents: {
        parameters: {
            query?: {
                /** @description Only return events that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned. */
                delivery_success?: boolean;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property. */
                type?: string;
                /** @description An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both. */
                types?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["event"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetEventsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetExchangeRates: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["exchange_rate"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetExchangeRatesRateId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                rate_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["exchange_rate"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFileLinks: {
        parameters: {
            query?: {
                /** @description Only return links that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Filter links by their expiration status. By default, Stripe returns all links. */
                expired?: boolean;
                /** @description Only return links for the given file. */
                file?: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["file_link"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFileLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description The link isn't usable after this future timestamp.
                     */
                    expires_at?: number;
                    /** @description The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `financial_account_statement`, `identity_document_downloadable`, `issuing_regulatory_reporting`, `pci_document`, `selfie`, `sigma_scheduled_query`, `tax_document_user_upload`, or `terminal_reader_splashscreen`. */
                    file: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file_link"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFileLinksLink: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                link: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file_link"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFileLinksLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                link: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately. */
                    expires_at?: "now" | number | "";
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file_link"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFiles: {
        parameters: {
            query?: {
                /** @description Only return files that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Filter queries by the file purpose. If you don't provide a purpose, the queries return unfiltered files. */
                purpose?: "account_requirement" | "additional_verification" | "business_icon" | "business_logo" | "customer_signature" | "dispute_evidence" | "document_provider_identity_document" | "finance_report_run" | "financial_account_statement" | "identity_document" | "identity_document_downloadable" | "issuing_regulatory_reporting" | "pci_document" | "selfie" | "sigma_scheduled_query" | "tax_document_user_upload" | "terminal_reader_splashscreen";
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["file"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: binary
                     * @description A file to upload. Make sure that the specifications follow RFC 2388, which defines file transfers for the `multipart/form-data` protocol.
                     */
                    file: string;
                    /**
                     * file_link_creation_params
                     * @description Optional parameters that automatically create a [file link](https://stripe.com/docs/api#file_links) for the newly created file.
                     */
                    file_link_data?: {
                        create: boolean;
                        /** Format: unix-time */
                        expires_at?: number;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                    };
                    /**
                     * @description The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
                     * @enum {string}
                     */
                    purpose: "account_requirement" | "additional_verification" | "business_icon" | "business_logo" | "customer_signature" | "dispute_evidence" | "identity_document" | "issuing_regulatory_reporting" | "pci_document" | "tax_document_user_upload" | "terminal_reader_splashscreen";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFilesFile: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                file: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFinancialConnectionsAccounts: {
        parameters: {
            query?: {
                /** @description If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive. */
                account_holder?: {
                    account?: string;
                    customer?: string;
                };
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description If present, only return accounts that were collected as part of the given session. */
                session?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["financial_connections.account"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFinancialConnectionsAccountsAccount: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFinancialConnectionsAccountsAccountDisconnect: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFinancialConnectionsAccountsAccountOwners: {
        parameters: {
            query: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description The ID of the ownership object to fetch owners from. */
                ownership: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["financial_connections.account_owner"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFinancialConnectionsAccountsAccountRefresh: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The list of account features that you would like to refresh. */
                    features: ("balance" | "ownership" | "transactions")[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFinancialConnectionsAccountsAccountSubscribe: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The list of account features to which you would like to subscribe. */
                    features: "transactions"[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFinancialConnectionsAccountsAccountUnsubscribe: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The list of account features from which you would like to unsubscribe. */
                    features: "transactions"[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFinancialConnectionsSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * accountholder_params
                     * @description The account holder to link accounts for.
                     */
                    account_holder: {
                        account?: string;
                        customer?: string;
                        /** @enum {string} */
                        type: "account" | "customer";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * filters_params
                     * @description Filters to restrict the kinds of accounts to collect.
                     */
                    filters?: {
                        account_subcategories?: ("checking" | "credit_card" | "line_of_credit" | "mortgage" | "savings")[];
                        countries?: string[];
                    };
                    /** @description List of data features that you would like to request access to.
                     *
                     *     Possible values are `balances`, `transactions`, `ownership`, and `payment_method`. */
                    permissions: ("balances" | "ownership" | "payment_method" | "transactions")[];
                    /** @description List of data features that you would like to retrieve upon account creation. */
                    prefetch?: ("balances" | "ownership" | "transactions")[];
                    /** @description For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app. */
                    return_url?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFinancialConnectionsSessionsSession: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                session: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFinancialConnectionsTransactions: {
        parameters: {
            query: {
                /** @description The ID of the Stripe account whose transactions will be retrieved. */
                account: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description A filter on the list based on the object `transacted_at` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options: */
                transacted_at?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A filter on the list based on the object `transaction_refresh` field. The value can be a dictionary with the following options: */
                transaction_refresh?: {
                    after: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["financial_connections.transaction"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFinancialConnectionsTransactionsTransaction: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                transaction: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetForwardingRequests: {
        parameters: {
            query?: {
                /** @description Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                };
                /** @description A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["forwarding.request"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostForwardingRequests: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed. */
                    payment_method: string;
                    /** @description The field kinds to be replaced in the forwarded request. */
                    replacements: ("card_cvc" | "card_expiry" | "card_number" | "cardholder_name")[];
                    /**
                     * request_param
                     * @description The request body and headers to be sent to the destination endpoint.
                     */
                    request?: {
                        body?: string;
                        headers?: {
                            name: string;
                            value: string;
                        }[];
                    };
                    /** @description The destination URL for the forwarded request. Must be supported by the config. */
                    url: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["forwarding.request"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetForwardingRequestsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["forwarding.request"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIdentityVerificationReports: {
        parameters: {
            query?: {
                /** @description A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems. */
                client_reference_id?: string;
                /** @description Only return VerificationReports that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return VerificationReports of this type */
                type?: "document" | "id_number";
                /** @description Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID. */
                verification_session?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["identity.verification_report"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIdentityVerificationReportsReport: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                report: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["identity.verification_report"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIdentityVerificationSessions: {
        parameters: {
            query?: {
                /** @description A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems. */
                client_reference_id?: string;
                /** @description Only return VerificationSessions that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                related_customer?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work). */
                status?: "canceled" | "processing" | "requires_input" | "verified";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["identity.verification_session"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIdentityVerificationSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems. */
                    client_reference_id?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * session_options_param
                     * @description A set of options for the session’s verification checks.
                     */
                    options?: {
                        document?: {
                            allowed_types?: ("driving_license" | "id_card" | "passport")[];
                            require_id_number?: boolean;
                            require_live_capture?: boolean;
                            require_matching_selfie?: boolean;
                        } | "";
                    };
                    /**
                     * provided_details_param
                     * @description Details provided about the user being verified. These details may be shown to the user.
                     */
                    provided_details?: {
                        email?: string;
                        phone?: string;
                    };
                    /** @description Token referencing a Customer resource. */
                    related_customer?: string;
                    /** @description The URL that the user will be redirected to upon completing the verification flow. */
                    return_url?: string;
                    /**
                     * @description The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.
                     * @enum {string}
                     */
                    type?: "document" | "id_number";
                    /** @description The ID of a verification flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows. */
                    verification_flow?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["identity.verification_session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIdentityVerificationSessionsSession: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                session: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["identity.verification_session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIdentityVerificationSessionsSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * session_options_param
                     * @description A set of options for the session’s verification checks.
                     */
                    options?: {
                        document?: {
                            allowed_types?: ("driving_license" | "id_card" | "passport")[];
                            require_id_number?: boolean;
                            require_live_capture?: boolean;
                            require_matching_selfie?: boolean;
                        } | "";
                    };
                    /**
                     * provided_details_param
                     * @description Details provided about the user being verified. These details may be shown to the user.
                     */
                    provided_details?: {
                        email?: string;
                        phone?: string;
                    };
                    /**
                     * @description The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
                     * @enum {string}
                     */
                    type?: "document" | "id_number";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["identity.verification_session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIdentityVerificationSessionsSessionCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["identity.verification_session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIdentityVerificationSessionsSessionRedact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["identity.verification_session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoiceRenderingTemplates: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                status?: "active" | "archived";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["invoice_rendering_template"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoiceRenderingTemplatesTemplate: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                version?: number;
            };
            header?: never;
            path: {
                template: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice_rendering_template"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoiceRenderingTemplatesTemplateArchive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice_rendering_template"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoiceRenderingTemplatesTemplateUnarchive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice_rendering_template"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoiceitems: {
        parameters: {
            query?: {
                /** @description Only return invoice items that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed. */
                invoice?: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied. */
                pending?: boolean;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["invoiceitem"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoiceitems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice. */
                    amount?: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description The ID of the customer who will be billed when this invoice item is billed. */
                    customer: string;
                    /** @description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
                    description?: string;
                    /** @description Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. */
                    discountable?: boolean;
                    /** @description The coupons and promotion codes to redeem into discounts for the invoice item or invoice line item. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The ID of an existing invoice to add this invoice item to. When left blank, the invoice item will be added to the next upcoming scheduled invoice. This is useful when adding invoice items in response to an invoice.created webhook. You can only add invoice items to draft invoices and there is a maximum of 250 items per invoice. */
                    invoice?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * period
                     * @description The period associated with this invoice item. When set to different values, the period will be rendered on the invoice. If you have [Stripe Revenue Recognition](https://stripe.com/docs/revenue-recognition) enabled, the period will be used to recognize and defer revenue. See the [Revenue Recognition documentation](https://stripe.com/docs/revenue-recognition/methodology/subscriptions-and-invoicing) for details.
                     */
                    period?: {
                        /** Format: unix-time */
                        end: number;
                        /** Format: unix-time */
                        start: number;
                    };
                    /** @description The ID of the price object. One of `price` or `price_data` is required. */
                    price?: string;
                    /**
                     * one_time_price_data
                     * @description Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
                     */
                    price_data?: {
                        currency: string;
                        product: string;
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    };
                    /** @description Non-negative integer. The quantity of units for the invoice item. */
                    quantity?: number;
                    /** @description The ID of a subscription to add this invoice item to. When left blank, the invoice item is added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription. */
                    subscription?: string;
                    /**
                     * @description Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
                     * @enum {string}
                     */
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    /** @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID. */
                    tax_code?: string | "";
                    /** @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
                    tax_rates?: string[];
                    /** @description The integer unit amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. This `unit_amount` will be multiplied by the quantity to get the full amount. Passing in a negative `unit_amount` will reduce the `amount_due` on the invoice. */
                    unit_amount?: number;
                    /**
                     * Format: decimal
                     * @description Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
                     */
                    unit_amount_decimal?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoiceitem"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoiceitemsInvoiceitem: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                invoiceitem: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoiceitem"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoiceitemsInvoiceitem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoiceitem: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount. */
                    amount?: number;
                    /** @description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
                    description?: string;
                    /** @description Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations. */
                    discountable?: boolean;
                    /** @description The coupons, promotion codes & existing discounts which apply to the invoice item or invoice line item. Item discounts are applied before invoice discounts. Pass an empty string to remove previously-defined discounts. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * period
                     * @description The period associated with this invoice item. When set to different values, the period will be rendered on the invoice. If you have [Stripe Revenue Recognition](https://stripe.com/docs/revenue-recognition) enabled, the period will be used to recognize and defer revenue. See the [Revenue Recognition documentation](https://stripe.com/docs/revenue-recognition/methodology/subscriptions-and-invoicing) for details.
                     */
                    period?: {
                        /** Format: unix-time */
                        end: number;
                        /** Format: unix-time */
                        start: number;
                    };
                    /** @description The ID of the price object. One of `price` or `price_data` is required. */
                    price?: string;
                    /**
                     * one_time_price_data
                     * @description Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
                     */
                    price_data?: {
                        currency: string;
                        product: string;
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    };
                    /** @description Non-negative integer. The quantity of units for the invoice item. */
                    quantity?: number;
                    /**
                     * @description Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
                     * @enum {string}
                     */
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    /** @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID. */
                    tax_code?: string | "";
                    /** @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. Pass an empty string to remove previously-defined tax rates. */
                    tax_rates?: string[] | "";
                    /** @description The integer unit amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer's account, pass a negative unit_amount. */
                    unit_amount?: number;
                    /**
                     * Format: decimal
                     * @description Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
                     */
                    unit_amount_decimal?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoiceitem"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteInvoiceitemsInvoiceitem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoiceitem: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_invoiceitem"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoices: {
        parameters: {
            query?: {
                /** @description The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`. */
                collection_method?: "charge_automatically" | "send_invoice";
                /** @description Only return invoices that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return invoices for the customer specified by this customer ID. */
                customer?: string;
                due_date?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
                status?: "draft" | "open" | "paid" | "uncollectible" | "void";
                /** @description Only return invoices for the subscription specified by this subscription ID. */
                subscription?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["invoice"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
                    account_tax_ids?: string[] | "";
                    /** @description A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees). */
                    application_fee_amount?: number;
                    /** @description Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action. */
                    auto_advance?: boolean;
                    /**
                     * automatic_tax_param
                     * @description Settings for automatic tax lookup for this invoice.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * Format: unix-time
                     * @description The time when this invoice should be scheduled to finalize. The invoice will be finalized at this time if it is still in draft state.
                     */
                    automatically_finalizes_at?: number;
                    /**
                     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.
                     * @enum {string}
                     */
                    collection_method?: "charge_automatically" | "send_invoice";
                    /** @description The currency to create this invoice in. Defaults to that of `customer` if not specified. */
                    currency?: string;
                    /** @description A list of up to 4 custom fields to be displayed on the invoice. */
                    custom_fields?: {
                        name: string;
                        value: string;
                    }[] | "";
                    /** @description The ID of the customer who will be billed. */
                    customer?: string;
                    /** @description The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`. */
                    days_until_due?: number;
                    /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
                    default_payment_method?: string;
                    /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
                    default_source?: string;
                    /** @description The tax rates that will apply to any line item that does not have `tax_rates` set. */
                    default_tax_rates?: string[];
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
                    description?: string;
                    /** @description The coupons and promotion codes to redeem into discounts for the invoice. If not specified, inherits the discount from the invoice's customer. Pass an empty string to avoid inheriting any discounts. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /**
                     * Format: unix-time
                     * @description The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`.
                     */
                    due_date?: number;
                    /**
                     * Format: unix-time
                     * @description The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
                     */
                    effective_at?: number;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Footer to be displayed on the invoice. */
                    footer?: string;
                    /**
                     * from_invoice
                     * @description Revise an existing invoice. The new invoice will be created in `status=draft`. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details.
                     */
                    from_invoice?: {
                        /** @enum {string} */
                        action: "revision";
                        invoice: string;
                    };
                    /**
                     * param
                     * @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
                     */
                    issuer?: {
                        account?: string;
                        /** @enum {string} */
                        type: "account" | "self";
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Set the number for this invoice. If no number is present then a number will be assigned automatically when the invoice is finalized. In many markets, regulations require invoices to be unique, sequential and / or gapless. You are responsible for ensuring this is true across all your different invoicing systems in the event that you edit the invoice number using our API. If you use only Stripe for your invoices and do not change invoice numbers, Stripe handles this aspect of compliance for you automatically. */
                    number?: string;
                    /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
                    on_behalf_of?: string;
                    /**
                     * payment_settings
                     * @description Configuration settings for the PaymentIntent that is generated when the invoice is finalized.
                     */
                    payment_settings?: {
                        default_mandate?: string | "";
                        /** payment_method_options */
                        payment_method_options?: {
                            acss_debit?: {
                                /** mandate_options_param */
                                mandate_options?: {
                                    /** @enum {string} */
                                    transaction_type?: "business" | "personal";
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                            bancontact?: {
                                /** @enum {string} */
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            } | "";
                            card?: {
                                /** installments_param */
                                installments?: {
                                    enabled?: boolean;
                                    plan?: {
                                        count?: number;
                                        /** @enum {string} */
                                        interval?: "month";
                                        /** @enum {string} */
                                        type: "fixed_count";
                                    } | "";
                                };
                                /** @enum {string} */
                                request_three_d_secure?: "any" | "automatic" | "challenge";
                            } | "";
                            customer_balance?: {
                                /** bank_transfer_param */
                                bank_transfer?: {
                                    /** eu_bank_transfer_param */
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            sepa_debit?: Record<string, never> | "";
                            us_bank_account?: {
                                /** invoice_linked_account_options_param */
                                financial_connections?: {
                                    /** invoice_linked_account_options_filters_param */
                                    filters?: {
                                        account_subcategories?: ("checking" | "savings")[];
                                    };
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                    prefetch?: ("balances" | "ownership" | "transactions")[];
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                        };
                        payment_method_types?: ("ach_credit_transfer" | "ach_debit" | "acss_debit" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "jp_credit_transfer" | "kakao_pay" | "konbini" | "kr_card" | "link" | "multibanco" | "naver_pay" | "p24" | "payco" | "paynow" | "paypal" | "promptpay" | "revolut_pay" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "swish" | "us_bank_account" | "wechat_pay")[] | "";
                    };
                    /**
                     * @description How to handle pending invoice items on invoice creation. Defaults to `exclude` if the parameter is omitted.
                     * @enum {string}
                     */
                    pending_invoice_items_behavior?: "exclude" | "include";
                    /**
                     * rendering_param
                     * @description The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page.
                     */
                    rendering?: {
                        /** @enum {string} */
                        amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                        /** rendering_pdf_param */
                        pdf?: {
                            /** @enum {string} */
                            page_size?: "a4" | "auto" | "letter";
                        };
                        template?: string;
                        template_version?: number | "";
                    };
                    /**
                     * shipping_cost
                     * @description Settings for the cost of shipping for this invoice.
                     */
                    shipping_cost?: {
                        shipping_rate?: string;
                        /** method_params */
                        shipping_rate_data?: {
                            /** delivery_estimate */
                            delivery_estimate?: {
                                /** delivery_estimate_bound */
                                maximum?: {
                                    /** @enum {string} */
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                                /** delivery_estimate_bound */
                                minimum?: {
                                    /** @enum {string} */
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                            };
                            display_name: string;
                            /** fixed_amount */
                            fixed_amount?: {
                                amount: number;
                                currency: string;
                                currency_options?: {
                                    [key: string]: {
                                        amount: number;
                                        /** @enum {string} */
                                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                    };
                                };
                            };
                            metadata?: {
                                [key: string]: string;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            tax_code?: string;
                            /** @enum {string} */
                            type?: "fixed_amount";
                        };
                    };
                    /**
                     * recipient_shipping_with_optional_fields_address
                     * @description Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer.
                     */
                    shipping_details?: {
                        /** optional_fields_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string | "";
                    };
                    /** @description Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
                    statement_descriptor?: string;
                    /** @description The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription's billing cycle and regular subscription events won't be affected. */
                    subscription?: string;
                    /**
                     * transfer_data_specs
                     * @description If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge.
                     */
                    transfer_data?: {
                        amount?: number;
                        destination: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesCreatePreview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * automatic_tax_param
                     * @description Settings for automatic tax lookup for this invoice preview.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /** @description The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                    coupon?: string;
                    /** @description The currency to preview this invoice in. Defaults to that of `customer` if not specified. */
                    currency?: string;
                    /** @description The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set. */
                    customer?: string;
                    /**
                     * customer_details_param
                     * @description Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
                     */
                    customer_details?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        } | "";
                        shipping?: {
                            /** optional_fields_customer_address */
                            address: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            name: string;
                            phone?: string;
                        } | "";
                        /** tax_param */
                        tax?: {
                            ip_address?: string | "";
                        };
                        /** @enum {string} */
                        tax_exempt?: "" | "exempt" | "none" | "reverse";
                        tax_ids?: {
                            /** @enum {string} */
                            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
                            value: string;
                        }[];
                    };
                    /** @description The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description List of invoice items to add or update in the upcoming invoice preview (up to 250). */
                    invoice_items?: {
                        amount?: number;
                        currency?: string;
                        description?: string;
                        discountable?: boolean;
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        invoiceitem?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        /** period */
                        period?: {
                            /** Format: unix-time */
                            end: number;
                            /** Format: unix-time */
                            start: number;
                        };
                        price?: string;
                        /** one_time_price_data */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        tax_code?: string | "";
                        tax_rates?: string[] | "";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    }[];
                    /**
                     * param
                     * @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
                     */
                    issuer?: {
                        account?: string;
                        /** @enum {string} */
                        type: "account" | "self";
                    };
                    /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
                    on_behalf_of?: string | "";
                    /**
                     * @description Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified.
                     * @enum {string}
                     */
                    preview_mode?: "next" | "recurring";
                    /** @description The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
                    schedule?: string;
                    /**
                     * schedule_details_params
                     * @description The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields.
                     */
                    schedule_details?: {
                        /** @enum {string} */
                        end_behavior?: "cancel" | "release";
                        phases?: {
                            add_invoice_items?: {
                                discounts?: {
                                    coupon?: string;
                                    discount?: string;
                                    promotion_code?: string;
                                }[];
                                price?: string;
                                /** one_time_price_data_with_negative_amounts */
                                price_data?: {
                                    currency: string;
                                    product: string;
                                    /** @enum {string} */
                                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                    unit_amount?: number;
                                    /** Format: decimal */
                                    unit_amount_decimal?: string;
                                };
                                quantity?: number;
                                tax_rates?: string[] | "";
                            }[];
                            application_fee_percent?: number;
                            /** automatic_tax_config */
                            automatic_tax?: {
                                enabled: boolean;
                                /** param */
                                liability?: {
                                    account?: string;
                                    /** @enum {string} */
                                    type: "account" | "self";
                                };
                            };
                            /** @enum {string} */
                            billing_cycle_anchor?: "automatic" | "phase_start";
                            billing_thresholds?: {
                                amount_gte?: number;
                                reset_billing_cycle_anchor?: boolean;
                            } | "";
                            /** @enum {string} */
                            collection_method?: "charge_automatically" | "send_invoice";
                            coupon?: string;
                            default_payment_method?: string;
                            default_tax_rates?: string[] | "";
                            description?: string | "";
                            discounts?: {
                                coupon?: string;
                                discount?: string;
                                promotion_code?: string;
                            }[] | "";
                            end_date?: number | "now";
                            /** invoice_settings */
                            invoice_settings?: {
                                account_tax_ids?: string[] | "";
                                days_until_due?: number;
                                /** param */
                                issuer?: {
                                    account?: string;
                                    /** @enum {string} */
                                    type: "account" | "self";
                                };
                            };
                            items: {
                                billing_thresholds?: {
                                    usage_gte: number;
                                } | "";
                                discounts?: {
                                    coupon?: string;
                                    discount?: string;
                                    promotion_code?: string;
                                }[] | "";
                                metadata?: {
                                    [key: string]: string;
                                };
                                price?: string;
                                /** recurring_price_data */
                                price_data?: {
                                    currency: string;
                                    product: string;
                                    /** recurring_adhoc */
                                    recurring: {
                                        /** @enum {string} */
                                        interval: "day" | "month" | "week" | "year";
                                        interval_count?: number;
                                    };
                                    /** @enum {string} */
                                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                    unit_amount?: number;
                                    /** Format: decimal */
                                    unit_amount_decimal?: string;
                                };
                                quantity?: number;
                                tax_rates?: string[] | "";
                            }[];
                            iterations?: number;
                            metadata?: {
                                [key: string]: string;
                            };
                            on_behalf_of?: string;
                            /** @enum {string} */
                            proration_behavior?: "always_invoice" | "create_prorations" | "none";
                            start_date?: number | "now";
                            /** transfer_data_specs */
                            transfer_data?: {
                                amount_percent?: number;
                                destination: string;
                            };
                            trial?: boolean;
                            trial_end?: number | "now";
                        }[];
                        /** @enum {string} */
                        proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    };
                    /** @description The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
                    subscription?: string;
                    /**
                     * subscription_details_params
                     * @description The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields.
                     */
                    subscription_details?: {
                        billing_cycle_anchor?: ("now" | "unchanged") | number;
                        cancel_at?: number | "";
                        cancel_at_period_end?: boolean;
                        cancel_now?: boolean;
                        default_tax_rates?: string[] | "";
                        items?: {
                            billing_thresholds?: {
                                usage_gte: number;
                            } | "";
                            clear_usage?: boolean;
                            deleted?: boolean;
                            discounts?: {
                                coupon?: string;
                                discount?: string;
                                promotion_code?: string;
                            }[] | "";
                            id?: string;
                            metadata?: {
                                [key: string]: string;
                            } | "";
                            price?: string;
                            /** recurring_price_data */
                            price_data?: {
                                currency: string;
                                product: string;
                                /** recurring_adhoc */
                                recurring: {
                                    /** @enum {string} */
                                    interval: "day" | "month" | "week" | "year";
                                    interval_count?: number;
                                };
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        }[];
                        /** @enum {string} */
                        proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        /** Format: unix-time */
                        proration_date?: number;
                        /** @enum {string} */
                        resume_at?: "now";
                        /** Format: unix-time */
                        start_date?: number;
                        trial_end?: "now" | number;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoicesSearch: {
        parameters: {
            query: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
                page?: string;
                /** @description The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices). */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["invoice"][];
                        has_more: boolean;
                        next_page?: string | null;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value.
                         * @enum {string}
                         */
                        object: "search_result";
                        /** @description The total number of objects that match the query, only accurate up to 10,000. */
                        total_count?: number;
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoicesUpcoming: {
        parameters: {
            query?: {
                /** @description Settings for automatic tax lookup for this invoice preview. */
                automatic_tax?: {
                    enabled: boolean;
                    /** param */
                    liability?: {
                        account?: string;
                        /** @enum {string} */
                        type: "account" | "self";
                    };
                };
                /** @description The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                coupon?: string;
                /** @description The currency to preview this invoice in. Defaults to that of `customer` if not specified. */
                currency?: string;
                /** @description The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set. */
                customer?: string;
                /** @description Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set. */
                customer_details?: {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    } | "";
                    shipping?: {
                        /** optional_fields_customer_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string;
                    } | "";
                    /** tax_param */
                    tax?: {
                        ip_address?: string | "";
                    };
                    /** @enum {string} */
                    tax_exempt?: "" | "exempt" | "none" | "reverse";
                    tax_ids?: {
                        /** @enum {string} */
                        type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
                        value: string;
                    }[];
                };
                /** @description The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts. */
                discounts?: {
                    coupon?: string;
                    discount?: string;
                    promotion_code?: string;
                }[] | "";
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description List of invoice items to add or update in the upcoming invoice preview (up to 250). */
                invoice_items?: {
                    amount?: number;
                    currency?: string;
                    description?: string;
                    discountable?: boolean;
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    invoiceitem?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** period */
                    period?: {
                        /** Format: unix-time */
                        end: number;
                        /** Format: unix-time */
                        start: number;
                    };
                    price?: string;
                    /** one_time_price_data */
                    price_data?: {
                        currency: string;
                        product: string;
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    };
                    quantity?: number;
                    /** @enum {string} */
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    tax_code?: string | "";
                    tax_rates?: string[] | "";
                    unit_amount?: number;
                    /** Format: decimal */
                    unit_amount_decimal?: string;
                }[];
                /** @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
                issuer?: {
                    account?: string;
                    /** @enum {string} */
                    type: "account" | "self";
                };
                /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
                on_behalf_of?: string | "";
                /** @description Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified. */
                preview_mode?: "next" | "recurring";
                /** @description The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
                schedule?: string;
                /** @description The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields. */
                schedule_details?: {
                    /** @enum {string} */
                    end_behavior?: "cancel" | "release";
                    phases?: {
                        add_invoice_items?: {
                            discounts?: {
                                coupon?: string;
                                discount?: string;
                                promotion_code?: string;
                            }[];
                            price?: string;
                            /** one_time_price_data_with_negative_amounts */
                            price_data?: {
                                currency: string;
                                product: string;
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        }[];
                        application_fee_percent?: number;
                        /** automatic_tax_config */
                        automatic_tax?: {
                            enabled: boolean;
                            /** param */
                            liability?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        /** @enum {string} */
                        billing_cycle_anchor?: "automatic" | "phase_start";
                        billing_thresholds?: {
                            amount_gte?: number;
                            reset_billing_cycle_anchor?: boolean;
                        } | "";
                        /** @enum {string} */
                        collection_method?: "charge_automatically" | "send_invoice";
                        coupon?: string;
                        default_payment_method?: string;
                        default_tax_rates?: string[] | "";
                        description?: string | "";
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        end_date?: number | "now";
                        /** invoice_settings */
                        invoice_settings?: {
                            account_tax_ids?: string[] | "";
                            days_until_due?: number;
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        items: {
                            billing_thresholds?: {
                                usage_gte: number;
                            } | "";
                            discounts?: {
                                coupon?: string;
                                discount?: string;
                                promotion_code?: string;
                            }[] | "";
                            metadata?: {
                                [key: string]: string;
                            };
                            price?: string;
                            /** recurring_price_data */
                            price_data?: {
                                currency: string;
                                product: string;
                                /** recurring_adhoc */
                                recurring: {
                                    /** @enum {string} */
                                    interval: "day" | "month" | "week" | "year";
                                    interval_count?: number;
                                };
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        }[];
                        iterations?: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                        /** @enum {string} */
                        proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        start_date?: number | "now";
                        /** transfer_data_specs */
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        };
                        trial?: boolean;
                        trial_end?: number | "now";
                    }[];
                    /** @enum {string} */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                };
                /** @description The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
                subscription?: string;
                /** @description For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead. */
                subscription_billing_cycle_anchor?: ("now" | "unchanged") | number;
                /** @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead. */
                subscription_cancel_at?: number | "";
                /** @description Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead. */
                subscription_cancel_at_period_end?: boolean;
                /** @description This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead. */
                subscription_cancel_now?: boolean;
                /** @description If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead. */
                subscription_default_tax_rates?: string[] | "";
                /** @description The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields. */
                subscription_details?: {
                    billing_cycle_anchor?: ("now" | "unchanged") | number;
                    cancel_at?: number | "";
                    cancel_at_period_end?: boolean;
                    cancel_now?: boolean;
                    default_tax_rates?: string[] | "";
                    items?: {
                        billing_thresholds?: {
                            usage_gte: number;
                        } | "";
                        clear_usage?: boolean;
                        deleted?: boolean;
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        id?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        price?: string;
                        /** recurring_price_data */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** recurring_adhoc */
                            recurring: {
                                /** @enum {string} */
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @enum {string} */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    /** Format: unix-time */
                    proration_date?: number;
                    /** @enum {string} */
                    resume_at?: "now";
                    /** Format: unix-time */
                    start_date?: number;
                    trial_end?: "now" | number;
                };
                /** @description A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead. */
                subscription_items?: {
                    billing_thresholds?: {
                        usage_gte: number;
                    } | "";
                    clear_usage?: boolean;
                    deleted?: boolean;
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    id?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    price?: string;
                    /** recurring_price_data */
                    price_data?: {
                        currency: string;
                        product: string;
                        /** recurring_adhoc */
                        recurring: {
                            /** @enum {string} */
                            interval: "day" | "month" | "week" | "year";
                            interval_count?: number;
                        };
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    };
                    quantity?: number;
                    tax_rates?: string[] | "";
                }[];
                /** @description Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead. */
                subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
                /** @description If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead. */
                subscription_proration_date?: number;
                /** @description For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead. */
                subscription_resume_at?: "now";
                /** @description Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead. */
                subscription_start_date?: number;
                /** @description If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead. */
                subscription_trial_end?: "now" | number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoicesUpcomingLines: {
        parameters: {
            query?: {
                /** @description Settings for automatic tax lookup for this invoice preview. */
                automatic_tax?: {
                    enabled: boolean;
                    /** param */
                    liability?: {
                        account?: string;
                        /** @enum {string} */
                        type: "account" | "self";
                    };
                };
                /** @description The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                coupon?: string;
                /** @description The currency to preview this invoice in. Defaults to that of `customer` if not specified. */
                currency?: string;
                /** @description The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set. */
                customer?: string;
                /** @description Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set. */
                customer_details?: {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    } | "";
                    shipping?: {
                        /** optional_fields_customer_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string;
                    } | "";
                    /** tax_param */
                    tax?: {
                        ip_address?: string | "";
                    };
                    /** @enum {string} */
                    tax_exempt?: "" | "exempt" | "none" | "reverse";
                    tax_ids?: {
                        /** @enum {string} */
                        type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
                        value: string;
                    }[];
                };
                /** @description The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts. */
                discounts?: {
                    coupon?: string;
                    discount?: string;
                    promotion_code?: string;
                }[] | "";
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description List of invoice items to add or update in the upcoming invoice preview (up to 250). */
                invoice_items?: {
                    amount?: number;
                    currency?: string;
                    description?: string;
                    discountable?: boolean;
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    invoiceitem?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** period */
                    period?: {
                        /** Format: unix-time */
                        end: number;
                        /** Format: unix-time */
                        start: number;
                    };
                    price?: string;
                    /** one_time_price_data */
                    price_data?: {
                        currency: string;
                        product: string;
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    };
                    quantity?: number;
                    /** @enum {string} */
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    tax_code?: string | "";
                    tax_rates?: string[] | "";
                    unit_amount?: number;
                    /** Format: decimal */
                    unit_amount_decimal?: string;
                }[];
                /** @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
                issuer?: {
                    account?: string;
                    /** @enum {string} */
                    type: "account" | "self";
                };
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
                on_behalf_of?: string | "";
                /** @description Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified. */
                preview_mode?: "next" | "recurring";
                /** @description The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
                schedule?: string;
                /** @description The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields. */
                schedule_details?: {
                    /** @enum {string} */
                    end_behavior?: "cancel" | "release";
                    phases?: {
                        add_invoice_items?: {
                            discounts?: {
                                coupon?: string;
                                discount?: string;
                                promotion_code?: string;
                            }[];
                            price?: string;
                            /** one_time_price_data_with_negative_amounts */
                            price_data?: {
                                currency: string;
                                product: string;
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        }[];
                        application_fee_percent?: number;
                        /** automatic_tax_config */
                        automatic_tax?: {
                            enabled: boolean;
                            /** param */
                            liability?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        /** @enum {string} */
                        billing_cycle_anchor?: "automatic" | "phase_start";
                        billing_thresholds?: {
                            amount_gte?: number;
                            reset_billing_cycle_anchor?: boolean;
                        } | "";
                        /** @enum {string} */
                        collection_method?: "charge_automatically" | "send_invoice";
                        coupon?: string;
                        default_payment_method?: string;
                        default_tax_rates?: string[] | "";
                        description?: string | "";
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        end_date?: number | "now";
                        /** invoice_settings */
                        invoice_settings?: {
                            account_tax_ids?: string[] | "";
                            days_until_due?: number;
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        items: {
                            billing_thresholds?: {
                                usage_gte: number;
                            } | "";
                            discounts?: {
                                coupon?: string;
                                discount?: string;
                                promotion_code?: string;
                            }[] | "";
                            metadata?: {
                                [key: string]: string;
                            };
                            price?: string;
                            /** recurring_price_data */
                            price_data?: {
                                currency: string;
                                product: string;
                                /** recurring_adhoc */
                                recurring: {
                                    /** @enum {string} */
                                    interval: "day" | "month" | "week" | "year";
                                    interval_count?: number;
                                };
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        }[];
                        iterations?: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                        /** @enum {string} */
                        proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        start_date?: number | "now";
                        /** transfer_data_specs */
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        };
                        trial?: boolean;
                        trial_end?: number | "now";
                    }[];
                    /** @enum {string} */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                };
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
                subscription?: string;
                /** @description For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead. */
                subscription_billing_cycle_anchor?: ("now" | "unchanged") | number;
                /** @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead. */
                subscription_cancel_at?: number | "";
                /** @description Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead. */
                subscription_cancel_at_period_end?: boolean;
                /** @description This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead. */
                subscription_cancel_now?: boolean;
                /** @description If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead. */
                subscription_default_tax_rates?: string[] | "";
                /** @description The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields. */
                subscription_details?: {
                    billing_cycle_anchor?: ("now" | "unchanged") | number;
                    cancel_at?: number | "";
                    cancel_at_period_end?: boolean;
                    cancel_now?: boolean;
                    default_tax_rates?: string[] | "";
                    items?: {
                        billing_thresholds?: {
                            usage_gte: number;
                        } | "";
                        clear_usage?: boolean;
                        deleted?: boolean;
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        id?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        price?: string;
                        /** recurring_price_data */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** recurring_adhoc */
                            recurring: {
                                /** @enum {string} */
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @enum {string} */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    /** Format: unix-time */
                    proration_date?: number;
                    /** @enum {string} */
                    resume_at?: "now";
                    /** Format: unix-time */
                    start_date?: number;
                    trial_end?: "now" | number;
                };
                /** @description A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead. */
                subscription_items?: {
                    billing_thresholds?: {
                        usage_gte: number;
                    } | "";
                    clear_usage?: boolean;
                    deleted?: boolean;
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    id?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    price?: string;
                    /** recurring_price_data */
                    price_data?: {
                        currency: string;
                        product: string;
                        /** recurring_adhoc */
                        recurring: {
                            /** @enum {string} */
                            interval: "day" | "month" | "week" | "year";
                            interval_count?: number;
                        };
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    };
                    quantity?: number;
                    tax_rates?: string[] | "";
                }[];
                /** @description Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead. */
                subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
                /** @description If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead. */
                subscription_proration_date?: number;
                /** @description For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead. */
                subscription_resume_at?: "now";
                /** @description Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead. */
                subscription_start_date?: number;
                /** @description If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead. */
                subscription_trial_end?: "now" | number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["line_item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoicesInvoice: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
                    account_tax_ids?: string[] | "";
                    /** @description A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees). */
                    application_fee_amount?: number;
                    /** @description Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. */
                    auto_advance?: boolean;
                    /**
                     * automatic_tax_param
                     * @description Settings for automatic tax lookup for this invoice.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * Format: unix-time
                     * @description The time when this invoice should be scheduled to finalize. The invoice will be finalized at this time if it is still in draft state. To turn off automatic finalization, set `auto_advance` to false.
                     */
                    automatically_finalizes_at?: number;
                    /**
                     * @description Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.
                     * @enum {string}
                     */
                    collection_method?: "charge_automatically" | "send_invoice";
                    /** @description A list of up to 4 custom fields to be displayed on the invoice. If a value for `custom_fields` is specified, the list specified will replace the existing custom field list on this invoice. Pass an empty string to remove previously-defined fields. */
                    custom_fields?: {
                        name: string;
                        value: string;
                    }[] | "";
                    /** @description The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices. */
                    days_until_due?: number;
                    /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
                    default_payment_method?: string;
                    /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
                    default_source?: string | "";
                    /** @description The tax rates that will apply to any line item that does not have `tax_rates` set. Pass an empty string to remove previously-defined tax rates. */
                    default_tax_rates?: string[] | "";
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
                    description?: string;
                    /** @description The discounts that will apply to the invoice. Pass an empty string to remove previously-defined discounts. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /**
                     * Format: unix-time
                     * @description The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
                     */
                    due_date?: number;
                    /** @description The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt. */
                    effective_at?: number | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Footer to be displayed on the invoice. */
                    footer?: string;
                    /**
                     * param
                     * @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
                     */
                    issuer?: {
                        account?: string;
                        /** @enum {string} */
                        type: "account" | "self";
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Set the number for this invoice. If no number is present then a number will be assigned automatically when the invoice is finalized. In many markets, regulations require invoices to be unique, sequential and / or gapless. You are responsible for ensuring this is true across all your different invoicing systems in the event that you edit the invoice number using our API. If you use only Stripe for your invoices and do not change invoice numbers, Stripe handles this aspect of compliance for you automatically. */
                    number?: string | "";
                    /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
                    on_behalf_of?: string | "";
                    /**
                     * payment_settings
                     * @description Configuration settings for the PaymentIntent that is generated when the invoice is finalized.
                     */
                    payment_settings?: {
                        default_mandate?: string | "";
                        /** payment_method_options */
                        payment_method_options?: {
                            acss_debit?: {
                                /** mandate_options_param */
                                mandate_options?: {
                                    /** @enum {string} */
                                    transaction_type?: "business" | "personal";
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                            bancontact?: {
                                /** @enum {string} */
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            } | "";
                            card?: {
                                /** installments_param */
                                installments?: {
                                    enabled?: boolean;
                                    plan?: {
                                        count?: number;
                                        /** @enum {string} */
                                        interval?: "month";
                                        /** @enum {string} */
                                        type: "fixed_count";
                                    } | "";
                                };
                                /** @enum {string} */
                                request_three_d_secure?: "any" | "automatic" | "challenge";
                            } | "";
                            customer_balance?: {
                                /** bank_transfer_param */
                                bank_transfer?: {
                                    /** eu_bank_transfer_param */
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            sepa_debit?: Record<string, never> | "";
                            us_bank_account?: {
                                /** invoice_linked_account_options_param */
                                financial_connections?: {
                                    /** invoice_linked_account_options_filters_param */
                                    filters?: {
                                        account_subcategories?: ("checking" | "savings")[];
                                    };
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                    prefetch?: ("balances" | "ownership" | "transactions")[];
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                        };
                        payment_method_types?: ("ach_credit_transfer" | "ach_debit" | "acss_debit" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "jp_credit_transfer" | "kakao_pay" | "konbini" | "kr_card" | "link" | "multibanco" | "naver_pay" | "p24" | "payco" | "paynow" | "paypal" | "promptpay" | "revolut_pay" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "swish" | "us_bank_account" | "wechat_pay")[] | "";
                    };
                    /**
                     * rendering_param
                     * @description The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page.
                     */
                    rendering?: {
                        /** @enum {string} */
                        amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                        /** rendering_pdf_param */
                        pdf?: {
                            /** @enum {string} */
                            page_size?: "a4" | "auto" | "letter";
                        };
                        template?: string;
                        template_version?: number | "";
                    };
                    /** @description Settings for the cost of shipping for this invoice. */
                    shipping_cost?: {
                        shipping_rate?: string;
                        /** method_params */
                        shipping_rate_data?: {
                            /** delivery_estimate */
                            delivery_estimate?: {
                                /** delivery_estimate_bound */
                                maximum?: {
                                    /** @enum {string} */
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                                /** delivery_estimate_bound */
                                minimum?: {
                                    /** @enum {string} */
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                            };
                            display_name: string;
                            /** fixed_amount */
                            fixed_amount?: {
                                amount: number;
                                currency: string;
                                currency_options?: {
                                    [key: string]: {
                                        amount: number;
                                        /** @enum {string} */
                                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                    };
                                };
                            };
                            metadata?: {
                                [key: string]: string;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            tax_code?: string;
                            /** @enum {string} */
                            type?: "fixed_amount";
                        };
                    } | "";
                    /** @description Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer. */
                    shipping_details?: {
                        /** optional_fields_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string | "";
                    } | "";
                    /** @description Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
                    statement_descriptor?: string;
                    /** @description If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge. This will be unset if you POST an empty value. */
                    transfer_data?: {
                        amount?: number;
                        destination: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteInvoicesInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceAddLines: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    invoice_metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The line items to add. */
                    lines: {
                        amount?: number;
                        description?: string;
                        discountable?: boolean;
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        invoice_item?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        /** period */
                        period?: {
                            /** Format: unix-time */
                            end: number;
                            /** Format: unix-time */
                            start: number;
                        };
                        price?: string;
                        /** one_time_price_data_with_product_data */
                        price_data?: {
                            currency: string;
                            product?: string;
                            /** product_data */
                            product_data?: {
                                description?: string;
                                images?: string[];
                                metadata?: {
                                    [key: string]: string;
                                };
                                name: string;
                                tax_code?: string;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_amounts?: {
                            amount: number;
                            /** tax_rate_data_param */
                            tax_rate_data: {
                                country?: string;
                                description?: string;
                                display_name: string;
                                inclusive: boolean;
                                jurisdiction?: string;
                                percentage: number;
                                state?: string;
                                /** @enum {string} */
                                tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "retail_delivery_fee" | "rst" | "sales_tax" | "service_tax" | "vat";
                            };
                            taxable_amount: number;
                        }[] | "";
                        tax_rates?: string[] | "";
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceFinalize: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action. */
                    auto_advance?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoicesInvoiceLines: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["line_item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceLinesLineItemId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Invoice ID of line item */
                invoice: string;
                /** @description Invoice line item ID */
                line_item_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount. */
                    amount?: number;
                    /** @description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
                    description?: string;
                    /** @description Controls whether discounts apply to this line item. Defaults to false for prorations or negative line items, and true for all other line items. Cannot be set to true for prorations. */
                    discountable?: boolean;
                    /** @description The coupons, promotion codes & existing discounts which apply to the line item. Item discounts are applied before invoice discounts. Pass an empty string to remove previously-defined discounts. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://stripe.com/docs/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * period
                     * @description The period associated with this invoice item. When set to different values, the period will be rendered on the invoice. If you have [Stripe Revenue Recognition](https://stripe.com/docs/revenue-recognition) enabled, the period will be used to recognize and defer revenue. See the [Revenue Recognition documentation](https://stripe.com/docs/revenue-recognition/methodology/subscriptions-and-invoicing) for details.
                     */
                    period?: {
                        /** Format: unix-time */
                        end: number;
                        /** Format: unix-time */
                        start: number;
                    };
                    /** @description The ID of the price object. One of `price` or `price_data` is required. */
                    price?: string;
                    /**
                     * one_time_price_data_with_product_data
                     * @description Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
                     */
                    price_data?: {
                        currency: string;
                        product?: string;
                        /** product_data */
                        product_data?: {
                            description?: string;
                            images?: string[];
                            metadata?: {
                                [key: string]: string;
                            };
                            name: string;
                            tax_code?: string;
                        };
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    };
                    /** @description Non-negative integer. The quantity of units for the line item. */
                    quantity?: number;
                    /** @description A list of up to 10 tax amounts for this line item. This can be useful if you calculate taxes on your own or use a third-party to calculate them. You cannot set tax amounts if any line item has [tax_rates](https://stripe.com/docs/api/invoices/line_item#invoice_line_item_object-tax_rates) or if the invoice has [default_tax_rates](https://stripe.com/docs/api/invoices/object#invoice_object-default_tax_rates) or uses [automatic tax](https://stripe.com/docs/tax/invoicing). Pass an empty string to remove previously defined tax amounts. */
                    tax_amounts?: {
                        amount: number;
                        /** tax_rate_data_param */
                        tax_rate_data: {
                            country?: string;
                            description?: string;
                            display_name: string;
                            inclusive: boolean;
                            jurisdiction?: string;
                            percentage: number;
                            state?: string;
                            /** @enum {string} */
                            tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "retail_delivery_fee" | "rst" | "sales_tax" | "service_tax" | "vat";
                        };
                        taxable_amount: number;
                    }[] | "";
                    /** @description The tax rates which apply to the line item. When set, the `default_tax_rates` on the invoice do not apply to this line item. Pass an empty string to remove previously-defined tax rates. */
                    tax_rates?: string[] | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["line_item"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceMarkUncollectible: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoicePay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.
                     *
                     *     Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference. Defaults to `false`. */
                    forgive?: boolean;
                    /** @description ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the payment_method param or the invoice's default_payment_method or default_source, if set. */
                    mandate?: string | "";
                    /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `true` (off-session). */
                    off_session?: boolean;
                    /** @description Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. Defaults to `false`. */
                    paid_out_of_band?: boolean;
                    /** @description A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid. */
                    payment_method?: string;
                    /** @description A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid. */
                    source?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceRemoveLines: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    invoice_metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The line items to remove. */
                    lines: {
                        /** @enum {string} */
                        behavior: "delete" | "unassign";
                        id: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceSend: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceUpdateLines: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://stripe.com/docs/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data. */
                    invoice_metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The line items to update. */
                    lines: {
                        amount?: number;
                        description?: string;
                        discountable?: boolean;
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        id: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        /** period */
                        period?: {
                            /** Format: unix-time */
                            end: number;
                            /** Format: unix-time */
                            start: number;
                        };
                        price?: string;
                        /** one_time_price_data_with_product_data */
                        price_data?: {
                            currency: string;
                            product?: string;
                            /** product_data */
                            product_data?: {
                                description?: string;
                                images?: string[];
                                metadata?: {
                                    [key: string]: string;
                                };
                                name: string;
                                tax_code?: string;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_amounts?: {
                            amount: number;
                            /** tax_rate_data_param */
                            tax_rate_data: {
                                country?: string;
                                description?: string;
                                display_name: string;
                                inclusive: boolean;
                                jurisdiction?: string;
                                percentage: number;
                                state?: string;
                                /** @enum {string} */
                                tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "retail_delivery_fee" | "rst" | "sales_tax" | "service_tax" | "vat";
                            };
                            taxable_amount: number;
                        }[] | "";
                        tax_rates?: string[] | "";
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceVoid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingAuthorizations: {
        parameters: {
            query?: {
                /** @description Only return authorizations that belong to the given card. */
                card?: string;
                /** @description Only return authorizations that belong to the given cardholder. */
                cardholder?: string;
                /** @description Only return authorizations that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`. */
                status?: "closed" | "pending" | "reversed";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.authorization"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingAuthorizationsAuthorization: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                authorization: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingAuthorizationsAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorization: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingAuthorizationsAuthorizationApprove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorization: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description If the authorization's `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request). */
                    amount?: number;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingAuthorizationsAuthorizationDecline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorization: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingCardholders: {
        parameters: {
            query?: {
                /** @description Only return cardholders that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return cardholders that have the given email address. */
                email?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return cardholders that have the given phone number. */
                phone_number?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`. */
                status?: "active" | "blocked" | "inactive";
                /** @description Only return cardholders that have the given type. One of `individual` or `company`. */
                type?: "company" | "individual";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.cardholder"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingCardholders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * billing_specs
                     * @description The cardholder's billing address.
                     */
                    billing: {
                        /** required_address */
                        address: {
                            city: string;
                            country: string;
                            line1: string;
                            line2?: string;
                            postal_code: string;
                            state?: string;
                        };
                    };
                    /**
                     * company_param
                     * @description Additional information about a `company` cardholder.
                     */
                    company?: {
                        tax_id?: string;
                    };
                    /** @description The cardholder's email address. */
                    email?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * individual_param
                     * @description Additional information about an `individual` cardholder.
                     */
                    individual?: {
                        /** card_issuing_param */
                        card_issuing?: {
                            /** terms_acceptance_param */
                            user_terms_acceptance?: {
                                /** Format: unix-time */
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                        /** date_of_birth_specs */
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        };
                        first_name?: string;
                        last_name?: string;
                        /** person_verification_param */
                        verification?: {
                            /** person_verification_document_param */
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The cardholder's name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. This field cannot contain any special characters or numbers. */
                    name: string;
                    /** @description The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details. */
                    phone_number?: string;
                    /** @description The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.
                     *      This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder. */
                    preferred_locales?: ("de" | "en" | "es" | "fr" | "it")[];
                    /**
                     * authorization_controls_param_v2
                     * @description Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
                     */
                    spending_controls?: {
                        allowed_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        allowed_merchant_countries?: string[];
                        blocked_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        blocked_merchant_countries?: string[];
                        spending_limits?: {
                            amount: number;
                            categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                            /** @enum {string} */
                            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
                        }[];
                        spending_limits_currency?: string;
                    };
                    /**
                     * @description Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`.
                     * @enum {string}
                     */
                    status?: "active" | "inactive";
                    /**
                     * @description One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
                     * @enum {string}
                     */
                    type?: "company" | "individual";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.cardholder"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingCardholdersCardholder: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                cardholder: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.cardholder"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingCardholdersCardholder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cardholder: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * billing_specs
                     * @description The cardholder's billing address.
                     */
                    billing?: {
                        /** required_address */
                        address: {
                            city: string;
                            country: string;
                            line1: string;
                            line2?: string;
                            postal_code: string;
                            state?: string;
                        };
                    };
                    /**
                     * company_param
                     * @description Additional information about a `company` cardholder.
                     */
                    company?: {
                        tax_id?: string;
                    };
                    /** @description The cardholder's email address. */
                    email?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * individual_param
                     * @description Additional information about an `individual` cardholder.
                     */
                    individual?: {
                        /** card_issuing_param */
                        card_issuing?: {
                            /** terms_acceptance_param */
                            user_terms_acceptance?: {
                                /** Format: unix-time */
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                        /** date_of_birth_specs */
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        };
                        first_name?: string;
                        last_name?: string;
                        /** person_verification_param */
                        verification?: {
                            /** person_verification_document_param */
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure) for more details. */
                    phone_number?: string;
                    /** @description The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.
                     *      This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder. */
                    preferred_locales?: ("de" | "en" | "es" | "fr" | "it")[];
                    /**
                     * authorization_controls_param_v2
                     * @description Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
                     */
                    spending_controls?: {
                        allowed_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        allowed_merchant_countries?: string[];
                        blocked_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        blocked_merchant_countries?: string[];
                        spending_limits?: {
                            amount: number;
                            categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                            /** @enum {string} */
                            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
                        }[];
                        spending_limits_currency?: string;
                    };
                    /**
                     * @description Specifies whether to permit authorizations on this cardholder's cards.
                     * @enum {string}
                     */
                    status?: "active" | "inactive";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.cardholder"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingCards: {
        parameters: {
            query?: {
                /** @description Only return cards belonging to the Cardholder with the provided ID. */
                cardholder?: string;
                /** @description Only return cards that were issued during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Only return cards that have the given expiration month. */
                exp_month?: number;
                /** @description Only return cards that have the given expiration year. */
                exp_year?: number;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Only return cards that have the given last four digits. */
                last4?: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                personalization_design?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return cards that have the given status. One of `active`, `inactive`, or `canceled`. */
                status?: "active" | "canceled" | "inactive";
                /** @description Only return cards that have the given type. One of `virtual` or `physical`. */
                type?: "physical" | "virtual";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.card"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingCards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated. */
                    cardholder?: string;
                    /** @description The currency for the card. */
                    currency: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    financial_account?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The personalization design object belonging to this card. */
                    personalization_design?: string;
                    /**
                     * encrypted_pin_param
                     * @description The desired PIN for this card.
                     */
                    pin?: {
                        encrypted_number?: string;
                    };
                    /** @description The card this is meant to be a replacement for (if any). */
                    replacement_for?: string;
                    /**
                     * @description If `replacement_for` is specified, this should indicate why that card is being replaced.
                     * @enum {string}
                     */
                    replacement_reason?: "damaged" | "expired" | "lost" | "stolen";
                    /** @description The second line to print on the card. Max length: 24 characters. */
                    second_line?: string | "";
                    /**
                     * shipping_specs
                     * @description The address where the card will be shipped.
                     */
                    shipping?: {
                        /** required_address */
                        address: {
                            city: string;
                            country: string;
                            line1: string;
                            line2?: string;
                            postal_code: string;
                            state?: string;
                        };
                        /** address_validation_param */
                        address_validation?: {
                            /** @enum {string} */
                            mode: "disabled" | "normalization_only" | "validation_and_normalization";
                        };
                        /** customs_param */
                        customs?: {
                            eori_number?: string;
                        };
                        name: string;
                        phone_number?: string;
                        require_signature?: boolean;
                        /** @enum {string} */
                        service?: "express" | "priority" | "standard";
                        /** @enum {string} */
                        type?: "bulk" | "individual";
                    };
                    /**
                     * authorization_controls_param
                     * @description Rules that control spending for this card. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
                     */
                    spending_controls?: {
                        allowed_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        allowed_merchant_countries?: string[];
                        blocked_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        blocked_merchant_countries?: string[];
                        spending_limits?: {
                            amount: number;
                            categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                            /** @enum {string} */
                            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
                        }[];
                    };
                    /**
                     * @description Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.
                     * @enum {string}
                     */
                    status?: "active" | "inactive";
                    /**
                     * @description The type of card to issue. Possible values are `physical` or `virtual`.
                     * @enum {string}
                     */
                    type: "physical" | "virtual";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingCardsCard: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                card: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingCardsCard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description Reason why the `status` of this card is `canceled`.
                     * @enum {string}
                     */
                    cancellation_reason?: "lost" | "stolen";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    personalization_design?: string;
                    /**
                     * encrypted_pin_param
                     * @description The desired new PIN for this card.
                     */
                    pin?: {
                        encrypted_number?: string;
                    };
                    /**
                     * shipping_specs
                     * @description Updated shipping information for the card.
                     */
                    shipping?: {
                        /** required_address */
                        address: {
                            city: string;
                            country: string;
                            line1: string;
                            line2?: string;
                            postal_code: string;
                            state?: string;
                        };
                        /** address_validation_param */
                        address_validation?: {
                            /** @enum {string} */
                            mode: "disabled" | "normalization_only" | "validation_and_normalization";
                        };
                        /** customs_param */
                        customs?: {
                            eori_number?: string;
                        };
                        name: string;
                        phone_number?: string;
                        require_signature?: boolean;
                        /** @enum {string} */
                        service?: "express" | "priority" | "standard";
                        /** @enum {string} */
                        type?: "bulk" | "individual";
                    };
                    /**
                     * authorization_controls_param
                     * @description Rules that control spending for this card. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
                     */
                    spending_controls?: {
                        allowed_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        allowed_merchant_countries?: string[];
                        blocked_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        blocked_merchant_countries?: string[];
                        spending_limits?: {
                            amount: number;
                            categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                            /** @enum {string} */
                            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
                        }[];
                    };
                    /**
                     * @description Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.
                     * @enum {string}
                     */
                    status?: "active" | "canceled" | "inactive";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingDisputes: {
        parameters: {
            query?: {
                /** @description Only return Issuing disputes that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Select Issuing disputes with the given status. */
                status?: "expired" | "lost" | "submitted" | "unsubmitted" | "won";
                /** @description Select the Issuing dispute for the given transaction. */
                transaction?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.dispute"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingDisputes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If not set, defaults to the full transaction amount. */
                    amount?: number;
                    /**
                     * evidence_param
                     * @description Evidence provided for the dispute.
                     */
                    evidence?: {
                        canceled?: {
                            additional_documentation?: string | "";
                            canceled_at?: number | "";
                            cancellation_policy_provided?: boolean | "";
                            cancellation_reason?: string | "";
                            expected_at?: number | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            /** @enum {string} */
                            product_type?: "" | "merchandise" | "service";
                            /** @enum {string} */
                            return_status?: "" | "merchant_rejected" | "successful";
                            returned_at?: number | "";
                        } | "";
                        duplicate?: {
                            additional_documentation?: string | "";
                            card_statement?: string | "";
                            cash_receipt?: string | "";
                            check_image?: string | "";
                            explanation?: string | "";
                            original_transaction?: string;
                        } | "";
                        fraudulent?: {
                            additional_documentation?: string | "";
                            explanation?: string | "";
                        } | "";
                        merchandise_not_as_described?: {
                            additional_documentation?: string | "";
                            explanation?: string | "";
                            received_at?: number | "";
                            return_description?: string | "";
                            /** @enum {string} */
                            return_status?: "" | "merchant_rejected" | "successful";
                            returned_at?: number | "";
                        } | "";
                        no_valid_authorization?: {
                            additional_documentation?: string | "";
                            explanation?: string | "";
                        } | "";
                        not_received?: {
                            additional_documentation?: string | "";
                            expected_at?: number | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            /** @enum {string} */
                            product_type?: "" | "merchandise" | "service";
                        } | "";
                        other?: {
                            additional_documentation?: string | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            /** @enum {string} */
                            product_type?: "" | "merchandise" | "service";
                        } | "";
                        /** @enum {string} */
                        reason?: "canceled" | "duplicate" | "fraudulent" | "merchandise_not_as_described" | "no_valid_authorization" | "not_received" | "other" | "service_not_as_described";
                        service_not_as_described?: {
                            additional_documentation?: string | "";
                            canceled_at?: number | "";
                            cancellation_reason?: string | "";
                            explanation?: string | "";
                            received_at?: number | "";
                        } | "";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The ID of the issuing transaction to create a dispute for. For transaction on Treasury FinancialAccounts, use `treasury.received_debit`. */
                    transaction?: string;
                    /**
                     * treasury_param
                     * @description Params for disputes related to Treasury FinancialAccounts
                     */
                    treasury?: {
                        received_debit: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.dispute"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingDisputesDispute: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                dispute: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.dispute"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingDisputesDispute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dispute: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
                    amount?: number;
                    /**
                     * evidence_param
                     * @description Evidence provided for the dispute.
                     */
                    evidence?: {
                        canceled?: {
                            additional_documentation?: string | "";
                            canceled_at?: number | "";
                            cancellation_policy_provided?: boolean | "";
                            cancellation_reason?: string | "";
                            expected_at?: number | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            /** @enum {string} */
                            product_type?: "" | "merchandise" | "service";
                            /** @enum {string} */
                            return_status?: "" | "merchant_rejected" | "successful";
                            returned_at?: number | "";
                        } | "";
                        duplicate?: {
                            additional_documentation?: string | "";
                            card_statement?: string | "";
                            cash_receipt?: string | "";
                            check_image?: string | "";
                            explanation?: string | "";
                            original_transaction?: string;
                        } | "";
                        fraudulent?: {
                            additional_documentation?: string | "";
                            explanation?: string | "";
                        } | "";
                        merchandise_not_as_described?: {
                            additional_documentation?: string | "";
                            explanation?: string | "";
                            received_at?: number | "";
                            return_description?: string | "";
                            /** @enum {string} */
                            return_status?: "" | "merchant_rejected" | "successful";
                            returned_at?: number | "";
                        } | "";
                        no_valid_authorization?: {
                            additional_documentation?: string | "";
                            explanation?: string | "";
                        } | "";
                        not_received?: {
                            additional_documentation?: string | "";
                            expected_at?: number | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            /** @enum {string} */
                            product_type?: "" | "merchandise" | "service";
                        } | "";
                        other?: {
                            additional_documentation?: string | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            /** @enum {string} */
                            product_type?: "" | "merchandise" | "service";
                        } | "";
                        /** @enum {string} */
                        reason?: "canceled" | "duplicate" | "fraudulent" | "merchandise_not_as_described" | "no_valid_authorization" | "not_received" | "other" | "service_not_as_described";
                        service_not_as_described?: {
                            additional_documentation?: string | "";
                            canceled_at?: number | "";
                            cancellation_reason?: string | "";
                            explanation?: string | "";
                            received_at?: number | "";
                        } | "";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.dispute"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingDisputesDisputeSubmit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dispute: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.dispute"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingPersonalizationDesigns: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return personalization designs with the given lookup keys. */
                lookup_keys?: string[];
                /** @description Only return personalization designs with the given preferences. */
                preferences?: {
                    is_default?: boolean;
                    is_platform_default?: boolean;
                };
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return personalization designs with the given status. */
                status?: "active" | "inactive" | "rejected" | "review";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.personalization_design"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingPersonalizationDesigns: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`. */
                    card_logo?: string;
                    /**
                     * carrier_text_param
                     * @description Hash containing carrier text, for use with physical bundles that support carrier text.
                     */
                    carrier_text?: {
                        footer_body?: string | "";
                        footer_title?: string | "";
                        header_body?: string | "";
                        header_title?: string | "";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters. */
                    lookup_key?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description Friendly display name. */
                    name?: string;
                    /** @description The physical bundle object belonging to this personalization design. */
                    physical_bundle: string;
                    /**
                     * preferences_param
                     * @description Information on whether this personalization design is used to create cards when one is not specified.
                     */
                    preferences?: {
                        is_default: boolean;
                    };
                    /** @description If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design. */
                    transfer_lookup_key?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.personalization_design"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingPersonalizationDesignsPersonalizationDesign: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                personalization_design: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.personalization_design"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingPersonalizationDesignsPersonalizationDesign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personalization_design: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`. */
                    card_logo?: string | "";
                    /** @description Hash containing carrier text, for use with physical bundles that support carrier text. */
                    carrier_text?: {
                        footer_body?: string | "";
                        footer_title?: string | "";
                        header_body?: string | "";
                        header_title?: string | "";
                    } | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters. */
                    lookup_key?: string | "";
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description Friendly display name. Providing an empty string will set the field to null. */
                    name?: string | "";
                    /** @description The physical bundle object belonging to this personalization design. */
                    physical_bundle?: string;
                    /**
                     * preferences_param
                     * @description Information on whether this personalization design is used to create cards when one is not specified.
                     */
                    preferences?: {
                        is_default: boolean;
                    };
                    /** @description If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design. */
                    transfer_lookup_key?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.personalization_design"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingPhysicalBundles: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return physical bundles with the given status. */
                status?: "active" | "inactive" | "review";
                /** @description Only return physical bundles with the given type. */
                type?: "custom" | "standard";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.physical_bundle"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingPhysicalBundlesPhysicalBundle: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                physical_bundle: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.physical_bundle"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingSettlementsSettlement: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                settlement: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.settlement"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingSettlementsSettlement: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                settlement: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.settlement"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingTokens: {
        parameters: {
            query: {
                /** @description The Issuing card identifier to list tokens for. */
                card: string;
                /** @description Only return Issuing tokens that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Select Issuing tokens with the given status. */
                status?: "active" | "deleted" | "requested" | "suspended";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.token"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingTokensToken: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.token"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingTokensToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * @description Specifies which status the token should be updated to.
                     * @enum {string}
                     */
                    status: "active" | "deleted" | "suspended";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.token"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingTransactions: {
        parameters: {
            query?: {
                /** @description Only return transactions that belong to the given card. */
                card?: string;
                /** @description Only return transactions that belong to the given cardholder. */
                cardholder?: string;
                /** @description Only return transactions that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return transactions that have the given type. One of `capture` or `refund`. */
                type?: "capture" | "refund";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.transaction"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingTransactionsTransaction: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                transaction: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingTransactionsTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transaction: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostLinkAccountSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * accountholder_params
                     * @description The account holder to link accounts for.
                     */
                    account_holder: {
                        account?: string;
                        customer?: string;
                        /** @enum {string} */
                        type: "account" | "customer";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * filters_params
                     * @description Filters to restrict the kinds of accounts to collect.
                     */
                    filters?: {
                        account_subcategories?: ("checking" | "credit_card" | "line_of_credit" | "mortgage" | "savings")[];
                        countries?: string[];
                    };
                    /** @description List of data features that you would like to request access to.
                     *
                     *     Possible values are `balances`, `transactions`, `ownership`, and `payment_method`. */
                    permissions: ("balances" | "ownership" | "payment_method" | "transactions")[];
                    /** @description List of data features that you would like to retrieve upon account creation. */
                    prefetch?: ("balances" | "ownership" | "transactions")[];
                    /** @description For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app. */
                    return_url?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetLinkAccountSessionsSession: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                session: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.session"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetLinkedAccounts: {
        parameters: {
            query?: {
                /** @description If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive. */
                account_holder?: {
                    account?: string;
                    customer?: string;
                };
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description If present, only return accounts that were collected as part of the given session. */
                session?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["financial_connections.account"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetLinkedAccountsAccount: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostLinkedAccountsAccountDisconnect: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetLinkedAccountsAccountOwners: {
        parameters: {
            query: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description The ID of the ownership object to fetch owners from. */
                ownership: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["financial_connections.account_owner"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostLinkedAccountsAccountRefresh: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The list of account features that you would like to refresh. */
                    features: ("balance" | "ownership" | "transactions")[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetMandatesMandate: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                mandate: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["mandate"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentIntents: {
        parameters: {
            query?: {
                /** @description A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp or a dictionary with a number of different query options. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return PaymentIntents for the customer that this customer ID specifies. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_intent"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
                    amount: number;
                    /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
                    application_fee_amount?: number;
                    /**
                     * automatic_payment_methods_param
                     * @description When you enable this parameter, this PaymentIntent accepts payment methods that you enable in the Dashboard and that are compatible with this PaymentIntent's other parameters.
                     */
                    automatic_payment_methods?: {
                        /** @enum {string} */
                        allow_redirects?: "always" | "never";
                        enabled: boolean;
                    };
                    /**
                     * @description Controls when the funds will be captured from the customer's account.
                     * @enum {string}
                     */
                    capture_method?: "automatic" | "automatic_async" | "manual";
                    /** @description Set to `true` to attempt to [confirm this PaymentIntent](https://stripe.com/docs/api/payment_intents/confirm) immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, you can also provide the parameters available in the [Confirm API](https://stripe.com/docs/api/payment_intents/confirm). */
                    confirm?: boolean;
                    /**
                     * @description Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
                     * @enum {string}
                     */
                    confirmation_method?: "automatic" | "manual";
                    /** @description ID of the ConfirmationToken used to confirm this PaymentIntent.
                     *
                     *     If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence. */
                    confirmation_token?: string;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description ID of the Customer this PaymentIntent belongs to, if one exists.
                     *
                     *     Payment methods attached to other Customers cannot be used with this PaymentIntent.
                     *
                     *     If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead. */
                    customer?: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. Use this parameter for simpler integrations that don't handle customer actions, such as [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
                    error_on_requires_action?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description ID of the mandate that's used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
                    mandate?: string;
                    /** @description This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
                    mandate_data?: {
                        /** customer_acceptance_param */
                        customer_acceptance: {
                            /** Format: unix-time */
                            accepted_at?: number;
                            /** offline_param */
                            offline?: Record<string, never>;
                            /** online_param */
                            online?: {
                                ip_address: string;
                                user_agent: string;
                            };
                            /** @enum {string} */
                            type: "offline" | "online";
                        };
                    } | "";
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description Set to `true` to indicate that the customer isn't in your checkout flow during this payment attempt and can't authenticate. Use this parameter in scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
                    off_session?: boolean | ("one_off" | "recurring");
                    /** @description The Stripe account ID that these funds are intended for. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
                    on_behalf_of?: string;
                    /** @description ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.
                     *
                     *     If you omit this parameter with `confirm=true`, `customer.default_source` attaches as this PaymentIntent's payment instrument to improve migration for users of the Charges API. We recommend that you explicitly provide the `payment_method` moving forward. */
                    payment_method?: string;
                    /** @description The ID of the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) to use with this PaymentIntent. */
                    payment_method_configuration?: string;
                    /**
                     * payment_method_data_params
                     * @description If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
                     *     in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
                     *     property on the PaymentIntent.
                     */
                    payment_method_data?: {
                        /** payment_method_param */
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        /** param */
                        affirm?: Record<string, never>;
                        /** param */
                        afterpay_clearpay?: Record<string, never>;
                        /** param */
                        alipay?: Record<string, never>;
                        /** @enum {string} */
                        allow_redisplay?: "always" | "limited" | "unspecified";
                        /** param */
                        alma?: Record<string, never>;
                        /** param */
                        amazon_pay?: Record<string, never>;
                        /** param */
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        /** param */
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        /** param */
                        bancontact?: Record<string, never>;
                        /** billing_details_inner_params */
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        /** param */
                        blik?: Record<string, never>;
                        /** param */
                        boleto?: {
                            tax_id: string;
                        };
                        /** param */
                        cashapp?: Record<string, never>;
                        /** param */
                        customer_balance?: Record<string, never>;
                        /** param */
                        eps?: {
                            /** @enum {string} */
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        /** param */
                        fpx?: {
                            /** @enum {string} */
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        /** param */
                        giropay?: Record<string, never>;
                        /** param */
                        grabpay?: Record<string, never>;
                        /** param */
                        ideal?: {
                            /** @enum {string} */
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        /** param */
                        interac_present?: Record<string, never>;
                        /** param */
                        kakao_pay?: Record<string, never>;
                        /** param */
                        klarna?: {
                            /** date_of_birth */
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        /** param */
                        konbini?: Record<string, never>;
                        /** param */
                        kr_card?: Record<string, never>;
                        /** param */
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** param */
                        mobilepay?: Record<string, never>;
                        /** param */
                        multibanco?: Record<string, never>;
                        /** param */
                        naver_pay?: {
                            /** @enum {string} */
                            funding?: "card" | "points";
                        };
                        /** param */
                        oxxo?: Record<string, never>;
                        /** param */
                        p24?: {
                            /** @enum {string} */
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank";
                        };
                        /** param */
                        payco?: Record<string, never>;
                        /** param */
                        paynow?: Record<string, never>;
                        /** param */
                        paypal?: Record<string, never>;
                        /** param */
                        pix?: Record<string, never>;
                        /** param */
                        promptpay?: Record<string, never>;
                        /** radar_options_with_hidden_options */
                        radar_options?: {
                            session?: string;
                        };
                        /** param */
                        revolut_pay?: Record<string, never>;
                        /** param */
                        samsung_pay?: Record<string, never>;
                        /** param */
                        sepa_debit?: {
                            iban: string;
                        };
                        /** param */
                        sofort?: {
                            /** @enum {string} */
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        /** param */
                        swish?: Record<string, never>;
                        /** param */
                        twint?: Record<string, never>;
                        /** @enum {string} */
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
                        /** payment_method_param */
                        us_bank_account?: {
                            /** @enum {string} */
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            /** @enum {string} */
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        /** param */
                        wechat_pay?: Record<string, never>;
                        /** param */
                        zip?: Record<string, never>;
                    };
                    /**
                     * payment_method_options_param
                     * @description Payment method-specific configuration for this PaymentIntent.
                     */
                    payment_method_options?: {
                        acss_debit?: {
                            /** payment_intent_payment_method_options_mandate_options_param */
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                interval_description?: string;
                                /** @enum {string} */
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                /** @enum {string} */
                                transaction_type?: "business" | "personal";
                            };
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        } | "";
                        affirm?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            preferred_locale?: string;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        afterpay_clearpay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            reference?: string;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        alipay?: {
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        alma?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        amazon_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        au_becs_debit?: {
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        bacs_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        bancontact?: {
                            /** @enum {string} */
                            preferred_language?: "de" | "en" | "fr" | "nl";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        blik?: {
                            code?: string;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none";
                        } | "";
                        boleto?: {
                            expires_after_days?: number;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        card?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            cvc_token?: string;
                            /** installments_param */
                            installments?: {
                                enabled?: boolean;
                                plan?: {
                                    count?: number;
                                    /** @enum {string} */
                                    interval?: "month";
                                    /** @enum {string} */
                                    type: "fixed_count";
                                } | "";
                            };
                            /** mandate_options_param */
                            mandate_options?: {
                                amount: number;
                                /** @enum {string} */
                                amount_type: "fixed" | "maximum";
                                description?: string;
                                /** Format: unix-time */
                                end_date?: number;
                                /** @enum {string} */
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                /** Format: unix-time */
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            /** @enum {string} */
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa";
                            /** @enum {string} */
                            request_extended_authorization?: "if_available" | "never";
                            /** @enum {string} */
                            request_incremental_authorization?: "if_available" | "never";
                            /** @enum {string} */
                            request_multicapture?: "if_available" | "never";
                            /** @enum {string} */
                            request_overcapture?: "if_available" | "never";
                            /** @enum {string} */
                            request_three_d_secure?: "any" | "automatic" | "challenge";
                            require_cvc_recollection?: boolean;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            statement_descriptor_suffix_kana?: string | "";
                            statement_descriptor_suffix_kanji?: string | "";
                            /** payment_method_options_param */
                            three_d_secure?: {
                                /** @enum {string} */
                                ares_trans_status?: "A" | "C" | "I" | "N" | "R" | "U" | "Y";
                                cryptogram: string;
                                /** @enum {string} */
                                electronic_commerce_indicator?: "01" | "02" | "05" | "06" | "07";
                                /** @enum {string} */
                                exemption_indicator?: "low_risk" | "none";
                                /** network_options_param */
                                network_options?: {
                                    /** cartes_bancaires_network_options_param */
                                    cartes_bancaires?: {
                                        /** @enum {string} */
                                        cb_avalgo: "0" | "1" | "2" | "3" | "4" | "A";
                                        cb_exemption?: string;
                                        cb_score?: number;
                                    };
                                };
                                requestor_challenge_indicator?: string;
                                transaction_id: string;
                                /** @enum {string} */
                                version: "1.0.2" | "2.1.0" | "2.2.0";
                            };
                        } | "";
                        card_present?: {
                            request_extended_authorization?: boolean;
                            request_incremental_authorization_support?: boolean;
                            /** routing_payment_method_options_param */
                            routing?: {
                                /** @enum {string} */
                                requested_priority?: "domestic" | "international";
                            };
                        } | "";
                        cashapp?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        customer_balance?: {
                            /** bank_transfer_param */
                            bank_transfer?: {
                                /** eu_bank_transfer_params */
                                eu_bank_transfer?: {
                                    country: string;
                                };
                                requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
                                /** @enum {string} */
                                type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
                            };
                            /** @enum {string} */
                            funding_type?: "bank_transfer";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        eps?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        fpx?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        giropay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        grabpay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        ideal?: {
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        interac_present?: Record<string, never> | "";
                        kakao_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        klarna?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-CH" | "de-DE" | "el-GR" | "en-AT" | "en-AU" | "en-BE" | "en-CA" | "en-CH" | "en-CZ" | "en-DE" | "en-DK" | "en-ES" | "en-FI" | "en-FR" | "en-GB" | "en-GR" | "en-IE" | "en-IT" | "en-NL" | "en-NO" | "en-NZ" | "en-PL" | "en-PT" | "en-RO" | "en-SE" | "en-US" | "es-ES" | "es-US" | "fi-FI" | "fr-BE" | "fr-CA" | "fr-CH" | "fr-FR" | "it-CH" | "it-IT" | "nb-NO" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "ro-RO" | "sv-FI" | "sv-SE";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        konbini?: {
                            confirmation_number?: string | "";
                            expires_after_days?: number | "";
                            expires_at?: number | "";
                            product_description?: string | "";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        kr_card?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        link?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        mobilepay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        multibanco?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        naver_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        oxxo?: {
                            expires_after_days?: number;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        p24?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                            tos_shown_and_accepted?: boolean;
                        } | "";
                        payco?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        paynow?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        paypal?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-DE" | "de-LU" | "el-GR" | "en-GB" | "en-US" | "es-ES" | "fi-FI" | "fr-BE" | "fr-FR" | "fr-LU" | "hu-HU" | "it-IT" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sk-SK" | "sv-SE";
                            reference?: string;
                            risk_correlation_id?: string;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        pix?: {
                            expires_after_seconds?: number;
                            /** Format: unix-time */
                            expires_at?: number;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        promptpay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        revolut_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        samsung_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        sepa_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        sofort?: {
                            /** @enum {string} */
                            preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        swish?: {
                            reference?: string | "";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        twint?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        us_bank_account?: {
                            /** linked_account_options_param */
                            financial_connections?: {
                                /** linked_account_options_filters_param */
                                filters?: {
                                    account_subcategories?: ("checking" | "savings")[];
                                };
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                prefetch?: ("balances" | "ownership" | "transactions")[];
                                return_url?: string;
                            };
                            /** mandate_options_param */
                            mandate_options?: {
                                /** @enum {string} */
                                collection_method?: "" | "paper";
                            };
                            /** networks_options_param */
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            /** @enum {string} */
                            preferred_settlement_speed?: "" | "fastest" | "standard";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        } | "";
                        wechat_pay?: {
                            app_id?: string;
                            /** @enum {string} */
                            client: "android" | "ios" | "web";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        zip?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                    };
                    /** @description The list of payment method types (for example, a card) that this PaymentIntent can use. If you don't provide this, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
                    payment_method_types?: string[];
                    /**
                     * radar_options_with_hidden_options
                     * @description Options to configure Radar. Learn more about [Radar Sessions](https://stripe.com/docs/radar/radar-session).
                     */
                    radar_options?: {
                        session?: string;
                    };
                    /** @description Email address to send the receipt to. If you specify `receipt_email` for a payment in live mode, you send a receipt regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
                    receipt_email?: string;
                    /** @description The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
                    return_url?: string;
                    /**
                     * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
                     *
                     *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
                     *
                     *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
                     *
                     *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
                     * @enum {string}
                     */
                    setup_future_usage?: "off_session" | "on_session";
                    /**
                     * optional_fields_shipping
                     * @description Shipping information for this PaymentIntent.
                     */
                    shipping?: {
                        /** optional_fields_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        carrier?: string;
                        name: string;
                        phone?: string;
                        tracking_number?: string;
                    };
                    /** @description Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
                     *
                     *     Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead. */
                    statement_descriptor?: string;
                    /** @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. */
                    statement_descriptor_suffix?: string;
                    /**
                     * transfer_data_creation_params
                     * @description The parameters that you can use to automatically create a Transfer.
                     *     Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
                     */
                    transfer_data?: {
                        amount?: number;
                        destination: string;
                    };
                    /** @description A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers). */
                    transfer_group?: string;
                    /** @description Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions. */
                    use_stripe_sdk?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentIntentsSearch: {
        parameters: {
            query: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
                page?: string;
                /** @description The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents). */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_intent"][];
                        has_more: boolean;
                        next_page?: string | null;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value.
                         * @enum {string}
                         */
                        object: "search_result";
                        /** @description The total number of objects that match the query, only accurate up to 10,000. */
                        total_count?: number;
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentIntentsIntent: {
        parameters: {
            query?: {
                /** @description The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source. */
                client_secret?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
                    amount?: number;
                    /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
                    application_fee_amount?: number | "";
                    /**
                     * @description Controls when the funds will be captured from the customer's account.
                     * @enum {string}
                     */
                    capture_method?: "automatic" | "automatic_async" | "manual";
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description ID of the Customer this PaymentIntent belongs to, if one exists.
                     *
                     *     Payment methods attached to other Customers cannot be used with this PaymentIntent.
                     *
                     *     If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead. */
                    customer?: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. To unset this field to null, pass in an empty string. */
                    payment_method?: string;
                    /** @description The ID of the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) to use with this PaymentIntent. */
                    payment_method_configuration?: string;
                    /**
                     * payment_method_data_params
                     * @description If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
                     *     in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
                     *     property on the PaymentIntent.
                     */
                    payment_method_data?: {
                        /** payment_method_param */
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        /** param */
                        affirm?: Record<string, never>;
                        /** param */
                        afterpay_clearpay?: Record<string, never>;
                        /** param */
                        alipay?: Record<string, never>;
                        /** @enum {string} */
                        allow_redisplay?: "always" | "limited" | "unspecified";
                        /** param */
                        alma?: Record<string, never>;
                        /** param */
                        amazon_pay?: Record<string, never>;
                        /** param */
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        /** param */
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        /** param */
                        bancontact?: Record<string, never>;
                        /** billing_details_inner_params */
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        /** param */
                        blik?: Record<string, never>;
                        /** param */
                        boleto?: {
                            tax_id: string;
                        };
                        /** param */
                        cashapp?: Record<string, never>;
                        /** param */
                        customer_balance?: Record<string, never>;
                        /** param */
                        eps?: {
                            /** @enum {string} */
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        /** param */
                        fpx?: {
                            /** @enum {string} */
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        /** param */
                        giropay?: Record<string, never>;
                        /** param */
                        grabpay?: Record<string, never>;
                        /** param */
                        ideal?: {
                            /** @enum {string} */
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        /** param */
                        interac_present?: Record<string, never>;
                        /** param */
                        kakao_pay?: Record<string, never>;
                        /** param */
                        klarna?: {
                            /** date_of_birth */
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        /** param */
                        konbini?: Record<string, never>;
                        /** param */
                        kr_card?: Record<string, never>;
                        /** param */
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** param */
                        mobilepay?: Record<string, never>;
                        /** param */
                        multibanco?: Record<string, never>;
                        /** param */
                        naver_pay?: {
                            /** @enum {string} */
                            funding?: "card" | "points";
                        };
                        /** param */
                        oxxo?: Record<string, never>;
                        /** param */
                        p24?: {
                            /** @enum {string} */
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank";
                        };
                        /** param */
                        payco?: Record<string, never>;
                        /** param */
                        paynow?: Record<string, never>;
                        /** param */
                        paypal?: Record<string, never>;
                        /** param */
                        pix?: Record<string, never>;
                        /** param */
                        promptpay?: Record<string, never>;
                        /** radar_options_with_hidden_options */
                        radar_options?: {
                            session?: string;
                        };
                        /** param */
                        revolut_pay?: Record<string, never>;
                        /** param */
                        samsung_pay?: Record<string, never>;
                        /** param */
                        sepa_debit?: {
                            iban: string;
                        };
                        /** param */
                        sofort?: {
                            /** @enum {string} */
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        /** param */
                        swish?: Record<string, never>;
                        /** param */
                        twint?: Record<string, never>;
                        /** @enum {string} */
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
                        /** payment_method_param */
                        us_bank_account?: {
                            /** @enum {string} */
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            /** @enum {string} */
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        /** param */
                        wechat_pay?: Record<string, never>;
                        /** param */
                        zip?: Record<string, never>;
                    };
                    /**
                     * payment_method_options_param
                     * @description Payment-method-specific configuration for this PaymentIntent.
                     */
                    payment_method_options?: {
                        acss_debit?: {
                            /** payment_intent_payment_method_options_mandate_options_param */
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                interval_description?: string;
                                /** @enum {string} */
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                /** @enum {string} */
                                transaction_type?: "business" | "personal";
                            };
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        } | "";
                        affirm?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            preferred_locale?: string;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        afterpay_clearpay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            reference?: string;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        alipay?: {
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        alma?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        amazon_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        au_becs_debit?: {
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        bacs_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        bancontact?: {
                            /** @enum {string} */
                            preferred_language?: "de" | "en" | "fr" | "nl";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        blik?: {
                            code?: string;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none";
                        } | "";
                        boleto?: {
                            expires_after_days?: number;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        card?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            cvc_token?: string;
                            /** installments_param */
                            installments?: {
                                enabled?: boolean;
                                plan?: {
                                    count?: number;
                                    /** @enum {string} */
                                    interval?: "month";
                                    /** @enum {string} */
                                    type: "fixed_count";
                                } | "";
                            };
                            /** mandate_options_param */
                            mandate_options?: {
                                amount: number;
                                /** @enum {string} */
                                amount_type: "fixed" | "maximum";
                                description?: string;
                                /** Format: unix-time */
                                end_date?: number;
                                /** @enum {string} */
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                /** Format: unix-time */
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            /** @enum {string} */
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa";
                            /** @enum {string} */
                            request_extended_authorization?: "if_available" | "never";
                            /** @enum {string} */
                            request_incremental_authorization?: "if_available" | "never";
                            /** @enum {string} */
                            request_multicapture?: "if_available" | "never";
                            /** @enum {string} */
                            request_overcapture?: "if_available" | "never";
                            /** @enum {string} */
                            request_three_d_secure?: "any" | "automatic" | "challenge";
                            require_cvc_recollection?: boolean;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            statement_descriptor_suffix_kana?: string | "";
                            statement_descriptor_suffix_kanji?: string | "";
                            /** payment_method_options_param */
                            three_d_secure?: {
                                /** @enum {string} */
                                ares_trans_status?: "A" | "C" | "I" | "N" | "R" | "U" | "Y";
                                cryptogram: string;
                                /** @enum {string} */
                                electronic_commerce_indicator?: "01" | "02" | "05" | "06" | "07";
                                /** @enum {string} */
                                exemption_indicator?: "low_risk" | "none";
                                /** network_options_param */
                                network_options?: {
                                    /** cartes_bancaires_network_options_param */
                                    cartes_bancaires?: {
                                        /** @enum {string} */
                                        cb_avalgo: "0" | "1" | "2" | "3" | "4" | "A";
                                        cb_exemption?: string;
                                        cb_score?: number;
                                    };
                                };
                                requestor_challenge_indicator?: string;
                                transaction_id: string;
                                /** @enum {string} */
                                version: "1.0.2" | "2.1.0" | "2.2.0";
                            };
                        } | "";
                        card_present?: {
                            request_extended_authorization?: boolean;
                            request_incremental_authorization_support?: boolean;
                            /** routing_payment_method_options_param */
                            routing?: {
                                /** @enum {string} */
                                requested_priority?: "domestic" | "international";
                            };
                        } | "";
                        cashapp?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        customer_balance?: {
                            /** bank_transfer_param */
                            bank_transfer?: {
                                /** eu_bank_transfer_params */
                                eu_bank_transfer?: {
                                    country: string;
                                };
                                requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
                                /** @enum {string} */
                                type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
                            };
                            /** @enum {string} */
                            funding_type?: "bank_transfer";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        eps?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        fpx?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        giropay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        grabpay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        ideal?: {
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        interac_present?: Record<string, never> | "";
                        kakao_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        klarna?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-CH" | "de-DE" | "el-GR" | "en-AT" | "en-AU" | "en-BE" | "en-CA" | "en-CH" | "en-CZ" | "en-DE" | "en-DK" | "en-ES" | "en-FI" | "en-FR" | "en-GB" | "en-GR" | "en-IE" | "en-IT" | "en-NL" | "en-NO" | "en-NZ" | "en-PL" | "en-PT" | "en-RO" | "en-SE" | "en-US" | "es-ES" | "es-US" | "fi-FI" | "fr-BE" | "fr-CA" | "fr-CH" | "fr-FR" | "it-CH" | "it-IT" | "nb-NO" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "ro-RO" | "sv-FI" | "sv-SE";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        konbini?: {
                            confirmation_number?: string | "";
                            expires_after_days?: number | "";
                            expires_at?: number | "";
                            product_description?: string | "";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        kr_card?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        link?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        mobilepay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        multibanco?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        naver_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        oxxo?: {
                            expires_after_days?: number;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        p24?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                            tos_shown_and_accepted?: boolean;
                        } | "";
                        payco?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        paynow?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        paypal?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-DE" | "de-LU" | "el-GR" | "en-GB" | "en-US" | "es-ES" | "fi-FI" | "fr-BE" | "fr-FR" | "fr-LU" | "hu-HU" | "it-IT" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sk-SK" | "sv-SE";
                            reference?: string;
                            risk_correlation_id?: string;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        pix?: {
                            expires_after_seconds?: number;
                            /** Format: unix-time */
                            expires_at?: number;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        promptpay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        revolut_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        samsung_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        sepa_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        sofort?: {
                            /** @enum {string} */
                            preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        swish?: {
                            reference?: string | "";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        twint?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        us_bank_account?: {
                            /** linked_account_options_param */
                            financial_connections?: {
                                /** linked_account_options_filters_param */
                                filters?: {
                                    account_subcategories?: ("checking" | "savings")[];
                                };
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                prefetch?: ("balances" | "ownership" | "transactions")[];
                                return_url?: string;
                            };
                            /** mandate_options_param */
                            mandate_options?: {
                                /** @enum {string} */
                                collection_method?: "" | "paper";
                            };
                            /** networks_options_param */
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            /** @enum {string} */
                            preferred_settlement_speed?: "" | "fastest" | "standard";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        } | "";
                        wechat_pay?: {
                            app_id?: string;
                            /** @enum {string} */
                            client: "android" | "ios" | "web";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        zip?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                    };
                    /** @description The list of payment method types (for example, card) that this PaymentIntent can use. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). */
                    payment_method_types?: string[];
                    /** @description Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
                    receipt_email?: string | "";
                    /**
                     * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
                     *
                     *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
                     *
                     *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
                     *
                     *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
                     *
                     *     If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
                     * @enum {string}
                     */
                    setup_future_usage?: "" | "off_session" | "on_session";
                    /** @description Shipping information for this PaymentIntent. */
                    shipping?: {
                        /** optional_fields_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        carrier?: string;
                        name: string;
                        phone?: string;
                        tracking_number?: string;
                    } | "";
                    /** @description Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
                     *
                     *     Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead. */
                    statement_descriptor?: string;
                    /** @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. */
                    statement_descriptor_suffix?: string;
                    /**
                     * transfer_data_update_params
                     * @description Use this parameter to automatically create a Transfer when the payment succeeds. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
                     */
                    transfer_data?: {
                        amount?: number;
                    };
                    /** @description A string that identifies the resulting payment as part of a group. You can only provide `transfer_group` if it hasn't been set. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
                    transfer_group?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentApplyCustomerBalance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount that you intend to apply to this PaymentIntent from the customer’s cash balance. If the PaymentIntent was created by an Invoice, the full amount of the PaymentIntent is applied regardless of this parameter.
                     *
                     *     A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency). The maximum amount is the amount of the PaymentIntent.
                     *
                     *     When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent. */
                    amount?: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description Reason for canceling this PaymentIntent. Possible values are: `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`
                     * @enum {string}
                     */
                    cancellation_reason?: "abandoned" | "duplicate" | "fraudulent" | "requested_by_customer";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentCapture: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount is automatically refunded. Defaults to the full `amount_capturable` if it's not provided. */
                    amount_to_capture?: number;
                    /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
                    application_fee_amount?: number;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Defaults to `true`. When capturing a PaymentIntent, setting `final_capture` to `false` notifies Stripe to not release the remaining uncaptured funds to make sure that they're captured in future requests. You can only use this setting when [multicapture](https://stripe.com/docs/payments/multicapture) is available for PaymentIntents. */
                    final_capture?: boolean;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
                     *
                     *     Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead. */
                    statement_descriptor?: string;
                    /** @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. */
                    statement_descriptor_suffix?: string;
                    /**
                     * transfer_data_update_params
                     * @description The parameters that you can use to automatically create a transfer after the payment
                     *     is captured. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
                     */
                    transfer_data?: {
                        amount?: number;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentConfirm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description Controls when the funds will be captured from the customer's account.
                     * @enum {string}
                     */
                    capture_method?: "automatic" | "automatic_async" | "manual";
                    /** @description The client secret of the PaymentIntent. */
                    client_secret?: string;
                    /** @description ID of the ConfirmationToken used to confirm this PaymentIntent.
                     *
                     *     If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence. */
                    confirmation_token?: string;
                    /** @description Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). */
                    error_on_requires_action?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description ID of the mandate that's used for this payment. */
                    mandate?: string;
                    mandate_data?: {
                        /** customer_acceptance_param */
                        customer_acceptance: {
                            /** Format: unix-time */
                            accepted_at?: number;
                            /** offline_param */
                            offline?: Record<string, never>;
                            /** online_param */
                            online?: {
                                ip_address: string;
                                user_agent: string;
                            };
                            /** @enum {string} */
                            type: "offline" | "online";
                        };
                    } | "" | {
                        /** customer_acceptance_param */
                        customer_acceptance: {
                            /** online_param */
                            online: {
                                ip_address?: string;
                                user_agent?: string;
                            };
                            /** @enum {string} */
                            type: "online";
                        };
                    };
                    /** @description Set to `true` to indicate that the customer isn't in your checkout flow during this payment attempt and can't authenticate. Use this parameter in scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). */
                    off_session?: boolean | ("one_off" | "recurring");
                    /** @description ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. */
                    payment_method?: string;
                    /**
                     * payment_method_data_params
                     * @description If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
                     *     in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
                     *     property on the PaymentIntent.
                     */
                    payment_method_data?: {
                        /** payment_method_param */
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        /** param */
                        affirm?: Record<string, never>;
                        /** param */
                        afterpay_clearpay?: Record<string, never>;
                        /** param */
                        alipay?: Record<string, never>;
                        /** @enum {string} */
                        allow_redisplay?: "always" | "limited" | "unspecified";
                        /** param */
                        alma?: Record<string, never>;
                        /** param */
                        amazon_pay?: Record<string, never>;
                        /** param */
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        /** param */
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        /** param */
                        bancontact?: Record<string, never>;
                        /** billing_details_inner_params */
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        /** param */
                        blik?: Record<string, never>;
                        /** param */
                        boleto?: {
                            tax_id: string;
                        };
                        /** param */
                        cashapp?: Record<string, never>;
                        /** param */
                        customer_balance?: Record<string, never>;
                        /** param */
                        eps?: {
                            /** @enum {string} */
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        /** param */
                        fpx?: {
                            /** @enum {string} */
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        /** param */
                        giropay?: Record<string, never>;
                        /** param */
                        grabpay?: Record<string, never>;
                        /** param */
                        ideal?: {
                            /** @enum {string} */
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        /** param */
                        interac_present?: Record<string, never>;
                        /** param */
                        kakao_pay?: Record<string, never>;
                        /** param */
                        klarna?: {
                            /** date_of_birth */
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        /** param */
                        konbini?: Record<string, never>;
                        /** param */
                        kr_card?: Record<string, never>;
                        /** param */
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** param */
                        mobilepay?: Record<string, never>;
                        /** param */
                        multibanco?: Record<string, never>;
                        /** param */
                        naver_pay?: {
                            /** @enum {string} */
                            funding?: "card" | "points";
                        };
                        /** param */
                        oxxo?: Record<string, never>;
                        /** param */
                        p24?: {
                            /** @enum {string} */
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank";
                        };
                        /** param */
                        payco?: Record<string, never>;
                        /** param */
                        paynow?: Record<string, never>;
                        /** param */
                        paypal?: Record<string, never>;
                        /** param */
                        pix?: Record<string, never>;
                        /** param */
                        promptpay?: Record<string, never>;
                        /** radar_options_with_hidden_options */
                        radar_options?: {
                            session?: string;
                        };
                        /** param */
                        revolut_pay?: Record<string, never>;
                        /** param */
                        samsung_pay?: Record<string, never>;
                        /** param */
                        sepa_debit?: {
                            iban: string;
                        };
                        /** param */
                        sofort?: {
                            /** @enum {string} */
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        /** param */
                        swish?: Record<string, never>;
                        /** param */
                        twint?: Record<string, never>;
                        /** @enum {string} */
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
                        /** payment_method_param */
                        us_bank_account?: {
                            /** @enum {string} */
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            /** @enum {string} */
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        /** param */
                        wechat_pay?: Record<string, never>;
                        /** param */
                        zip?: Record<string, never>;
                    };
                    /**
                     * payment_method_options_param
                     * @description Payment method-specific configuration for this PaymentIntent.
                     */
                    payment_method_options?: {
                        acss_debit?: {
                            /** payment_intent_payment_method_options_mandate_options_param */
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                interval_description?: string;
                                /** @enum {string} */
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                /** @enum {string} */
                                transaction_type?: "business" | "personal";
                            };
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        } | "";
                        affirm?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            preferred_locale?: string;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        afterpay_clearpay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            reference?: string;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        alipay?: {
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        alma?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        amazon_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        au_becs_debit?: {
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        bacs_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        bancontact?: {
                            /** @enum {string} */
                            preferred_language?: "de" | "en" | "fr" | "nl";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        blik?: {
                            code?: string;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none";
                        } | "";
                        boleto?: {
                            expires_after_days?: number;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        card?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            cvc_token?: string;
                            /** installments_param */
                            installments?: {
                                enabled?: boolean;
                                plan?: {
                                    count?: number;
                                    /** @enum {string} */
                                    interval?: "month";
                                    /** @enum {string} */
                                    type: "fixed_count";
                                } | "";
                            };
                            /** mandate_options_param */
                            mandate_options?: {
                                amount: number;
                                /** @enum {string} */
                                amount_type: "fixed" | "maximum";
                                description?: string;
                                /** Format: unix-time */
                                end_date?: number;
                                /** @enum {string} */
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                /** Format: unix-time */
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            /** @enum {string} */
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa";
                            /** @enum {string} */
                            request_extended_authorization?: "if_available" | "never";
                            /** @enum {string} */
                            request_incremental_authorization?: "if_available" | "never";
                            /** @enum {string} */
                            request_multicapture?: "if_available" | "never";
                            /** @enum {string} */
                            request_overcapture?: "if_available" | "never";
                            /** @enum {string} */
                            request_three_d_secure?: "any" | "automatic" | "challenge";
                            require_cvc_recollection?: boolean;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            statement_descriptor_suffix_kana?: string | "";
                            statement_descriptor_suffix_kanji?: string | "";
                            /** payment_method_options_param */
                            three_d_secure?: {
                                /** @enum {string} */
                                ares_trans_status?: "A" | "C" | "I" | "N" | "R" | "U" | "Y";
                                cryptogram: string;
                                /** @enum {string} */
                                electronic_commerce_indicator?: "01" | "02" | "05" | "06" | "07";
                                /** @enum {string} */
                                exemption_indicator?: "low_risk" | "none";
                                /** network_options_param */
                                network_options?: {
                                    /** cartes_bancaires_network_options_param */
                                    cartes_bancaires?: {
                                        /** @enum {string} */
                                        cb_avalgo: "0" | "1" | "2" | "3" | "4" | "A";
                                        cb_exemption?: string;
                                        cb_score?: number;
                                    };
                                };
                                requestor_challenge_indicator?: string;
                                transaction_id: string;
                                /** @enum {string} */
                                version: "1.0.2" | "2.1.0" | "2.2.0";
                            };
                        } | "";
                        card_present?: {
                            request_extended_authorization?: boolean;
                            request_incremental_authorization_support?: boolean;
                            /** routing_payment_method_options_param */
                            routing?: {
                                /** @enum {string} */
                                requested_priority?: "domestic" | "international";
                            };
                        } | "";
                        cashapp?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        customer_balance?: {
                            /** bank_transfer_param */
                            bank_transfer?: {
                                /** eu_bank_transfer_params */
                                eu_bank_transfer?: {
                                    country: string;
                                };
                                requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
                                /** @enum {string} */
                                type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
                            };
                            /** @enum {string} */
                            funding_type?: "bank_transfer";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        eps?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        fpx?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        giropay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        grabpay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        ideal?: {
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        interac_present?: Record<string, never> | "";
                        kakao_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        klarna?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-CH" | "de-DE" | "el-GR" | "en-AT" | "en-AU" | "en-BE" | "en-CA" | "en-CH" | "en-CZ" | "en-DE" | "en-DK" | "en-ES" | "en-FI" | "en-FR" | "en-GB" | "en-GR" | "en-IE" | "en-IT" | "en-NL" | "en-NO" | "en-NZ" | "en-PL" | "en-PT" | "en-RO" | "en-SE" | "en-US" | "es-ES" | "es-US" | "fi-FI" | "fr-BE" | "fr-CA" | "fr-CH" | "fr-FR" | "it-CH" | "it-IT" | "nb-NO" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "ro-RO" | "sv-FI" | "sv-SE";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        konbini?: {
                            confirmation_number?: string | "";
                            expires_after_days?: number | "";
                            expires_at?: number | "";
                            product_description?: string | "";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        kr_card?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        link?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        mobilepay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        multibanco?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        naver_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        oxxo?: {
                            expires_after_days?: number;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        p24?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                            tos_shown_and_accepted?: boolean;
                        } | "";
                        payco?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        paynow?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        paypal?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-DE" | "de-LU" | "el-GR" | "en-GB" | "en-US" | "es-ES" | "fi-FI" | "fr-BE" | "fr-FR" | "fr-LU" | "hu-HU" | "it-IT" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sk-SK" | "sv-SE";
                            reference?: string;
                            risk_correlation_id?: string;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        pix?: {
                            expires_after_seconds?: number;
                            /** Format: unix-time */
                            expires_at?: number;
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        promptpay?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        revolut_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        samsung_pay?: {
                            /** @enum {string} */
                            capture_method?: "" | "manual";
                        } | "";
                        sepa_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        } | "";
                        sofort?: {
                            /** @enum {string} */
                            preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session";
                        } | "";
                        swish?: {
                            reference?: string | "";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        twint?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        us_bank_account?: {
                            /** linked_account_options_param */
                            financial_connections?: {
                                /** linked_account_options_filters_param */
                                filters?: {
                                    account_subcategories?: ("checking" | "savings")[];
                                };
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                prefetch?: ("balances" | "ownership" | "transactions")[];
                                return_url?: string;
                            };
                            /** mandate_options_param */
                            mandate_options?: {
                                /** @enum {string} */
                                collection_method?: "" | "paper";
                            };
                            /** networks_options_param */
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            /** @enum {string} */
                            preferred_settlement_speed?: "" | "fastest" | "standard";
                            /** @enum {string} */
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        } | "";
                        wechat_pay?: {
                            app_id?: string;
                            /** @enum {string} */
                            client: "android" | "ios" | "web";
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                        zip?: {
                            /** @enum {string} */
                            setup_future_usage?: "none";
                        } | "";
                    };
                    /** @description The list of payment method types (for example, a card) that this PaymentIntent can use. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). */
                    payment_method_types?: string[];
                    /**
                     * radar_options_with_hidden_options
                     * @description Options to configure Radar. Learn more about [Radar Sessions](https://stripe.com/docs/radar/radar-session).
                     */
                    radar_options?: {
                        session?: string;
                    };
                    /** @description Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
                    receipt_email?: string | "";
                    /** @description The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
                     *     If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
                     *     This parameter is only used for cards and other redirect-based payment methods. */
                    return_url?: string;
                    /**
                     * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
                     *
                     *     If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
                     *
                     *     If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
                     *
                     *     When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
                     *
                     *     If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
                     * @enum {string}
                     */
                    setup_future_usage?: "" | "off_session" | "on_session";
                    /** @description Shipping information for this PaymentIntent. */
                    shipping?: {
                        /** optional_fields_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        carrier?: string;
                        name: string;
                        phone?: string;
                        tracking_number?: string;
                    } | "";
                    /** @description Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions. */
                    use_stripe_sdk?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentIncrementAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount. */
                    amount: number;
                    /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
                    application_fee_amount?: number;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description Text that appears on the customer's statement as the statement descriptor for a non-card or card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors). */
                    statement_descriptor?: string;
                    /**
                     * transfer_data_update_params
                     * @description The parameters used to automatically create a transfer after the payment is captured.
                     *     Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
                     */
                    transfer_data?: {
                        amount?: number;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentVerifyMicrodeposits: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
                    amounts?: number[];
                    /** @description The client secret of the PaymentIntent. */
                    client_secret?: string;
                    /** @description A six-character code starting with SM present in the microdeposit sent to the bank account. */
                    descriptor_code?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentLinks: {
        parameters: {
            query?: {
                /** @description Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links). */
                active?: boolean;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_link"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * after_completion_params
                     * @description Behavior after the purchase is complete.
                     */
                    after_completion?: {
                        /** after_completion_confirmation_page_params */
                        hosted_confirmation?: {
                            custom_message?: string;
                        };
                        /** after_completion_redirect_params */
                        redirect?: {
                            url: string;
                        };
                        /** @enum {string} */
                        type: "hosted_confirmation" | "redirect";
                    };
                    /** @description Enables user redeemable promotion codes. */
                    allow_promotion_codes?: boolean;
                    /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Can only be applied when there are no line items with recurring prices. */
                    application_fee_amount?: number;
                    /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field. */
                    application_fee_percent?: number;
                    /**
                     * automatic_tax_params
                     * @description Configuration for automatic tax collection.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * @description Configuration for collecting the customer's billing address. Defaults to `auto`.
                     * @enum {string}
                     */
                    billing_address_collection?: "auto" | "required";
                    /**
                     * consent_collection_params
                     * @description Configure fields to gather active consent from customers.
                     */
                    consent_collection?: {
                        /** payment_method_reuse_agreement_params */
                        payment_method_reuse_agreement?: {
                            /** @enum {string} */
                            position: "auto" | "hidden";
                        };
                        /** @enum {string} */
                        promotions?: "auto" | "none";
                        /** @enum {string} */
                        terms_of_service?: "none" | "required";
                    };
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies) and supported by each line item's price. */
                    currency?: string;
                    /** @description Collect additional information from your customer using custom fields. Up to 3 fields are supported. */
                    custom_fields?: {
                        /** custom_field_dropdown_param */
                        dropdown?: {
                            options: {
                                label: string;
                                value: string;
                            }[];
                        };
                        key: string;
                        /** custom_field_label_param */
                        label: {
                            custom: string;
                            /** @enum {string} */
                            type: "custom";
                        };
                        /** custom_field_numeric_param */
                        numeric?: {
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        optional?: boolean;
                        /** custom_field_text_param */
                        text?: {
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        /** @enum {string} */
                        type: "dropdown" | "numeric" | "text";
                    }[];
                    /**
                     * custom_text_param
                     * @description Display additional text for your customers using custom text.
                     */
                    custom_text?: {
                        after_submit?: {
                            message: string;
                        } | "";
                        shipping_address?: {
                            message: string;
                        } | "";
                        submit?: {
                            message: string;
                        } | "";
                        terms_of_service_acceptance?: {
                            message: string;
                        } | "";
                    };
                    /**
                     * @description Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
                     * @enum {string}
                     */
                    customer_creation?: "always" | "if_required";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The custom message to be displayed to a customer when a payment link is no longer active. */
                    inactive_message?: string;
                    /**
                     * invoice_creation_create_params
                     * @description Generate a post-purchase Invoice for one-time payments.
                     */
                    invoice_creation?: {
                        enabled: boolean;
                        /** invoice_settings_params */
                        invoice_data?: {
                            account_tax_ids?: string[] | "";
                            custom_fields?: {
                                name: string;
                                value: string;
                            }[] | "";
                            description?: string;
                            footer?: string;
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                            metadata?: {
                                [key: string]: string;
                            } | "";
                            rendering_options?: {
                                /** @enum {string} */
                                amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                            } | "";
                        };
                    };
                    /** @description The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported. */
                    line_items: {
                        /** adjustable_quantity_params */
                        adjustable_quantity?: {
                            enabled: boolean;
                            maximum?: number;
                            minimum?: number;
                        };
                        price: string;
                        quantity: number;
                    }[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The account on behalf of which to charge. */
                    on_behalf_of?: string;
                    /**
                     * payment_intent_data_params
                     * @description A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode.
                     */
                    payment_intent_data?: {
                        /** @enum {string} */
                        capture_method?: "automatic" | "automatic_async" | "manual";
                        description?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** @enum {string} */
                        setup_future_usage?: "off_session" | "on_session";
                        statement_descriptor?: string;
                        statement_descriptor_suffix?: string;
                        transfer_group?: string;
                    };
                    /**
                     * @description Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.
                     *
                     *     Can only be set in `subscription` mode. Defaults to `always`.
                     *
                     *     If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
                     * @enum {string}
                     */
                    payment_method_collection?: "always" | "if_required";
                    /** @description The list of payment method types that customers can use. If no value is passed, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods) (20+ payment methods [supported](https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support)). */
                    payment_method_types?: ("affirm" | "afterpay_clearpay" | "alipay" | "alma" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "mobilepay" | "multibanco" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip")[];
                    /**
                     * phone_number_collection_params
                     * @description Controls phone number collection settings during checkout.
                     *
                     *     We recommend that you review your privacy policy and check with your legal contacts.
                     */
                    phone_number_collection?: {
                        enabled: boolean;
                    };
                    /**
                     * restrictions_params
                     * @description Settings that restrict the usage of a payment link.
                     */
                    restrictions?: {
                        /** completed_sessions_params */
                        completed_sessions: {
                            limit: number;
                        };
                    };
                    /**
                     * shipping_address_collection_params
                     * @description Configuration for collecting the customer's shipping address.
                     */
                    shipping_address_collection?: {
                        allowed_countries: ("AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MK" | "ML" | "MM" | "MN" | "MO" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | "ZZ")[];
                    };
                    /** @description The shipping rate options to apply to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link. */
                    shipping_options?: {
                        shipping_rate?: string;
                    }[];
                    /**
                     * @description Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`).
                     * @enum {string}
                     */
                    submit_type?: "auto" | "book" | "donate" | "pay" | "subscribe";
                    /**
                     * subscription_data_params
                     * @description When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`.
                     */
                    subscription_data?: {
                        description?: string;
                        /** subscription_data_invoice_settings_params */
                        invoice_settings?: {
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        metadata?: {
                            [key: string]: string;
                        };
                        trial_period_days?: number;
                        /** trial_settings_config */
                        trial_settings?: {
                            /** end_behavior */
                            end_behavior: {
                                /** @enum {string} */
                                missing_payment_method: "cancel" | "create_invoice" | "pause";
                            };
                        };
                    };
                    /**
                     * tax_id_collection_params
                     * @description Controls tax ID collection during checkout.
                     */
                    tax_id_collection?: {
                        enabled: boolean;
                        /** @enum {string} */
                        required?: "if_supported" | "never";
                    };
                    /**
                     * transfer_data_params
                     * @description The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to.
                     */
                    transfer_data?: {
                        amount?: number;
                        destination: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_link"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentLinksPaymentLink: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                payment_link: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_link"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentLinksPaymentLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payment_link: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated. */
                    active?: boolean;
                    /**
                     * after_completion_params
                     * @description Behavior after the purchase is complete.
                     */
                    after_completion?: {
                        /** after_completion_confirmation_page_params */
                        hosted_confirmation?: {
                            custom_message?: string;
                        };
                        /** after_completion_redirect_params */
                        redirect?: {
                            url: string;
                        };
                        /** @enum {string} */
                        type: "hosted_confirmation" | "redirect";
                    };
                    /** @description Enables user redeemable promotion codes. */
                    allow_promotion_codes?: boolean;
                    /**
                     * automatic_tax_params
                     * @description Configuration for automatic tax collection.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * @description Configuration for collecting the customer's billing address. Defaults to `auto`.
                     * @enum {string}
                     */
                    billing_address_collection?: "auto" | "required";
                    /** @description Collect additional information from your customer using custom fields. Up to 3 fields are supported. */
                    custom_fields?: {
                        /** custom_field_dropdown_param */
                        dropdown?: {
                            options: {
                                label: string;
                                value: string;
                            }[];
                        };
                        key: string;
                        /** custom_field_label_param */
                        label: {
                            custom: string;
                            /** @enum {string} */
                            type: "custom";
                        };
                        /** custom_field_numeric_param */
                        numeric?: {
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        optional?: boolean;
                        /** custom_field_text_param */
                        text?: {
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        /** @enum {string} */
                        type: "dropdown" | "numeric" | "text";
                    }[] | "";
                    /**
                     * custom_text_param
                     * @description Display additional text for your customers using custom text.
                     */
                    custom_text?: {
                        after_submit?: {
                            message: string;
                        } | "";
                        shipping_address?: {
                            message: string;
                        } | "";
                        submit?: {
                            message: string;
                        } | "";
                        terms_of_service_acceptance?: {
                            message: string;
                        } | "";
                    };
                    /**
                     * @description Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
                     * @enum {string}
                     */
                    customer_creation?: "always" | "if_required";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The custom message to be displayed to a customer when a payment link is no longer active. */
                    inactive_message?: string | "";
                    /**
                     * invoice_creation_update_params
                     * @description Generate a post-purchase Invoice for one-time payments.
                     */
                    invoice_creation?: {
                        enabled: boolean;
                        /** invoice_settings_params */
                        invoice_data?: {
                            account_tax_ids?: string[] | "";
                            custom_fields?: {
                                name: string;
                                value: string;
                            }[] | "";
                            description?: string;
                            footer?: string;
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                            metadata?: {
                                [key: string]: string;
                            } | "";
                            rendering_options?: {
                                /** @enum {string} */
                                amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                            } | "";
                        };
                    };
                    /** @description The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported. */
                    line_items?: {
                        /** adjustable_quantity_params */
                        adjustable_quantity?: {
                            enabled: boolean;
                            maximum?: number;
                            minimum?: number;
                        };
                        id: string;
                        quantity?: number;
                    }[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * payment_intent_data_update_params
                     * @description A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode.
                     */
                    payment_intent_data?: {
                        description?: string | "";
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        statement_descriptor?: string | "";
                        statement_descriptor_suffix?: string | "";
                        transfer_group?: string | "";
                    };
                    /**
                     * @description Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.
                     *
                     *     Can only be set in `subscription` mode. Defaults to `always`.
                     *
                     *     If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
                     * @enum {string}
                     */
                    payment_method_collection?: "always" | "if_required";
                    /** @description The list of payment method types that customers can use. Pass an empty string to enable dynamic payment methods that use your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
                    payment_method_types?: ("affirm" | "afterpay_clearpay" | "alipay" | "alma" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "mobilepay" | "multibanco" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip")[] | "";
                    /** @description Settings that restrict the usage of a payment link. */
                    restrictions?: {
                        /** completed_sessions_params */
                        completed_sessions: {
                            limit: number;
                        };
                    } | "";
                    /** @description Configuration for collecting the customer's shipping address. */
                    shipping_address_collection?: {
                        allowed_countries: ("AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MK" | "ML" | "MM" | "MN" | "MO" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | "ZZ")[];
                    } | "";
                    /**
                     * @description Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`).
                     * @enum {string}
                     */
                    submit_type?: "auto" | "book" | "donate" | "pay" | "subscribe";
                    /**
                     * subscription_data_update_params
                     * @description When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`.
                     */
                    subscription_data?: {
                        /** subscription_data_invoice_settings_params */
                        invoice_settings?: {
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        trial_settings?: {
                            /** end_behavior */
                            end_behavior: {
                                /** @enum {string} */
                                missing_payment_method: "cancel" | "create_invoice" | "pause";
                            };
                        } | "";
                    };
                    /**
                     * tax_id_collection_params
                     * @description Controls tax ID collection during checkout.
                     */
                    tax_id_collection?: {
                        enabled: boolean;
                        /** @enum {string} */
                        required?: "if_supported" | "never";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_link"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentLinksPaymentLinkLineItems: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                payment_link: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentMethodConfigurations: {
        parameters: {
            query?: {
                /** @description The Connect application to filter by. */
                application?: string | "";
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_method_configuration"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodConfigurations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * payment_method_param
                     * @description Canadian pre-authorized debit payments, check this [page](https://stripe.com/docs/payments/acss-debit) for more details like country availability.
                     */
                    acss_debit?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description [Affirm](https://www.affirm.com/) gives your customers a way to split purchases over a series of payments. Depending on the purchase, they can pay with four interest-free payments (Split Pay) or pay over a longer term (Installments), which might include interest. Check this [page](https://stripe.com/docs/payments/affirm) for more details like country availability.
                     */
                    affirm?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Afterpay gives your customers a way to pay for purchases in installments, check this [page](https://stripe.com/docs/payments/afterpay-clearpay) for more details like country availability. Afterpay is particularly popular among businesses selling fashion, beauty, and sports products.
                     */
                    afterpay_clearpay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Alipay is a digital wallet in China that has more than a billion active users worldwide. Alipay users can pay on the web or on a mobile device using login credentials or their Alipay app. Alipay has a low dispute rate and reduces fraud by authenticating payments using the customer's login credentials. Check this [page](https://stripe.com/docs/payments/alipay) for more details.
                     */
                    alipay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Alma is a Buy Now, Pay Later payment method that offers customers the ability to pay in 2, 3, or 4 installments.
                     */
                    alma?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Amazon Pay is a wallet payment method that lets your customers check out the same way as on Amazon.
                     */
                    amazon_pay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users can accept [Apple Pay](/payments/apple-pay) in iOS applications in iOS 9 and later, and on the web in Safari starting with iOS 10 or macOS Sierra. There are no additional fees to process Apple Pay payments, and the [pricing](/pricing) is the same as other card transactions. Check this [page](https://stripe.com/docs/apple-pay) for more details.
                     */
                    apple_pay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Apple Pay Later, a payment method for customers to buy now and pay later, gives your customers a way to split purchases into four installments across six weeks.
                     */
                    apple_pay_later?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users in Australia can accept Bulk Electronic Clearing System (BECS) direct debit payments from customers with an Australian bank account. Check this [page](https://stripe.com/docs/payments/au-becs-debit) for more details.
                     */
                    au_becs_debit?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users in the UK can accept Bacs Direct Debit payments from customers with a UK bank account, check this [page](https://stripe.com/docs/payments/payment-methods/bacs-debit) for more details.
                     */
                    bacs_debit?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Bancontact is the most popular online payment method in Belgium, with over 15 million cards in circulation. [Customers](https://stripe.com/docs/api/customers) use a Bancontact card or mobile app linked to a Belgian bank account to make online payments that are secure, guaranteed, and confirmed immediately. Check this [page](https://stripe.com/docs/payments/bancontact) for more details.
                     */
                    bancontact?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description BLIK is a [single use](https://stripe.com/docs/payments/payment-methods#usage) payment method that requires customers to authenticate their payments. When customers want to pay online using BLIK, they request a six-digit code from their banking application and enter it into the payment collection form. Check this [page](https://stripe.com/docs/payments/blik) for more details.
                     */
                    blik?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Boleto is an official (regulated by the Central Bank of Brazil) payment method in Brazil. Check this [page](https://stripe.com/docs/payments/boleto) for more details.
                     */
                    boleto?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Cards are a popular way for consumers and businesses to pay online or in person. Stripe supports global and local card networks.
                     */
                    card?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Cartes Bancaires is France's local card network. More than 95% of these cards are co-branded with either Visa or Mastercard, meaning you can process these cards over either Cartes Bancaires or the Visa or Mastercard networks. Check this [page](https://stripe.com/docs/payments/cartes-bancaires) for more details.
                     */
                    cartes_bancaires?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Cash App is a popular consumer app in the US that allows customers to bank, invest, send, and receive money using their digital wallet. Check this [page](https://stripe.com/docs/payments/cash-app-pay) for more details.
                     */
                    cashapp?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Uses a customer’s [cash balance](https://stripe.com/docs/payments/customer-balance) for the payment. The cash balance can be funded via a bank transfer. Check this [page](https://stripe.com/docs/payments/bank-transfers) for more details.
                     */
                    customer_balance?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description EPS is an Austria-based payment method that allows customers to complete transactions online using their bank credentials. EPS is supported by all Austrian banks and is accepted by over 80% of Austrian online retailers. Check this [page](https://stripe.com/docs/payments/eps) for more details.
                     */
                    eps?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * payment_method_param
                     * @description Financial Process Exchange (FPX) is a Malaysia-based payment method that allows customers to complete transactions online using their bank credentials. Bank Negara Malaysia (BNM), the Central Bank of Malaysia, and eleven other major Malaysian financial institutions are members of the PayNet Group, which owns and operates FPX. It is one of the most popular online payment methods in Malaysia, with nearly 90 million transactions in 2018 according to BNM. Check this [page](https://stripe.com/docs/payments/fpx) for more details.
                     */
                    fpx?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description giropay is a German payment method based on online banking, introduced in 2006. It allows customers to complete transactions online using their online banking environment, with funds debited from their bank account. Depending on their bank, customers confirm payments on giropay using a second factor of authentication or a PIN. giropay accounts for 10% of online checkouts in Germany. Check this [page](https://stripe.com/docs/payments/giropay) for more details.
                     */
                    giropay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Google Pay allows customers to make payments in your app or website using any credit or debit card saved to their Google Account, including those from Google Play, YouTube, Chrome, or an Android device. Use the Google Pay API to request any credit or debit card stored in your customer's Google account. Check this [page](https://stripe.com/docs/google-pay) for more details.
                     */
                    google_pay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description GrabPay is a payment method developed by [Grab](https://www.grab.com/sg/consumer/finance/pay/). GrabPay is a digital wallet - customers maintain a balance in their wallets that they pay out with. Check this [page](https://stripe.com/docs/payments/grabpay) for more details.
                     */
                    grabpay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description iDEAL is a Netherlands-based payment method that allows customers to complete transactions online using their bank credentials. All major Dutch banks are members of Currence, the scheme that operates iDEAL, making it the most popular online payment method in the Netherlands with a share of online transactions close to 55%. Check this [page](https://stripe.com/docs/payments/ideal) for more details.
                     */
                    ideal?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description JCB is a credit card company based in Japan. JCB is currently available in Japan to businesses approved by JCB, and available to all businesses in Australia, Canada, Hong Kong, Japan, New Zealand, Singapore, Switzerland, United Kingdom, United States, and all countries in the European Economic Area except Iceland. Check this [page](https://support.stripe.com/questions/accepting-japan-credit-bureau-%28jcb%29-payments) for more details.
                     */
                    jcb?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Klarna gives customers a range of [payment options](https://stripe.com/docs/payments/klarna#payment-options) during checkout. Available payment options vary depending on the customer's billing address and the transaction amount. These payment options make it convenient for customers to purchase items in all price ranges. Check this [page](https://stripe.com/docs/payments/klarna) for more details.
                     */
                    klarna?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Konbini allows customers in Japan to pay for bills and online purchases at convenience stores with cash. Check this [page](https://stripe.com/docs/payments/konbini) for more details.
                     */
                    konbini?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description [Link](https://stripe.com/docs/payments/link) is a payment method network. With Link, users save their payment details once, then reuse that information to pay with one click for any business on the network.
                     */
                    link?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description MobilePay is a [single-use](https://stripe.com/docs/payments/payment-methods#usage) card wallet payment method used in Denmark and Finland. It allows customers to [authenticate and approve](https://stripe.com/docs/payments/payment-methods#customer-actions) payments using the MobilePay app. Check this [page](https://stripe.com/docs/payments/mobilepay) for more details.
                     */
                    mobilepay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users in Europe and the United States can accept Multibanco payments from customers in Portugal using [Sources](https://stripe.com/docs/sources)—a single integration path for creating payments using any supported method.
                     */
                    multibanco?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /** @description Configuration name. */
                    name?: string;
                    /**
                     * payment_method_param
                     * @description OXXO is a Mexican chain of convenience stores with thousands of locations across Latin America and represents nearly 20% of online transactions in Mexico. OXXO allows customers to pay bills and online purchases in-store with cash. Check this [page](https://stripe.com/docs/payments/oxxo) for more details.
                     */
                    oxxo?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Przelewy24 is a Poland-based payment method aggregator that allows customers to complete transactions online using bank transfers and other methods. Bank transfers account for 30% of online payments in Poland and Przelewy24 provides a way for customers to pay with over 165 banks. Check this [page](https://stripe.com/docs/payments/p24) for more details.
                     */
                    p24?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /** @description Configuration's parent configuration. Specify to create a child configuration. */
                    parent?: string;
                    /**
                     * payment_method_param
                     * @description PayNow is a Singapore-based payment method that allows customers to make a payment using their preferred app from participating banks and participating non-bank financial institutions. Check this [page](https://stripe.com/docs/payments/paynow) for more details.
                     */
                    paynow?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description PayPal, a digital wallet popular with customers in Europe, allows your customers worldwide to pay using their PayPal account. Check this [page](https://stripe.com/docs/payments/paypal) for more details.
                     */
                    paypal?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description PromptPay is a Thailand-based payment method that allows customers to make a payment using their preferred app from participating banks. Check this [page](https://stripe.com/docs/payments/promptpay) for more details.
                     */
                    promptpay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Revolut Pay, developed by Revolut, a global finance app, is a digital wallet payment method. Revolut Pay uses the customer’s stored balance or cards to fund the payment, and offers the option for non-Revolut customers to save their details after their first purchase.
                     */
                    revolut_pay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description The [Single Euro Payments Area (SEPA)](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) is an initiative of the European Union to simplify payments within and across member countries. SEPA established and enforced banking standards to allow for the direct debiting of every EUR-denominated bank account within the SEPA region, check this [page](https://stripe.com/docs/payments/sepa-debit) for more details.
                     */
                    sepa_debit?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users in Europe and the United States can use the [Payment Intents API](https://stripe.com/docs/payments/payment-intents)—a single integration path for creating payments using any supported method—to accept [Sofort](https://www.sofort.com/) payments from customers. Check this [page](https://stripe.com/docs/payments/sofort) for more details.
                     */
                    sofort?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Swish is a [real-time](https://stripe.com/docs/payments/real-time) payment method popular in Sweden. It allows customers to [authenticate and approve](https://stripe.com/docs/payments/payment-methods#customer-actions) payments using the Swish mobile app and the Swedish BankID mobile app. Check this [page](https://stripe.com/docs/payments/swish) for more details.
                     */
                    swish?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Twint is a payment method popular in Switzerland. It allows customers to pay using their mobile phone. Check this [page](https://docs.stripe.com/payments/twint) for more details.
                     */
                    twint?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users in the United States can accept ACH direct debit payments from customers with a US bank account using the Automated Clearing House (ACH) payments system operated by Nacha. Check this [page](https://stripe.com/docs/payments/ach-direct-debit) for more details.
                     */
                    us_bank_account?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description WeChat, owned by Tencent, is China's leading mobile app with over 1 billion monthly active users. Chinese consumers can use WeChat Pay to pay for goods and services inside of businesses' apps and websites. WeChat Pay users buy most frequently in gaming, e-commerce, travel, online education, and food/nutrition. Check this [page](https://stripe.com/docs/payments/wechat-pay) for more details.
                     */
                    wechat_pay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Zip gives your customers a way to split purchases over a series of payments. Check this [page](https://stripe.com/docs/payments/zip) for more details like country availability.
                     */
                    zip?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method_configuration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentMethodConfigurationsConfiguration: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                configuration: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method_configuration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodConfigurationsConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                configuration: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * payment_method_param
                     * @description Canadian pre-authorized debit payments, check this [page](https://stripe.com/docs/payments/acss-debit) for more details like country availability.
                     */
                    acss_debit?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /** @description Whether the configuration can be used for new payments. */
                    active?: boolean;
                    /**
                     * payment_method_param
                     * @description [Affirm](https://www.affirm.com/) gives your customers a way to split purchases over a series of payments. Depending on the purchase, they can pay with four interest-free payments (Split Pay) or pay over a longer term (Installments), which might include interest. Check this [page](https://stripe.com/docs/payments/affirm) for more details like country availability.
                     */
                    affirm?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Afterpay gives your customers a way to pay for purchases in installments, check this [page](https://stripe.com/docs/payments/afterpay-clearpay) for more details like country availability. Afterpay is particularly popular among businesses selling fashion, beauty, and sports products.
                     */
                    afterpay_clearpay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Alipay is a digital wallet in China that has more than a billion active users worldwide. Alipay users can pay on the web or on a mobile device using login credentials or their Alipay app. Alipay has a low dispute rate and reduces fraud by authenticating payments using the customer's login credentials. Check this [page](https://stripe.com/docs/payments/alipay) for more details.
                     */
                    alipay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Alma is a Buy Now, Pay Later payment method that offers customers the ability to pay in 2, 3, or 4 installments.
                     */
                    alma?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Amazon Pay is a wallet payment method that lets your customers check out the same way as on Amazon.
                     */
                    amazon_pay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users can accept [Apple Pay](/payments/apple-pay) in iOS applications in iOS 9 and later, and on the web in Safari starting with iOS 10 or macOS Sierra. There are no additional fees to process Apple Pay payments, and the [pricing](/pricing) is the same as other card transactions. Check this [page](https://stripe.com/docs/apple-pay) for more details.
                     */
                    apple_pay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Apple Pay Later, a payment method for customers to buy now and pay later, gives your customers a way to split purchases into four installments across six weeks.
                     */
                    apple_pay_later?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users in Australia can accept Bulk Electronic Clearing System (BECS) direct debit payments from customers with an Australian bank account. Check this [page](https://stripe.com/docs/payments/au-becs-debit) for more details.
                     */
                    au_becs_debit?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users in the UK can accept Bacs Direct Debit payments from customers with a UK bank account, check this [page](https://stripe.com/docs/payments/payment-methods/bacs-debit) for more details.
                     */
                    bacs_debit?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Bancontact is the most popular online payment method in Belgium, with over 15 million cards in circulation. [Customers](https://stripe.com/docs/api/customers) use a Bancontact card or mobile app linked to a Belgian bank account to make online payments that are secure, guaranteed, and confirmed immediately. Check this [page](https://stripe.com/docs/payments/bancontact) for more details.
                     */
                    bancontact?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description BLIK is a [single use](https://stripe.com/docs/payments/payment-methods#usage) payment method that requires customers to authenticate their payments. When customers want to pay online using BLIK, they request a six-digit code from their banking application and enter it into the payment collection form. Check this [page](https://stripe.com/docs/payments/blik) for more details.
                     */
                    blik?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Boleto is an official (regulated by the Central Bank of Brazil) payment method in Brazil. Check this [page](https://stripe.com/docs/payments/boleto) for more details.
                     */
                    boleto?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Cards are a popular way for consumers and businesses to pay online or in person. Stripe supports global and local card networks.
                     */
                    card?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Cartes Bancaires is France's local card network. More than 95% of these cards are co-branded with either Visa or Mastercard, meaning you can process these cards over either Cartes Bancaires or the Visa or Mastercard networks. Check this [page](https://stripe.com/docs/payments/cartes-bancaires) for more details.
                     */
                    cartes_bancaires?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Cash App is a popular consumer app in the US that allows customers to bank, invest, send, and receive money using their digital wallet. Check this [page](https://stripe.com/docs/payments/cash-app-pay) for more details.
                     */
                    cashapp?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Uses a customer’s [cash balance](https://stripe.com/docs/payments/customer-balance) for the payment. The cash balance can be funded via a bank transfer. Check this [page](https://stripe.com/docs/payments/bank-transfers) for more details.
                     */
                    customer_balance?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description EPS is an Austria-based payment method that allows customers to complete transactions online using their bank credentials. EPS is supported by all Austrian banks and is accepted by over 80% of Austrian online retailers. Check this [page](https://stripe.com/docs/payments/eps) for more details.
                     */
                    eps?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * payment_method_param
                     * @description Financial Process Exchange (FPX) is a Malaysia-based payment method that allows customers to complete transactions online using their bank credentials. Bank Negara Malaysia (BNM), the Central Bank of Malaysia, and eleven other major Malaysian financial institutions are members of the PayNet Group, which owns and operates FPX. It is one of the most popular online payment methods in Malaysia, with nearly 90 million transactions in 2018 according to BNM. Check this [page](https://stripe.com/docs/payments/fpx) for more details.
                     */
                    fpx?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description giropay is a German payment method based on online banking, introduced in 2006. It allows customers to complete transactions online using their online banking environment, with funds debited from their bank account. Depending on their bank, customers confirm payments on giropay using a second factor of authentication or a PIN. giropay accounts for 10% of online checkouts in Germany. Check this [page](https://stripe.com/docs/payments/giropay) for more details.
                     */
                    giropay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Google Pay allows customers to make payments in your app or website using any credit or debit card saved to their Google Account, including those from Google Play, YouTube, Chrome, or an Android device. Use the Google Pay API to request any credit or debit card stored in your customer's Google account. Check this [page](https://stripe.com/docs/google-pay) for more details.
                     */
                    google_pay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description GrabPay is a payment method developed by [Grab](https://www.grab.com/sg/consumer/finance/pay/). GrabPay is a digital wallet - customers maintain a balance in their wallets that they pay out with. Check this [page](https://stripe.com/docs/payments/grabpay) for more details.
                     */
                    grabpay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description iDEAL is a Netherlands-based payment method that allows customers to complete transactions online using their bank credentials. All major Dutch banks are members of Currence, the scheme that operates iDEAL, making it the most popular online payment method in the Netherlands with a share of online transactions close to 55%. Check this [page](https://stripe.com/docs/payments/ideal) for more details.
                     */
                    ideal?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description JCB is a credit card company based in Japan. JCB is currently available in Japan to businesses approved by JCB, and available to all businesses in Australia, Canada, Hong Kong, Japan, New Zealand, Singapore, Switzerland, United Kingdom, United States, and all countries in the European Economic Area except Iceland. Check this [page](https://support.stripe.com/questions/accepting-japan-credit-bureau-%28jcb%29-payments) for more details.
                     */
                    jcb?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Klarna gives customers a range of [payment options](https://stripe.com/docs/payments/klarna#payment-options) during checkout. Available payment options vary depending on the customer's billing address and the transaction amount. These payment options make it convenient for customers to purchase items in all price ranges. Check this [page](https://stripe.com/docs/payments/klarna) for more details.
                     */
                    klarna?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Konbini allows customers in Japan to pay for bills and online purchases at convenience stores with cash. Check this [page](https://stripe.com/docs/payments/konbini) for more details.
                     */
                    konbini?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description [Link](https://stripe.com/docs/payments/link) is a payment method network. With Link, users save their payment details once, then reuse that information to pay with one click for any business on the network.
                     */
                    link?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description MobilePay is a [single-use](https://stripe.com/docs/payments/payment-methods#usage) card wallet payment method used in Denmark and Finland. It allows customers to [authenticate and approve](https://stripe.com/docs/payments/payment-methods#customer-actions) payments using the MobilePay app. Check this [page](https://stripe.com/docs/payments/mobilepay) for more details.
                     */
                    mobilepay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users in Europe and the United States can accept Multibanco payments from customers in Portugal using [Sources](https://stripe.com/docs/sources)—a single integration path for creating payments using any supported method.
                     */
                    multibanco?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /** @description Configuration name. */
                    name?: string;
                    /**
                     * payment_method_param
                     * @description OXXO is a Mexican chain of convenience stores with thousands of locations across Latin America and represents nearly 20% of online transactions in Mexico. OXXO allows customers to pay bills and online purchases in-store with cash. Check this [page](https://stripe.com/docs/payments/oxxo) for more details.
                     */
                    oxxo?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Przelewy24 is a Poland-based payment method aggregator that allows customers to complete transactions online using bank transfers and other methods. Bank transfers account for 30% of online payments in Poland and Przelewy24 provides a way for customers to pay with over 165 banks. Check this [page](https://stripe.com/docs/payments/p24) for more details.
                     */
                    p24?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description PayNow is a Singapore-based payment method that allows customers to make a payment using their preferred app from participating banks and participating non-bank financial institutions. Check this [page](https://stripe.com/docs/payments/paynow) for more details.
                     */
                    paynow?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description PayPal, a digital wallet popular with customers in Europe, allows your customers worldwide to pay using their PayPal account. Check this [page](https://stripe.com/docs/payments/paypal) for more details.
                     */
                    paypal?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description PromptPay is a Thailand-based payment method that allows customers to make a payment using their preferred app from participating banks. Check this [page](https://stripe.com/docs/payments/promptpay) for more details.
                     */
                    promptpay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Revolut Pay, developed by Revolut, a global finance app, is a digital wallet payment method. Revolut Pay uses the customer’s stored balance or cards to fund the payment, and offers the option for non-Revolut customers to save their details after their first purchase.
                     */
                    revolut_pay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description The [Single Euro Payments Area (SEPA)](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) is an initiative of the European Union to simplify payments within and across member countries. SEPA established and enforced banking standards to allow for the direct debiting of every EUR-denominated bank account within the SEPA region, check this [page](https://stripe.com/docs/payments/sepa-debit) for more details.
                     */
                    sepa_debit?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users in Europe and the United States can use the [Payment Intents API](https://stripe.com/docs/payments/payment-intents)—a single integration path for creating payments using any supported method—to accept [Sofort](https://www.sofort.com/) payments from customers. Check this [page](https://stripe.com/docs/payments/sofort) for more details.
                     */
                    sofort?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Swish is a [real-time](https://stripe.com/docs/payments/real-time) payment method popular in Sweden. It allows customers to [authenticate and approve](https://stripe.com/docs/payments/payment-methods#customer-actions) payments using the Swish mobile app and the Swedish BankID mobile app. Check this [page](https://stripe.com/docs/payments/swish) for more details.
                     */
                    swish?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Twint is a payment method popular in Switzerland. It allows customers to pay using their mobile phone. Check this [page](https://docs.stripe.com/payments/twint) for more details.
                     */
                    twint?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Stripe users in the United States can accept ACH direct debit payments from customers with a US bank account using the Automated Clearing House (ACH) payments system operated by Nacha. Check this [page](https://stripe.com/docs/payments/ach-direct-debit) for more details.
                     */
                    us_bank_account?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description WeChat, owned by Tencent, is China's leading mobile app with over 1 billion monthly active users. Chinese consumers can use WeChat Pay to pay for goods and services inside of businesses' apps and websites. WeChat Pay users buy most frequently in gaming, e-commerce, travel, online education, and food/nutrition. Check this [page](https://stripe.com/docs/payments/wechat-pay) for more details.
                     */
                    wechat_pay?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                    /**
                     * payment_method_param
                     * @description Zip gives your customers a way to split purchases over a series of payments. Check this [page](https://stripe.com/docs/payments/zip) for more details like country availability.
                     */
                    zip?: {
                        /** display_preference_param */
                        display_preference?: {
                            /** @enum {string} */
                            preference?: "none" | "off" | "on";
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method_configuration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentMethodDomains: {
        parameters: {
            query?: {
                /** @description The domain name that this payment method domain object represents. */
                domain_name?: string;
                /** @description Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements */
                enabled?: boolean;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_method_domain"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodDomains: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The domain name that this payment method domain object represents. */
                    domain_name: string;
                    /** @description Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements. */
                    enabled?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method_domain"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentMethodDomainsPaymentMethodDomain: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                payment_method_domain: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method_domain"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodDomainsPaymentMethodDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payment_method_domain: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements. */
                    enabled?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method_domain"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodDomainsPaymentMethodDomainValidate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payment_method_domain: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method_domain"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentMethods: {
        parameters: {
            query?: {
                /** @description The ID of the customer whose PaymentMethods will be retrieved. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request. */
                type?: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_method"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethods: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * payment_method_param
                     * @description If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method.
                     */
                    acss_debit?: {
                        account_number: string;
                        institution_number: string;
                        transit_number: string;
                    };
                    /**
                     * param
                     * @description If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method.
                     */
                    affirm?: Record<string, never>;
                    /**
                     * param
                     * @description If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
                     */
                    afterpay_clearpay?: Record<string, never>;
                    /**
                     * param
                     * @description If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method.
                     */
                    alipay?: Record<string, never>;
                    /**
                     * @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
                     * @enum {string}
                     */
                    allow_redisplay?: "always" | "limited" | "unspecified";
                    /**
                     * param
                     * @description If this is a Alma PaymentMethod, this hash contains details about the Alma payment method.
                     */
                    alma?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a AmazonPay PaymentMethod, this hash contains details about the AmazonPay payment method.
                     */
                    amazon_pay?: Record<string, never>;
                    /**
                     * param
                     * @description If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account.
                     */
                    au_becs_debit?: {
                        account_number: string;
                        bsb_number: string;
                    };
                    /**
                     * param
                     * @description If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account.
                     */
                    bacs_debit?: {
                        account_number?: string;
                        sort_code?: string;
                    };
                    /**
                     * param
                     * @description If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method.
                     */
                    bancontact?: Record<string, never>;
                    /**
                     * billing_details_inner_params
                     * @description Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
                     */
                    billing_details?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        } | "";
                        email?: string | "";
                        name?: string | "";
                        phone?: string | "";
                    };
                    /**
                     * param
                     * @description If this is a `blik` PaymentMethod, this hash contains details about the BLIK payment method.
                     */
                    blik?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method.
                     */
                    boleto?: {
                        tax_id: string;
                    };
                    /** @description If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: "tok_visa"}`. When providing a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly. */
                    card?: {
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        /** networks_params */
                        networks?: {
                            /** @enum {string} */
                            preferred?: "cartes_bancaires" | "mastercard" | "visa";
                        };
                        number: string;
                    } | {
                        token: string;
                    };
                    /**
                     * param
                     * @description If this is a `cashapp` PaymentMethod, this hash contains details about the Cash App Pay payment method.
                     */
                    cashapp?: Record<string, never>;
                    /** @description The `Customer` to whom the original PaymentMethod is attached. */
                    customer?: string;
                    /**
                     * param
                     * @description If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method.
                     */
                    customer_balance?: Record<string, never>;
                    /**
                     * param
                     * @description If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method.
                     */
                    eps?: {
                        /** @enum {string} */
                        bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * param
                     * @description If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method.
                     */
                    fpx?: {
                        /** @enum {string} */
                        bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                    };
                    /**
                     * param
                     * @description If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method.
                     */
                    giropay?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method.
                     */
                    grabpay?: Record<string, never>;
                    /**
                     * param
                     * @description If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method.
                     */
                    ideal?: {
                        /** @enum {string} */
                        bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                    };
                    /**
                     * param
                     * @description If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method.
                     */
                    interac_present?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `kakao_pay` PaymentMethod, this hash contains details about the Kakao Pay payment method.
                     */
                    kakao_pay?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `klarna` PaymentMethod, this hash contains details about the Klarna payment method.
                     */
                    klarna?: {
                        /** date_of_birth */
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        };
                    };
                    /**
                     * param
                     * @description If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method.
                     */
                    konbini?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `kr_card` PaymentMethod, this hash contains details about the Korean Card payment method.
                     */
                    kr_card?: Record<string, never>;
                    /**
                     * param
                     * @description If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
                     */
                    link?: Record<string, never>;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * param
                     * @description If this is a `mobilepay` PaymentMethod, this hash contains details about the MobilePay payment method.
                     */
                    mobilepay?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `multibanco` PaymentMethod, this hash contains details about the Multibanco payment method.
                     */
                    multibanco?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `naver_pay` PaymentMethod, this hash contains details about the Naver Pay payment method.
                     */
                    naver_pay?: {
                        /** @enum {string} */
                        funding?: "card" | "points";
                    };
                    /**
                     * param
                     * @description If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method.
                     */
                    oxxo?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method.
                     */
                    p24?: {
                        /** @enum {string} */
                        bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank";
                    };
                    /**
                     * param
                     * @description If this is a `payco` PaymentMethod, this hash contains details about the PAYCO payment method.
                     */
                    payco?: Record<string, never>;
                    /** @description The PaymentMethod to share. */
                    payment_method?: string;
                    /**
                     * param
                     * @description If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method.
                     */
                    paynow?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `paypal` PaymentMethod, this hash contains details about the PayPal payment method.
                     */
                    paypal?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `pix` PaymentMethod, this hash contains details about the Pix payment method.
                     */
                    pix?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `promptpay` PaymentMethod, this hash contains details about the PromptPay payment method.
                     */
                    promptpay?: Record<string, never>;
                    /**
                     * radar_options_with_hidden_options
                     * @description Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
                     */
                    radar_options?: {
                        session?: string;
                    };
                    /**
                     * param
                     * @description If this is a `Revolut Pay` PaymentMethod, this hash contains details about the Revolut Pay payment method.
                     */
                    revolut_pay?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `samsung_pay` PaymentMethod, this hash contains details about the SamsungPay payment method.
                     */
                    samsung_pay?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account.
                     */
                    sepa_debit?: {
                        iban: string;
                    };
                    /**
                     * param
                     * @description If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method.
                     */
                    sofort?: {
                        /** @enum {string} */
                        country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                    };
                    /**
                     * param
                     * @description If this is a `swish` PaymentMethod, this hash contains details about the Swish payment method.
                     */
                    swish?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a TWINT PaymentMethod, this hash contains details about the TWINT payment method.
                     */
                    twint?: Record<string, never>;
                    /**
                     * @description The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
                     * @enum {string}
                     */
                    type?: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
                    /**
                     * payment_method_param
                     * @description If this is an `us_bank_account` PaymentMethod, this hash contains details about the US bank account payment method.
                     */
                    us_bank_account?: {
                        /** @enum {string} */
                        account_holder_type?: "company" | "individual";
                        account_number?: string;
                        /** @enum {string} */
                        account_type?: "checking" | "savings";
                        financial_connections_account?: string;
                        routing_number?: string;
                    };
                    /**
                     * param
                     * @description If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method.
                     */
                    wechat_pay?: Record<string, never>;
                    /**
                     * param
                     * @description If this is a `zip` PaymentMethod, this hash contains details about the Zip payment method.
                     */
                    zip?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentMethodsPaymentMethod: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                payment_method: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodsPaymentMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payment_method: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
                     * @enum {string}
                     */
                    allow_redisplay?: "always" | "limited" | "unspecified";
                    /**
                     * billing_details_inner_params
                     * @description Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
                     */
                    billing_details?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        } | "";
                        email?: string | "";
                        name?: string | "";
                        phone?: string | "";
                    };
                    /**
                     * update_api_param
                     * @description If this is a `card` PaymentMethod, this hash contains the user's card details.
                     */
                    card?: {
                        exp_month?: number;
                        exp_year?: number;
                        /** networks_update_api_param */
                        networks?: {
                            /** @enum {string} */
                            preferred?: "" | "cartes_bancaires" | "mastercard" | "visa";
                        };
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * param
                     * @description If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
                     */
                    link?: Record<string, never>;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * param
                     * @description If this is a `naver_pay` PaymentMethod, this hash contains details about the Naver Pay payment method.
                     */
                    naver_pay?: {
                        /** @enum {string} */
                        funding?: "card" | "points";
                    };
                    /**
                     * update_param
                     * @description If this is an `us_bank_account` PaymentMethod, this hash contains details about the US bank account payment method.
                     */
                    us_bank_account?: {
                        /** @enum {string} */
                        account_holder_type?: "company" | "individual";
                        /** @enum {string} */
                        account_type?: "checking" | "savings";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodsPaymentMethodAttach: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payment_method: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The ID of the customer to which to attach the PaymentMethod. */
                    customer: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodsPaymentMethodDetach: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payment_method: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPayouts: {
        parameters: {
            query?: {
                /** @description Only return payouts that are expected to arrive during the given date interval. */
                arrival_date?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return payouts that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description The ID of an external account - only return payouts sent to this external account. */
                destination?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`. */
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["payout"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPayouts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A positive integer in cents representing how much to payout. */
                    amount: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description The ID of a bank account or a card to send the payout to. If you don't provide a destination, we use the default external account for the specified currency. */
                    destination?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * @description The method used to send this payout, which is `standard` or `instant`. We support `instant` for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).
                     * @enum {string}
                     */
                    method?: "instant" | "standard";
                    /**
                     * @description The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the Balances API. One of `bank_account`, `card`, or `fpx`.
                     * @enum {string}
                     */
                    source_type?: "bank_account" | "card" | "fpx";
                    /** @description A string that displays on the recipient's bank or card statement (up to 22 characters). A `statement_descriptor` that's longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all. */
                    statement_descriptor?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPayoutsPayout: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                payout: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPayoutsPayout: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payout: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPayoutsPayoutCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payout: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPayoutsPayoutReverse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payout: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPlans: {
        parameters: {
            query?: {
                /** @description Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans). */
                active?: boolean;
                /** @description A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return plans for the given product. */
                product?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["plan"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPlans: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the plan is currently available for new subscriptions. Defaults to `true`. */
                    active?: boolean;
                    /**
                     * @description Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
                     * @enum {string}
                     */
                    aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
                    /** @description A positive integer in cents (or local equivalent) (or 0 for a free plan) representing how much to charge on a recurring basis. */
                    amount?: number;
                    /**
                     * Format: decimal
                     * @description Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set.
                     */
                    amount_decimal?: string;
                    /**
                     * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
                     * @enum {string}
                     */
                    billing_scheme?: "per_unit" | "tiered";
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes. */
                    id?: string;
                    /**
                     * @description Specifies billing frequency. Either `day`, `week`, `month` or `year`.
                     * @enum {string}
                     */
                    interval: "day" | "month" | "week" | "year";
                    /** @description The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks). */
                    interval_count?: number;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The meter tracking the usage of a metered price */
                    meter?: string;
                    /** @description A brief description of the plan, hidden from customers. */
                    nickname?: string;
                    product?: {
                        active?: boolean;
                        /** @deprecated */
                        id?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        name: string;
                        statement_descriptor?: string;
                        tax_code?: string;
                        unit_label?: string;
                    } | string;
                    /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
                    tiers?: {
                        flat_amount?: number;
                        /** Format: decimal */
                        flat_amount_decimal?: string;
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                        up_to: "inf" | number;
                    }[];
                    /**
                     * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
                     * @enum {string}
                     */
                    tiers_mode?: "graduated" | "volume";
                    /**
                     * transform_usage_param
                     * @description Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
                     */
                    transform_usage?: {
                        divide_by: number;
                        /** @enum {string} */
                        round: "down" | "up";
                    };
                    /** @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
                    trial_period_days?: number;
                    /**
                     * @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
                     * @enum {string}
                     */
                    usage_type?: "licensed" | "metered";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["plan"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPlansPlan: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                plan: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["plan"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPlansPlan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plan: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the plan is currently available for new subscriptions. */
                    active?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description A brief description of the plan, hidden from customers. */
                    nickname?: string;
                    /** @description The product the plan belongs to. This cannot be changed once it has been used in a subscription or subscription schedule. */
                    product?: string;
                    /** @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
                    trial_period_days?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["plan"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeletePlansPlan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plan: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_plan"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPrices: {
        parameters: {
            query?: {
                /** @description Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices). */
                active?: boolean;
                /** @description A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return prices for the given currency. */
                currency?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return the price with these lookup_keys, if any exist. You can specify up to 10 lookup_keys. */
                lookup_keys?: string[];
                /** @description Only return prices for the given product. */
                product?: string;
                /** @description Only return prices with these recurring fields. */
                recurring?: {
                    /** @enum {string} */
                    interval?: "day" | "month" | "week" | "year";
                    meter?: string;
                    /** @enum {string} */
                    usage_type?: "licensed" | "metered";
                };
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return prices of type `recurring` or `one_time`. */
                type?: "one_time" | "recurring";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["price"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPrices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the price can be used for new purchases. Defaults to `true`. */
                    active?: boolean;
                    /**
                     * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
                     * @enum {string}
                     */
                    billing_scheme?: "per_unit" | "tiered";
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
                    currency_options?: {
                        [key: string]: {
                            /** custom_unit_amount */
                            custom_unit_amount?: {
                                enabled: boolean;
                                maximum?: number;
                                minimum?: number;
                                preset?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            tiers?: {
                                flat_amount?: number;
                                /** Format: decimal */
                                flat_amount_decimal?: string;
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                                up_to: "inf" | number;
                            }[];
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                    };
                    /**
                     * custom_unit_amount
                     * @description When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
                     */
                    custom_unit_amount?: {
                        enabled: boolean;
                        maximum?: number;
                        minimum?: number;
                        preset?: number;
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
                    lookup_key?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description A brief description of the price, hidden from customers. */
                    nickname?: string;
                    /** @description The ID of the product that this price will belong to. */
                    product?: string;
                    /**
                     * inline_product_params
                     * @description These fields can be used to create a new product that this price will belong to.
                     */
                    product_data?: {
                        active?: boolean;
                        /** @deprecated */
                        id?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        name: string;
                        statement_descriptor?: string;
                        tax_code?: string;
                        unit_label?: string;
                    };
                    /**
                     * recurring
                     * @description The recurring components of a price such as `interval` and `usage_type`.
                     */
                    recurring?: {
                        /** @enum {string} */
                        aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
                        /** @enum {string} */
                        interval: "day" | "month" | "week" | "year";
                        interval_count?: number;
                        meter?: string;
                        /** @enum {string} */
                        usage_type?: "licensed" | "metered";
                    };
                    /**
                     * @description Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
                     * @enum {string}
                     */
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
                    tiers?: {
                        flat_amount?: number;
                        /** Format: decimal */
                        flat_amount_decimal?: string;
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                        up_to: "inf" | number;
                    }[];
                    /**
                     * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
                     * @enum {string}
                     */
                    tiers_mode?: "graduated" | "volume";
                    /** @description If set to true, will atomically remove the lookup key from the existing price, and assign it to this price. */
                    transfer_lookup_key?: boolean;
                    /**
                     * transform_usage_param
                     * @description Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
                     */
                    transform_quantity?: {
                        divide_by: number;
                        /** @enum {string} */
                        round: "down" | "up";
                    };
                    /** @description A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. One of `unit_amount`, `unit_amount_decimal`, or `custom_unit_amount` is required, unless `billing_scheme=tiered`. */
                    unit_amount?: number;
                    /**
                     * Format: decimal
                     * @description Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
                     */
                    unit_amount_decimal?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["price"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPricesSearch: {
        parameters: {
            query: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
                page?: string;
                /** @description The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices). */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["price"][];
                        has_more: boolean;
                        next_page?: string | null;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value.
                         * @enum {string}
                         */
                        object: "search_result";
                        /** @description The total number of objects that match the query, only accurate up to 10,000. */
                        total_count?: number;
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPricesPrice: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                price: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["price"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPricesPrice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the price can be used for new purchases. Defaults to `true`. */
                    active?: boolean;
                    /** @description Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
                    currency_options?: {
                        [key: string]: {
                            /** custom_unit_amount */
                            custom_unit_amount?: {
                                enabled: boolean;
                                maximum?: number;
                                minimum?: number;
                                preset?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            tiers?: {
                                flat_amount?: number;
                                /** Format: decimal */
                                flat_amount_decimal?: string;
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                                up_to: "inf" | number;
                            }[];
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                    } | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
                    lookup_key?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description A brief description of the price, hidden from customers. */
                    nickname?: string;
                    /**
                     * @description Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
                     * @enum {string}
                     */
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    /** @description If set to true, will atomically remove the lookup key from the existing price, and assign it to this price. */
                    transfer_lookup_key?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["price"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetProducts: {
        parameters: {
            query?: {
                /** @description Only return products that are active or inactive (e.g., pass `false` to list all inactive products). */
                active?: boolean;
                /** @description Only return products that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Only return products with the given IDs. Cannot be used with [starting_after](https://stripe.com/docs/api#list_products-starting_after) or [ending_before](https://stripe.com/docs/api#list_products-ending_before). */
                ids?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return products that can be shipped (i.e., physical, not digital products). */
                shippable?: boolean;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return products with the given url. */
                url?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["product"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostProducts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the product is currently available for purchase. Defaults to `true`. */
                    active?: boolean;
                    /**
                     * price_data_without_product
                     * @description Data used to generate a new [Price](https://stripe.com/docs/api/prices) object. This Price will be set as the default price for this product.
                     */
                    default_price_data?: {
                        currency: string;
                        currency_options?: {
                            [key: string]: {
                                /** custom_unit_amount */
                                custom_unit_amount?: {
                                    enabled: boolean;
                                    maximum?: number;
                                    minimum?: number;
                                    preset?: number;
                                };
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                tiers?: {
                                    flat_amount?: number;
                                    /** Format: decimal */
                                    flat_amount_decimal?: string;
                                    unit_amount?: number;
                                    /** Format: decimal */
                                    unit_amount_decimal?: string;
                                    up_to: "inf" | number;
                                }[];
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                            };
                        };
                        /** custom_unit_amount */
                        custom_unit_amount?: {
                            enabled: boolean;
                            maximum?: number;
                            minimum?: number;
                            preset?: number;
                        };
                        /** recurring_adhoc */
                        recurring?: {
                            /** @enum {string} */
                            interval: "day" | "month" | "week" | "year";
                            interval_count?: number;
                        };
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    };
                    /** @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account. */
                    id?: string;
                    /** @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
                    images?: string[];
                    /** @description A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table). */
                    marketing_features?: {
                        name: string;
                    }[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The product's name, meant to be displayable to the customer. */
                    name: string;
                    /**
                     * package_dimensions_specs
                     * @description The dimensions of this product for shipping purposes.
                     */
                    package_dimensions?: {
                        height: number;
                        length: number;
                        weight: number;
                        width: number;
                    };
                    /** @description Whether this product is shipped (i.e., physical goods). */
                    shippable?: boolean;
                    /** @description An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
                     *
                     *     This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
                     *      It must contain at least one letter. Only used for subscription payments. */
                    statement_descriptor?: string;
                    /** @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID. */
                    tax_code?: string;
                    /** @description A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal. */
                    unit_label?: string;
                    /** @description A URL of a publicly-accessible webpage for this product. */
                    url?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["product"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetProductsSearch: {
        parameters: {
            query: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
                page?: string;
                /** @description The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products). */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["product"][];
                        has_more: boolean;
                        next_page?: string | null;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value.
                         * @enum {string}
                         */
                        object: "search_result";
                        /** @description The total number of objects that match the query, only accurate up to 10,000. */
                        total_count?: number;
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetProductsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["product"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostProductsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the product is available for purchase. */
                    active?: boolean;
                    /** @description The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product. */
                    default_price?: string;
                    /** @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
                    description?: string | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
                    images?: string[] | "";
                    /** @description A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table). */
                    marketing_features?: {
                        name: string;
                    }[] | "";
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The product's name, meant to be displayable to the customer. */
                    name?: string;
                    /** @description The dimensions of this product for shipping purposes. */
                    package_dimensions?: {
                        height: number;
                        length: number;
                        weight: number;
                        width: number;
                    } | "";
                    /** @description Whether this product is shipped (i.e., physical goods). */
                    shippable?: boolean;
                    /** @description An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
                     *
                     *     This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
                     *      It must contain at least one letter. May only be set if `type=service`. Only used for subscription payments. */
                    statement_descriptor?: string;
                    /** @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID. */
                    tax_code?: string | "";
                    /** @description A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal. May only be set if `type=service`. */
                    unit_label?: string | "";
                    /** @description A URL of a publicly-accessible webpage for this product. */
                    url?: string | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["product"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteProductsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_product"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetProductsProductFeatures: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                product: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["product_feature"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostProductsProductFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The ID of the [Feature](https://stripe.com/docs/api/entitlements/feature) object attached to this product. */
                    entitlement_feature: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["product_feature"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetProductsProductFeaturesId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                /** @description The ID of the product_feature. */
                id: string;
                /** @description The ID of the product. */
                product: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["product_feature"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteProductsProductFeaturesId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                product: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_product_feature"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPromotionCodes: {
        parameters: {
            query?: {
                /** @description Filter promotion codes by whether they are active. */
                active?: boolean;
                /** @description Only return promotion codes that have this case-insensitive code. */
                code?: string;
                /** @description Only return promotion codes for this coupon. */
                coupon?: string;
                /** @description A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return promotion codes that are restricted to this customer. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["promotion_code"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPromotionCodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the promotion code is currently active. */
                    active?: boolean;
                    /** @description The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. Valid characters are lower case letters (a-z), upper case letters (A-Z), and digits (0-9).
                     *
                     *     If left blank, we will generate one automatically. */
                    code?: string;
                    /** @description The coupon for this promotion code. */
                    coupon: string;
                    /** @description The customer that this promotion code can be used by. If not set, the promotion code can be used by all customers. */
                    customer?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description The timestamp at which this promotion code will expire. If the coupon has specified a `redeems_by`, then this value cannot be after the coupon's `redeems_by`.
                     */
                    expires_at?: number;
                    /** @description A positive integer specifying the number of times the promotion code can be redeemed. If the coupon has specified a `max_redemptions`, then this value cannot be greater than the coupon's `max_redemptions`. */
                    max_redemptions?: number;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * restrictions_params
                     * @description Settings that restrict the redemption of the promotion code.
                     */
                    restrictions?: {
                        currency_options?: {
                            [key: string]: {
                                minimum_amount?: number;
                            };
                        };
                        first_time_transaction?: boolean;
                        minimum_amount?: number;
                        minimum_amount_currency?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["promotion_code"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPromotionCodesPromotionCode: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                promotion_code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["promotion_code"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPromotionCodesPromotionCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                promotion_code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the promotion code is currently active. A promotion code can only be reactivated when the coupon is still valid and the promotion code is otherwise redeemable. */
                    active?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * restrictions_params
                     * @description Settings that restrict the redemption of the promotion code.
                     */
                    restrictions?: {
                        currency_options?: {
                            [key: string]: {
                                minimum_amount?: number;
                            };
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["promotion_code"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetQuotes: {
        parameters: {
            query?: {
                /** @description The ID of the customer whose quotes will be retrieved. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description The status of the quote. */
                status?: "accepted" | "canceled" | "draft" | "open";
                /** @description Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set. */
                test_clock?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["quote"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostQuotes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field. */
                    application_fee_amount?: number | "";
                    /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field. */
                    application_fee_percent?: number | "";
                    /**
                     * automatic_tax_param
                     * @description Settings for automatic tax lookup for this quote and resulting invoices and subscriptions.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
                     * @enum {string}
                     */
                    collection_method?: "charge_automatically" | "send_invoice";
                    /** @description The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
                    customer?: string;
                    /** @description The tax rates that will apply to any line item that does not have `tax_rates` set. */
                    default_tax_rates?: string[] | "";
                    /** @description A description that will be displayed on the quote PDF. If no value is passed, the default description configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
                    description?: string | "";
                    /** @description The discounts applied to the quote. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
                     */
                    expires_at?: number;
                    /** @description A footer that will be displayed on the quote PDF. If no value is passed, the default footer configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
                    footer?: string | "";
                    /**
                     * from_quote_params
                     * @description Clone an existing quote. The new quote will be created in `status=draft`. When using this parameter, you cannot specify any other parameters except for `expires_at`.
                     */
                    from_quote?: {
                        is_revision?: boolean;
                        quote: string;
                    };
                    /** @description A header that will be displayed on the quote PDF. If no value is passed, the default header configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
                    header?: string | "";
                    /**
                     * quote_param
                     * @description All invoices will be billed using the specified settings.
                     */
                    invoice_settings?: {
                        days_until_due?: number;
                        /** param */
                        issuer?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /** @description A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost. */
                    line_items?: {
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        price?: string;
                        /** price_data */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** recurring_adhoc */
                            recurring?: {
                                /** @enum {string} */
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The account on behalf of which to charge. */
                    on_behalf_of?: string | "";
                    /**
                     * subscription_data_create_params
                     * @description When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created.
                     */
                    subscription_data?: {
                        description?: string;
                        effective_date?: "current_period_end" | number | "";
                        metadata?: {
                            [key: string]: string;
                        };
                        trial_period_days?: number | "";
                    };
                    /** @description ID of the test clock to attach to the quote. */
                    test_clock?: string;
                    /** @description The data with which to automatically create a Transfer for each of the invoices. */
                    transfer_data?: {
                        amount?: number;
                        amount_percent?: number;
                        destination: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetQuotesQuote: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                quote: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostQuotesQuote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quote: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field. */
                    application_fee_amount?: number | "";
                    /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field. */
                    application_fee_percent?: number | "";
                    /**
                     * automatic_tax_param
                     * @description Settings for automatic tax lookup for this quote and resulting invoices and subscriptions.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
                     * @enum {string}
                     */
                    collection_method?: "charge_automatically" | "send_invoice";
                    /** @description The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
                    customer?: string;
                    /** @description The tax rates that will apply to any line item that does not have `tax_rates` set. */
                    default_tax_rates?: string[] | "";
                    /** @description A description that will be displayed on the quote PDF. */
                    description?: string | "";
                    /** @description The discounts applied to the quote. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
                     */
                    expires_at?: number;
                    /** @description A footer that will be displayed on the quote PDF. */
                    footer?: string | "";
                    /** @description A header that will be displayed on the quote PDF. */
                    header?: string | "";
                    /**
                     * quote_param
                     * @description All invoices will be billed using the specified settings.
                     */
                    invoice_settings?: {
                        days_until_due?: number;
                        /** param */
                        issuer?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /** @description A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost. */
                    line_items?: {
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        id?: string;
                        price?: string;
                        /** price_data */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** recurring_adhoc */
                            recurring?: {
                                /** @enum {string} */
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The account on behalf of which to charge. */
                    on_behalf_of?: string | "";
                    /**
                     * subscription_data_update_params
                     * @description When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created.
                     */
                    subscription_data?: {
                        description?: string | "";
                        effective_date?: "current_period_end" | number | "";
                        metadata?: {
                            [key: string]: string;
                        };
                        trial_period_days?: number | "";
                    };
                    /** @description The data with which to automatically create a Transfer for each of the invoices. */
                    transfer_data?: {
                        amount?: number;
                        amount_percent?: number;
                        destination: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostQuotesQuoteAccept: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quote: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostQuotesQuoteCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quote: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetQuotesQuoteComputedUpfrontLineItems: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                quote: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostQuotesQuoteFinalize: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quote: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
                     */
                    expires_at?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetQuotesQuoteLineItems: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                quote: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetQuotesQuotePdf: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                quote: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": string;
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarEarlyFraudWarnings: {
        parameters: {
            query?: {
                /** @description Only return early fraud warnings for the charge specified by this charge ID. */
                charge?: string;
                /** @description Only return early fraud warnings that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID. */
                payment_intent?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["radar.early_fraud_warning"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarEarlyFraudWarningsEarlyFraudWarning: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                early_fraud_warning: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["radar.early_fraud_warning"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarValueListItems: {
        parameters: {
            query: {
                /** @description Only return items that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Return items belonging to the parent list whose value matches the specified value (using an "is like" match). */
                value?: string;
                /** @description Identifier for the parent value list this item belongs to. */
                value_list: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["radar.value_list_item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRadarValueListItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The value of the item (whose type must match the type of the parent value list). */
                    value: string;
                    /** @description The identifier of the value list which the created item will be added to. */
                    value_list: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["radar.value_list_item"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarValueListItemsItem: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                item: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["radar.value_list_item"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteRadarValueListItemsItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_radar.value_list_item"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarValueLists: {
        parameters: {
            query?: {
                /** @description The alias used to reference the value list when writing rules. */
                alias?: string;
                /** @description A value contained within a value list - returns all value lists containing this value. */
                contains?: string;
                /** @description Only return value lists that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["radar.value_list"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRadarValueLists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The name of the value list for use in rules. */
                    alias: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * @description Type of the items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. Use `string` if the item type is unknown or mixed.
                     * @enum {string}
                     */
                    item_type?: "card_bin" | "card_fingerprint" | "case_sensitive_string" | "country" | "customer_id" | "email" | "ip_address" | "sepa_debit_fingerprint" | "string" | "us_bank_account_fingerprint";
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The human-readable name of the value list. */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["radar.value_list"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarValueListsValueList: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                value_list: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["radar.value_list"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRadarValueListsValueList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                value_list: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The name of the value list for use in rules. */
                    alias?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The human-readable name of the value list. */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["radar.value_list"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteRadarValueListsValueList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                value_list: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_radar.value_list"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRefunds: {
        parameters: {
            query?: {
                /** @description Only return refunds for the charge specified by this charge ID. */
                charge?: string;
                /** @description Only return refunds that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return refunds for the PaymentIntent specified by this ID. */
                payment_intent?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["refund"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRefunds: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    /** @description The identifier of the charge to refund. */
                    charge?: string;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description Customer whose customer balance to refund from. */
                    customer?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions. */
                    instructions_email?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * @description Origin of the refund
                     * @enum {string}
                     */
                    origin?: "customer_balance";
                    /** @description The identifier of the PaymentIntent to refund. */
                    payment_intent?: string;
                    /**
                     * @description String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://stripe.com/docs/radar/lists), and will also help us improve our fraud detection algorithms.
                     * @enum {string}
                     */
                    reason?: "duplicate" | "fraudulent" | "requested_by_customer";
                    /** @description Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge. */
                    refund_application_fee?: boolean;
                    /** @description Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).<br><br>A transfer can be reversed only by the application that created the charge. */
                    reverse_transfer?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRefundsRefund: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                refund: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRefundsRefund: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                refund: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRefundsRefundCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                refund: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReportingReportRuns: {
        parameters: {
            query?: {
                /** @description Only return Report Runs that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["reporting.report_run"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostReportingReportRuns: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * run_parameter_specs
                     * @description Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation.
                     */
                    parameters?: {
                        columns?: string[];
                        connected_account?: string;
                        currency?: string;
                        /** Format: unix-time */
                        interval_end?: number;
                        /** Format: unix-time */
                        interval_start?: number;
                        payout?: string;
                        /** @enum {string} */
                        reporting_category?: "advance" | "advance_funding" | "anticipation_repayment" | "charge" | "charge_failure" | "climate_order_purchase" | "climate_order_refund" | "connect_collection_transfer" | "connect_reserved_funds" | "contribution" | "dispute" | "dispute_reversal" | "fee" | "financing_paydown" | "financing_paydown_reversal" | "financing_payout" | "financing_payout_reversal" | "issuing_authorization_hold" | "issuing_authorization_release" | "issuing_dispute" | "issuing_transaction" | "network_cost" | "other_adjustment" | "partial_capture_reversal" | "payout" | "payout_reversal" | "platform_earning" | "platform_earning_refund" | "refund" | "refund_failure" | "risk_reserved_funds" | "tax" | "topup" | "topup_reversal" | "transfer" | "transfer_reversal" | "unreconciled_customer_funds";
                        /** @enum {string} */
                        timezone?: "Africa/Abidjan" | "Africa/Accra" | "Africa/Addis_Ababa" | "Africa/Algiers" | "Africa/Asmara" | "Africa/Asmera" | "Africa/Bamako" | "Africa/Bangui" | "Africa/Banjul" | "Africa/Bissau" | "Africa/Blantyre" | "Africa/Brazzaville" | "Africa/Bujumbura" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Ceuta" | "Africa/Conakry" | "Africa/Dakar" | "Africa/Dar_es_Salaam" | "Africa/Djibouti" | "Africa/Douala" | "Africa/El_Aaiun" | "Africa/Freetown" | "Africa/Gaborone" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Juba" | "Africa/Kampala" | "Africa/Khartoum" | "Africa/Kigali" | "Africa/Kinshasa" | "Africa/Lagos" | "Africa/Libreville" | "Africa/Lome" | "Africa/Luanda" | "Africa/Lubumbashi" | "Africa/Lusaka" | "Africa/Malabo" | "Africa/Maputo" | "Africa/Maseru" | "Africa/Mbabane" | "Africa/Mogadishu" | "Africa/Monrovia" | "Africa/Nairobi" | "Africa/Ndjamena" | "Africa/Niamey" | "Africa/Nouakchott" | "Africa/Ouagadougou" | "Africa/Porto-Novo" | "Africa/Sao_Tome" | "Africa/Timbuktu" | "Africa/Tripoli" | "Africa/Tunis" | "Africa/Windhoek" | "America/Adak" | "America/Anchorage" | "America/Anguilla" | "America/Antigua" | "America/Araguaina" | "America/Argentina/Buenos_Aires" | "America/Argentina/Catamarca" | "America/Argentina/ComodRivadavia" | "America/Argentina/Cordoba" | "America/Argentina/Jujuy" | "America/Argentina/La_Rioja" | "America/Argentina/Mendoza" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Salta" | "America/Argentina/San_Juan" | "America/Argentina/San_Luis" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Aruba" | "America/Asuncion" | "America/Atikokan" | "America/Atka" | "America/Bahia" | "America/Bahia_Banderas" | "America/Barbados" | "America/Belem" | "America/Belize" | "America/Blanc-Sablon" | "America/Boa_Vista" | "America/Bogota" | "America/Boise" | "America/Buenos_Aires" | "America/Cambridge_Bay" | "America/Campo_Grande" | "America/Cancun" | "America/Caracas" | "America/Catamarca" | "America/Cayenne" | "America/Cayman" | "America/Chicago" | "America/Chihuahua" | "America/Ciudad_Juarez" | "America/Coral_Harbour" | "America/Cordoba" | "America/Costa_Rica" | "America/Creston" | "America/Cuiaba" | "America/Curacao" | "America/Danmarkshavn" | "America/Dawson" | "America/Dawson_Creek" | "America/Denver" | "America/Detroit" | "America/Dominica" | "America/Edmonton" | "America/Eirunepe" | "America/El_Salvador" | "America/Ensenada" | "America/Fort_Nelson" | "America/Fort_Wayne" | "America/Fortaleza" | "America/Glace_Bay" | "America/Godthab" | "America/Goose_Bay" | "America/Grand_Turk" | "America/Grenada" | "America/Guadeloupe" | "America/Guatemala" | "America/Guayaquil" | "America/Guyana" | "America/Halifax" | "America/Havana" | "America/Hermosillo" | "America/Indiana/Indianapolis" | "America/Indiana/Knox" | "America/Indiana/Marengo" | "America/Indiana/Petersburg" | "America/Indiana/Tell_City" | "America/Indiana/Vevay" | "America/Indiana/Vincennes" | "America/Indiana/Winamac" | "America/Indianapolis" | "America/Inuvik" | "America/Iqaluit" | "America/Jamaica" | "America/Jujuy" | "America/Juneau" | "America/Kentucky/Louisville" | "America/Kentucky/Monticello" | "America/Knox_IN" | "America/Kralendijk" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Louisville" | "America/Lower_Princes" | "America/Maceio" | "America/Managua" | "America/Manaus" | "America/Marigot" | "America/Martinique" | "America/Matamoros" | "America/Mazatlan" | "America/Mendoza" | "America/Menominee" | "America/Merida" | "America/Metlakatla" | "America/Mexico_City" | "America/Miquelon" | "America/Moncton" | "America/Monterrey" | "America/Montevideo" | "America/Montreal" | "America/Montserrat" | "America/Nassau" | "America/New_York" | "America/Nipigon" | "America/Nome" | "America/Noronha" | "America/North_Dakota/Beulah" | "America/North_Dakota/Center" | "America/North_Dakota/New_Salem" | "America/Nuuk" | "America/Ojinaga" | "America/Panama" | "America/Pangnirtung" | "America/Paramaribo" | "America/Phoenix" | "America/Port-au-Prince" | "America/Port_of_Spain" | "America/Porto_Acre" | "America/Porto_Velho" | "America/Puerto_Rico" | "America/Punta_Arenas" | "America/Rainy_River" | "America/Rankin_Inlet" | "America/Recife" | "America/Regina" | "America/Resolute" | "America/Rio_Branco" | "America/Rosario" | "America/Santa_Isabel" | "America/Santarem" | "America/Santiago" | "America/Santo_Domingo" | "America/Sao_Paulo" | "America/Scoresbysund" | "America/Shiprock" | "America/Sitka" | "America/St_Barthelemy" | "America/St_Johns" | "America/St_Kitts" | "America/St_Lucia" | "America/St_Thomas" | "America/St_Vincent" | "America/Swift_Current" | "America/Tegucigalpa" | "America/Thule" | "America/Thunder_Bay" | "America/Tijuana" | "America/Toronto" | "America/Tortola" | "America/Vancouver" | "America/Virgin" | "America/Whitehorse" | "America/Winnipeg" | "America/Yakutat" | "America/Yellowknife" | "Antarctica/Casey" | "Antarctica/Davis" | "Antarctica/DumontDUrville" | "Antarctica/Macquarie" | "Antarctica/Mawson" | "Antarctica/McMurdo" | "Antarctica/Palmer" | "Antarctica/Rothera" | "Antarctica/South_Pole" | "Antarctica/Syowa" | "Antarctica/Troll" | "Antarctica/Vostok" | "Arctic/Longyearbyen" | "Asia/Aden" | "Asia/Almaty" | "Asia/Amman" | "Asia/Anadyr" | "Asia/Aqtau" | "Asia/Aqtobe" | "Asia/Ashgabat" | "Asia/Ashkhabad" | "Asia/Atyrau" | "Asia/Baghdad" | "Asia/Bahrain" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Barnaul" | "Asia/Beirut" | "Asia/Bishkek" | "Asia/Brunei" | "Asia/Calcutta" | "Asia/Chita" | "Asia/Choibalsan" | "Asia/Chongqing" | "Asia/Chungking" | "Asia/Colombo" | "Asia/Dacca" | "Asia/Damascus" | "Asia/Dhaka" | "Asia/Dili" | "Asia/Dubai" | "Asia/Dushanbe" | "Asia/Famagusta" | "Asia/Gaza" | "Asia/Harbin" | "Asia/Hebron" | "Asia/Ho_Chi_Minh" | "Asia/Hong_Kong" | "Asia/Hovd" | "Asia/Irkutsk" | "Asia/Istanbul" | "Asia/Jakarta" | "Asia/Jayapura" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Kashgar" | "Asia/Kathmandu" | "Asia/Katmandu" | "Asia/Khandyga" | "Asia/Kolkata" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuching" | "Asia/Kuwait" | "Asia/Macao" | "Asia/Macau" | "Asia/Magadan" | "Asia/Makassar" | "Asia/Manila" | "Asia/Muscat" | "Asia/Nicosia" | "Asia/Novokuznetsk" | "Asia/Novosibirsk" | "Asia/Omsk" | "Asia/Oral" | "Asia/Phnom_Penh" | "Asia/Pontianak" | "Asia/Pyongyang" | "Asia/Qatar" | "Asia/Qostanay" | "Asia/Qyzylorda" | "Asia/Rangoon" | "Asia/Riyadh" | "Asia/Saigon" | "Asia/Sakhalin" | "Asia/Samarkand" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Tel_Aviv" | "Asia/Thimbu" | "Asia/Thimphu" | "Asia/Tokyo" | "Asia/Tomsk" | "Asia/Ujung_Pandang" | "Asia/Ulaanbaatar" | "Asia/Ulan_Bator" | "Asia/Urumqi" | "Asia/Ust-Nera" | "Asia/Vientiane" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yangon" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Bermuda" | "Atlantic/Canary" | "Atlantic/Cape_Verde" | "Atlantic/Faeroe" | "Atlantic/Faroe" | "Atlantic/Jan_Mayen" | "Atlantic/Madeira" | "Atlantic/Reykjavik" | "Atlantic/South_Georgia" | "Atlantic/St_Helena" | "Atlantic/Stanley" | "Australia/ACT" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Broken_Hill" | "Australia/Canberra" | "Australia/Currie" | "Australia/Darwin" | "Australia/Eucla" | "Australia/Hobart" | "Australia/LHI" | "Australia/Lindeman" | "Australia/Lord_Howe" | "Australia/Melbourne" | "Australia/NSW" | "Australia/North" | "Australia/Perth" | "Australia/Queensland" | "Australia/South" | "Australia/Sydney" | "Australia/Tasmania" | "Australia/Victoria" | "Australia/West" | "Australia/Yancowinna" | "Brazil/Acre" | "Brazil/DeNoronha" | "Brazil/East" | "Brazil/West" | "CET" | "CST6CDT" | "Canada/Atlantic" | "Canada/Central" | "Canada/Eastern" | "Canada/Mountain" | "Canada/Newfoundland" | "Canada/Pacific" | "Canada/Saskatchewan" | "Canada/Yukon" | "Chile/Continental" | "Chile/EasterIsland" | "Cuba" | "EET" | "EST" | "EST5EDT" | "Egypt" | "Eire" | "Etc/GMT" | "Etc/GMT+0" | "Etc/GMT+1" | "Etc/GMT+10" | "Etc/GMT+11" | "Etc/GMT+12" | "Etc/GMT+2" | "Etc/GMT+3" | "Etc/GMT+4" | "Etc/GMT+5" | "Etc/GMT+6" | "Etc/GMT+7" | "Etc/GMT+8" | "Etc/GMT+9" | "Etc/GMT-0" | "Etc/GMT-1" | "Etc/GMT-10" | "Etc/GMT-11" | "Etc/GMT-12" | "Etc/GMT-13" | "Etc/GMT-14" | "Etc/GMT-2" | "Etc/GMT-3" | "Etc/GMT-4" | "Etc/GMT-5" | "Etc/GMT-6" | "Etc/GMT-7" | "Etc/GMT-8" | "Etc/GMT-9" | "Etc/GMT0" | "Etc/Greenwich" | "Etc/UCT" | "Etc/UTC" | "Etc/Universal" | "Etc/Zulu" | "Europe/Amsterdam" | "Europe/Andorra" | "Europe/Astrakhan" | "Europe/Athens" | "Europe/Belfast" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Busingen" | "Europe/Chisinau" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Gibraltar" | "Europe/Guernsey" | "Europe/Helsinki" | "Europe/Isle_of_Man" | "Europe/Istanbul" | "Europe/Jersey" | "Europe/Kaliningrad" | "Europe/Kiev" | "Europe/Kirov" | "Europe/Kyiv" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Luxembourg" | "Europe/Madrid" | "Europe/Malta" | "Europe/Mariehamn" | "Europe/Minsk" | "Europe/Monaco" | "Europe/Moscow" | "Europe/Nicosia" | "Europe/Oslo" | "Europe/Paris" | "Europe/Podgorica" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/San_Marino" | "Europe/Sarajevo" | "Europe/Saratov" | "Europe/Simferopol" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Tirane" | "Europe/Tiraspol" | "Europe/Ulyanovsk" | "Europe/Uzhgorod" | "Europe/Vaduz" | "Europe/Vatican" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zaporozhye" | "Europe/Zurich" | "Factory" | "GB" | "GB-Eire" | "GMT" | "GMT+0" | "GMT-0" | "GMT0" | "Greenwich" | "HST" | "Hongkong" | "Iceland" | "Indian/Antananarivo" | "Indian/Chagos" | "Indian/Christmas" | "Indian/Cocos" | "Indian/Comoro" | "Indian/Kerguelen" | "Indian/Mahe" | "Indian/Maldives" | "Indian/Mauritius" | "Indian/Mayotte" | "Indian/Reunion" | "Iran" | "Israel" | "Jamaica" | "Japan" | "Kwajalein" | "Libya" | "MET" | "MST" | "MST7MDT" | "Mexico/BajaNorte" | "Mexico/BajaSur" | "Mexico/General" | "NZ" | "NZ-CHAT" | "Navajo" | "PRC" | "PST8PDT" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Bougainville" | "Pacific/Chatham" | "Pacific/Chuuk" | "Pacific/Easter" | "Pacific/Efate" | "Pacific/Enderbury" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Funafuti" | "Pacific/Galapagos" | "Pacific/Gambier" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Johnston" | "Pacific/Kanton" | "Pacific/Kiritimati" | "Pacific/Kosrae" | "Pacific/Kwajalein" | "Pacific/Majuro" | "Pacific/Marquesas" | "Pacific/Midway" | "Pacific/Nauru" | "Pacific/Niue" | "Pacific/Norfolk" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Palau" | "Pacific/Pitcairn" | "Pacific/Pohnpei" | "Pacific/Ponape" | "Pacific/Port_Moresby" | "Pacific/Rarotonga" | "Pacific/Saipan" | "Pacific/Samoa" | "Pacific/Tahiti" | "Pacific/Tarawa" | "Pacific/Tongatapu" | "Pacific/Truk" | "Pacific/Wake" | "Pacific/Wallis" | "Pacific/Yap" | "Poland" | "Portugal" | "ROC" | "ROK" | "Singapore" | "Turkey" | "UCT" | "US/Alaska" | "US/Aleutian" | "US/Arizona" | "US/Central" | "US/East-Indiana" | "US/Eastern" | "US/Hawaii" | "US/Indiana-Starke" | "US/Michigan" | "US/Mountain" | "US/Pacific" | "US/Pacific-New" | "US/Samoa" | "UTC" | "Universal" | "W-SU" | "WET" | "Zulu";
                    };
                    /** @description The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `"balance.summary.1"`. */
                    report_type: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reporting.report_run"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReportingReportRunsReportRun: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                report_run: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reporting.report_run"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReportingReportTypes: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["reporting.report_type"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReportingReportTypesReportType: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                report_type: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reporting.report_type"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReviews: {
        parameters: {
            query?: {
                /** @description Only return reviews that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["review"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReviewsReview: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                review: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["review"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostReviewsReviewApprove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                review: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["review"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSetupAttempts: {
        parameters: {
            query: {
                /** @description A filter on the list, based on the object `created` field. The value
                 *     can be a string with an integer Unix timestamp or a
                 *     dictionary with a number of different query options. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return SetupAttempts created by the SetupIntent specified by
                 *     this ID. */
                setup_intent: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["setup_attempt"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSetupIntents: {
        parameters: {
            query?: {
                /** @description If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
                 *
                 *     It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer. */
                attach_to_self?: boolean;
                /** @description A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return SetupIntents for the customer specified by this customer ID. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return SetupIntents that associate with the specified payment method. */
                payment_method?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["setup_intent"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSetupIntents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
                     *
                     *     It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer. */
                    attach_to_self?: boolean;
                    /**
                     * automatic_payment_methods_param
                     * @description When you enable this parameter, this SetupIntent accepts payment methods that you enable in the Dashboard and that are compatible with its other parameters.
                     */
                    automatic_payment_methods?: {
                        /** @enum {string} */
                        allow_redirects?: "always" | "never";
                        enabled: boolean;
                    };
                    /** @description Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If a card is the attached payment method, you can provide a `return_url` in case further authentication is necessary. */
                    confirm?: boolean;
                    /** @description ID of the ConfirmationToken used to confirm this SetupIntent.
                     *
                     *     If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence. */
                    confirmation_token?: string;
                    /** @description ID of the Customer this SetupIntent belongs to, if one exists.
                     *
                     *     If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent. */
                    customer?: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Indicates the directions of money movement for which this payment method is intended to be used.
                     *
                     *     Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes. */
                    flow_directions?: ("inbound" | "outbound")[];
                    /** @description This hash contains details about the mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm). */
                    mandate_data?: {
                        /** customer_acceptance_param */
                        customer_acceptance: {
                            /** Format: unix-time */
                            accepted_at?: number;
                            /** offline_param */
                            offline?: Record<string, never>;
                            /** online_param */
                            online?: {
                                ip_address: string;
                                user_agent: string;
                            };
                            /** @enum {string} */
                            type: "offline" | "online";
                        };
                    } | "";
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The Stripe account ID created for this SetupIntent. */
                    on_behalf_of?: string;
                    /** @description ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
                    payment_method?: string;
                    /** @description The ID of the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) to use with this SetupIntent. */
                    payment_method_configuration?: string;
                    /**
                     * payment_method_data_params
                     * @description When included, this hash creates a PaymentMethod that is set as the [`payment_method`](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-payment_method)
                     *     value in the SetupIntent.
                     */
                    payment_method_data?: {
                        /** payment_method_param */
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        /** param */
                        affirm?: Record<string, never>;
                        /** param */
                        afterpay_clearpay?: Record<string, never>;
                        /** param */
                        alipay?: Record<string, never>;
                        /** @enum {string} */
                        allow_redisplay?: "always" | "limited" | "unspecified";
                        /** param */
                        alma?: Record<string, never>;
                        /** param */
                        amazon_pay?: Record<string, never>;
                        /** param */
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        /** param */
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        /** param */
                        bancontact?: Record<string, never>;
                        /** billing_details_inner_params */
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        /** param */
                        blik?: Record<string, never>;
                        /** param */
                        boleto?: {
                            tax_id: string;
                        };
                        /** param */
                        cashapp?: Record<string, never>;
                        /** param */
                        customer_balance?: Record<string, never>;
                        /** param */
                        eps?: {
                            /** @enum {string} */
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        /** param */
                        fpx?: {
                            /** @enum {string} */
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        /** param */
                        giropay?: Record<string, never>;
                        /** param */
                        grabpay?: Record<string, never>;
                        /** param */
                        ideal?: {
                            /** @enum {string} */
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        /** param */
                        interac_present?: Record<string, never>;
                        /** param */
                        kakao_pay?: Record<string, never>;
                        /** param */
                        klarna?: {
                            /** date_of_birth */
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        /** param */
                        konbini?: Record<string, never>;
                        /** param */
                        kr_card?: Record<string, never>;
                        /** param */
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** param */
                        mobilepay?: Record<string, never>;
                        /** param */
                        multibanco?: Record<string, never>;
                        /** param */
                        naver_pay?: {
                            /** @enum {string} */
                            funding?: "card" | "points";
                        };
                        /** param */
                        oxxo?: Record<string, never>;
                        /** param */
                        p24?: {
                            /** @enum {string} */
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank";
                        };
                        /** param */
                        payco?: Record<string, never>;
                        /** param */
                        paynow?: Record<string, never>;
                        /** param */
                        paypal?: Record<string, never>;
                        /** param */
                        pix?: Record<string, never>;
                        /** param */
                        promptpay?: Record<string, never>;
                        /** radar_options_with_hidden_options */
                        radar_options?: {
                            session?: string;
                        };
                        /** param */
                        revolut_pay?: Record<string, never>;
                        /** param */
                        samsung_pay?: Record<string, never>;
                        /** param */
                        sepa_debit?: {
                            iban: string;
                        };
                        /** param */
                        sofort?: {
                            /** @enum {string} */
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        /** param */
                        swish?: Record<string, never>;
                        /** param */
                        twint?: Record<string, never>;
                        /** @enum {string} */
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
                        /** payment_method_param */
                        us_bank_account?: {
                            /** @enum {string} */
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            /** @enum {string} */
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        /** param */
                        wechat_pay?: Record<string, never>;
                        /** param */
                        zip?: Record<string, never>;
                    };
                    /**
                     * payment_method_options_param
                     * @description Payment method-specific configuration for this SetupIntent.
                     */
                    payment_method_options?: {
                        /** setup_intent_payment_method_options_param */
                        acss_debit?: {
                            /** @enum {string} */
                            currency?: "cad" | "usd";
                            /** setup_intent_payment_method_options_mandate_options_param */
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                default_for?: ("invoice" | "subscription")[];
                                interval_description?: string;
                                /** @enum {string} */
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                /** @enum {string} */
                                transaction_type?: "business" | "personal";
                            };
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                        /** setup_intent_payment_method_options_param */
                        amazon_pay?: Record<string, never>;
                        /** setup_intent_payment_method_options_param */
                        bacs_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                        };
                        /** setup_intent_param */
                        card?: {
                            /** setup_intent_mandate_options_param */
                            mandate_options?: {
                                amount: number;
                                /** @enum {string} */
                                amount_type: "fixed" | "maximum";
                                currency: string;
                                description?: string;
                                /** Format: unix-time */
                                end_date?: number;
                                /** @enum {string} */
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                /** Format: unix-time */
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            /** @enum {string} */
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa";
                            /** @enum {string} */
                            request_three_d_secure?: "any" | "automatic" | "challenge";
                            /** setup_intent_payment_method_options_param */
                            three_d_secure?: {
                                /** @enum {string} */
                                ares_trans_status?: "A" | "C" | "I" | "N" | "R" | "U" | "Y";
                                cryptogram?: string;
                                /** @enum {string} */
                                electronic_commerce_indicator?: "01" | "02" | "05" | "06" | "07";
                                /** network_options_param */
                                network_options?: {
                                    /** cartes_bancaires_network_options_param */
                                    cartes_bancaires?: {
                                        /** @enum {string} */
                                        cb_avalgo: "0" | "1" | "2" | "3" | "4" | "A";
                                        cb_exemption?: string;
                                        cb_score?: number;
                                    };
                                };
                                requestor_challenge_indicator?: string;
                                transaction_id?: string;
                                /** @enum {string} */
                                version?: "1.0.2" | "2.1.0" | "2.2.0";
                            };
                        };
                        /** setup_intent_payment_method_options_param */
                        card_present?: Record<string, never>;
                        /** setup_intent_payment_method_options_param */
                        link?: Record<string, never>;
                        /** payment_method_options_param */
                        paypal?: {
                            billing_agreement_id?: string;
                        };
                        /** setup_intent_payment_method_options_param */
                        sepa_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                        };
                        /** setup_intent_payment_method_options_param */
                        us_bank_account?: {
                            /** linked_account_options_param */
                            financial_connections?: {
                                /** linked_account_options_filters_param */
                                filters?: {
                                    account_subcategories?: ("checking" | "savings")[];
                                };
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                prefetch?: ("balances" | "ownership" | "transactions")[];
                                return_url?: string;
                            };
                            /** mandate_options_param */
                            mandate_options?: {
                                /** @enum {string} */
                                collection_method?: "" | "paper";
                            };
                            /** networks_options_param */
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                    };
                    /** @description The list of payment method types (for example, card) that this SetupIntent can use. If you don't provide this, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
                    payment_method_types?: string[];
                    /** @description The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. To redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm). */
                    return_url?: string;
                    /**
                     * setup_intent_single_use_params
                     * @description If you populate this hash, this SetupIntent generates a `single_use` mandate after successful completion.
                     */
                    single_use?: {
                        amount: number;
                        currency: string;
                    };
                    /**
                     * @description Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.
                     * @enum {string}
                     */
                    usage?: "off_session" | "on_session";
                    /** @description Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions. */
                    use_stripe_sdk?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSetupIntentsIntent: {
        parameters: {
            query?: {
                /** @description The client secret of the SetupIntent. We require this string if you use a publishable key to retrieve the SetupIntent. */
                client_secret?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSetupIntentsIntent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
                     *
                     *     It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer. */
                    attach_to_self?: boolean;
                    /** @description ID of the Customer this SetupIntent belongs to, if one exists.
                     *
                     *     If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent. */
                    customer?: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Indicates the directions of money movement for which this payment method is intended to be used.
                     *
                     *     Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes. */
                    flow_directions?: ("inbound" | "outbound")[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. To unset this field to null, pass in an empty string. */
                    payment_method?: string;
                    /** @description The ID of the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) to use with this SetupIntent. */
                    payment_method_configuration?: string;
                    /**
                     * payment_method_data_params
                     * @description When included, this hash creates a PaymentMethod that is set as the [`payment_method`](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-payment_method)
                     *     value in the SetupIntent.
                     */
                    payment_method_data?: {
                        /** payment_method_param */
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        /** param */
                        affirm?: Record<string, never>;
                        /** param */
                        afterpay_clearpay?: Record<string, never>;
                        /** param */
                        alipay?: Record<string, never>;
                        /** @enum {string} */
                        allow_redisplay?: "always" | "limited" | "unspecified";
                        /** param */
                        alma?: Record<string, never>;
                        /** param */
                        amazon_pay?: Record<string, never>;
                        /** param */
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        /** param */
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        /** param */
                        bancontact?: Record<string, never>;
                        /** billing_details_inner_params */
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        /** param */
                        blik?: Record<string, never>;
                        /** param */
                        boleto?: {
                            tax_id: string;
                        };
                        /** param */
                        cashapp?: Record<string, never>;
                        /** param */
                        customer_balance?: Record<string, never>;
                        /** param */
                        eps?: {
                            /** @enum {string} */
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        /** param */
                        fpx?: {
                            /** @enum {string} */
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        /** param */
                        giropay?: Record<string, never>;
                        /** param */
                        grabpay?: Record<string, never>;
                        /** param */
                        ideal?: {
                            /** @enum {string} */
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        /** param */
                        interac_present?: Record<string, never>;
                        /** param */
                        kakao_pay?: Record<string, never>;
                        /** param */
                        klarna?: {
                            /** date_of_birth */
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        /** param */
                        konbini?: Record<string, never>;
                        /** param */
                        kr_card?: Record<string, never>;
                        /** param */
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** param */
                        mobilepay?: Record<string, never>;
                        /** param */
                        multibanco?: Record<string, never>;
                        /** param */
                        naver_pay?: {
                            /** @enum {string} */
                            funding?: "card" | "points";
                        };
                        /** param */
                        oxxo?: Record<string, never>;
                        /** param */
                        p24?: {
                            /** @enum {string} */
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank";
                        };
                        /** param */
                        payco?: Record<string, never>;
                        /** param */
                        paynow?: Record<string, never>;
                        /** param */
                        paypal?: Record<string, never>;
                        /** param */
                        pix?: Record<string, never>;
                        /** param */
                        promptpay?: Record<string, never>;
                        /** radar_options_with_hidden_options */
                        radar_options?: {
                            session?: string;
                        };
                        /** param */
                        revolut_pay?: Record<string, never>;
                        /** param */
                        samsung_pay?: Record<string, never>;
                        /** param */
                        sepa_debit?: {
                            iban: string;
                        };
                        /** param */
                        sofort?: {
                            /** @enum {string} */
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        /** param */
                        swish?: Record<string, never>;
                        /** param */
                        twint?: Record<string, never>;
                        /** @enum {string} */
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
                        /** payment_method_param */
                        us_bank_account?: {
                            /** @enum {string} */
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            /** @enum {string} */
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        /** param */
                        wechat_pay?: Record<string, never>;
                        /** param */
                        zip?: Record<string, never>;
                    };
                    /**
                     * payment_method_options_param
                     * @description Payment method-specific configuration for this SetupIntent.
                     */
                    payment_method_options?: {
                        /** setup_intent_payment_method_options_param */
                        acss_debit?: {
                            /** @enum {string} */
                            currency?: "cad" | "usd";
                            /** setup_intent_payment_method_options_mandate_options_param */
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                default_for?: ("invoice" | "subscription")[];
                                interval_description?: string;
                                /** @enum {string} */
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                /** @enum {string} */
                                transaction_type?: "business" | "personal";
                            };
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                        /** setup_intent_payment_method_options_param */
                        amazon_pay?: Record<string, never>;
                        /** setup_intent_payment_method_options_param */
                        bacs_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                        };
                        /** setup_intent_param */
                        card?: {
                            /** setup_intent_mandate_options_param */
                            mandate_options?: {
                                amount: number;
                                /** @enum {string} */
                                amount_type: "fixed" | "maximum";
                                currency: string;
                                description?: string;
                                /** Format: unix-time */
                                end_date?: number;
                                /** @enum {string} */
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                /** Format: unix-time */
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            /** @enum {string} */
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa";
                            /** @enum {string} */
                            request_three_d_secure?: "any" | "automatic" | "challenge";
                            /** setup_intent_payment_method_options_param */
                            three_d_secure?: {
                                /** @enum {string} */
                                ares_trans_status?: "A" | "C" | "I" | "N" | "R" | "U" | "Y";
                                cryptogram?: string;
                                /** @enum {string} */
                                electronic_commerce_indicator?: "01" | "02" | "05" | "06" | "07";
                                /** network_options_param */
                                network_options?: {
                                    /** cartes_bancaires_network_options_param */
                                    cartes_bancaires?: {
                                        /** @enum {string} */
                                        cb_avalgo: "0" | "1" | "2" | "3" | "4" | "A";
                                        cb_exemption?: string;
                                        cb_score?: number;
                                    };
                                };
                                requestor_challenge_indicator?: string;
                                transaction_id?: string;
                                /** @enum {string} */
                                version?: "1.0.2" | "2.1.0" | "2.2.0";
                            };
                        };
                        /** setup_intent_payment_method_options_param */
                        card_present?: Record<string, never>;
                        /** setup_intent_payment_method_options_param */
                        link?: Record<string, never>;
                        /** payment_method_options_param */
                        paypal?: {
                            billing_agreement_id?: string;
                        };
                        /** setup_intent_payment_method_options_param */
                        sepa_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                        };
                        /** setup_intent_payment_method_options_param */
                        us_bank_account?: {
                            /** linked_account_options_param */
                            financial_connections?: {
                                /** linked_account_options_filters_param */
                                filters?: {
                                    account_subcategories?: ("checking" | "savings")[];
                                };
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                prefetch?: ("balances" | "ownership" | "transactions")[];
                                return_url?: string;
                            };
                            /** mandate_options_param */
                            mandate_options?: {
                                /** @enum {string} */
                                collection_method?: "" | "paper";
                            };
                            /** networks_options_param */
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                    };
                    /** @description The list of payment method types (for example, card) that this SetupIntent can set up. If you don't provide this, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
                    payment_method_types?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSetupIntentsIntentCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description Reason for canceling this SetupIntent. Possible values are: `abandoned`, `requested_by_customer`, or `duplicate`
                     * @enum {string}
                     */
                    cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSetupIntentsIntentConfirm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The client secret of the SetupIntent. */
                    client_secret?: string;
                    /** @description ID of the ConfirmationToken used to confirm this SetupIntent.
                     *
                     *     If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence. */
                    confirmation_token?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    mandate_data?: {
                        /** customer_acceptance_param */
                        customer_acceptance: {
                            /** Format: unix-time */
                            accepted_at?: number;
                            /** offline_param */
                            offline?: Record<string, never>;
                            /** online_param */
                            online?: {
                                ip_address: string;
                                user_agent: string;
                            };
                            /** @enum {string} */
                            type: "offline" | "online";
                        };
                    } | "" | {
                        /** customer_acceptance_param */
                        customer_acceptance: {
                            /** online_param */
                            online: {
                                ip_address?: string;
                                user_agent?: string;
                            };
                            /** @enum {string} */
                            type: "online";
                        };
                    };
                    /** @description ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
                    payment_method?: string;
                    /**
                     * payment_method_data_params
                     * @description When included, this hash creates a PaymentMethod that is set as the [`payment_method`](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-payment_method)
                     *     value in the SetupIntent.
                     */
                    payment_method_data?: {
                        /** payment_method_param */
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        /** param */
                        affirm?: Record<string, never>;
                        /** param */
                        afterpay_clearpay?: Record<string, never>;
                        /** param */
                        alipay?: Record<string, never>;
                        /** @enum {string} */
                        allow_redisplay?: "always" | "limited" | "unspecified";
                        /** param */
                        alma?: Record<string, never>;
                        /** param */
                        amazon_pay?: Record<string, never>;
                        /** param */
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        /** param */
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        /** param */
                        bancontact?: Record<string, never>;
                        /** billing_details_inner_params */
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        /** param */
                        blik?: Record<string, never>;
                        /** param */
                        boleto?: {
                            tax_id: string;
                        };
                        /** param */
                        cashapp?: Record<string, never>;
                        /** param */
                        customer_balance?: Record<string, never>;
                        /** param */
                        eps?: {
                            /** @enum {string} */
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        /** param */
                        fpx?: {
                            /** @enum {string} */
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        /** param */
                        giropay?: Record<string, never>;
                        /** param */
                        grabpay?: Record<string, never>;
                        /** param */
                        ideal?: {
                            /** @enum {string} */
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        /** param */
                        interac_present?: Record<string, never>;
                        /** param */
                        kakao_pay?: Record<string, never>;
                        /** param */
                        klarna?: {
                            /** date_of_birth */
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        /** param */
                        konbini?: Record<string, never>;
                        /** param */
                        kr_card?: Record<string, never>;
                        /** param */
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** param */
                        mobilepay?: Record<string, never>;
                        /** param */
                        multibanco?: Record<string, never>;
                        /** param */
                        naver_pay?: {
                            /** @enum {string} */
                            funding?: "card" | "points";
                        };
                        /** param */
                        oxxo?: Record<string, never>;
                        /** param */
                        p24?: {
                            /** @enum {string} */
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank";
                        };
                        /** param */
                        payco?: Record<string, never>;
                        /** param */
                        paynow?: Record<string, never>;
                        /** param */
                        paypal?: Record<string, never>;
                        /** param */
                        pix?: Record<string, never>;
                        /** param */
                        promptpay?: Record<string, never>;
                        /** radar_options_with_hidden_options */
                        radar_options?: {
                            session?: string;
                        };
                        /** param */
                        revolut_pay?: Record<string, never>;
                        /** param */
                        samsung_pay?: Record<string, never>;
                        /** param */
                        sepa_debit?: {
                            iban: string;
                        };
                        /** param */
                        sofort?: {
                            /** @enum {string} */
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        /** param */
                        swish?: Record<string, never>;
                        /** param */
                        twint?: Record<string, never>;
                        /** @enum {string} */
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
                        /** payment_method_param */
                        us_bank_account?: {
                            /** @enum {string} */
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            /** @enum {string} */
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        /** param */
                        wechat_pay?: Record<string, never>;
                        /** param */
                        zip?: Record<string, never>;
                    };
                    /**
                     * payment_method_options_param
                     * @description Payment method-specific configuration for this SetupIntent.
                     */
                    payment_method_options?: {
                        /** setup_intent_payment_method_options_param */
                        acss_debit?: {
                            /** @enum {string} */
                            currency?: "cad" | "usd";
                            /** setup_intent_payment_method_options_mandate_options_param */
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                default_for?: ("invoice" | "subscription")[];
                                interval_description?: string;
                                /** @enum {string} */
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                /** @enum {string} */
                                transaction_type?: "business" | "personal";
                            };
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                        /** setup_intent_payment_method_options_param */
                        amazon_pay?: Record<string, never>;
                        /** setup_intent_payment_method_options_param */
                        bacs_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                        };
                        /** setup_intent_param */
                        card?: {
                            /** setup_intent_mandate_options_param */
                            mandate_options?: {
                                amount: number;
                                /** @enum {string} */
                                amount_type: "fixed" | "maximum";
                                currency: string;
                                description?: string;
                                /** Format: unix-time */
                                end_date?: number;
                                /** @enum {string} */
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                /** Format: unix-time */
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            /** @enum {string} */
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa";
                            /** @enum {string} */
                            request_three_d_secure?: "any" | "automatic" | "challenge";
                            /** setup_intent_payment_method_options_param */
                            three_d_secure?: {
                                /** @enum {string} */
                                ares_trans_status?: "A" | "C" | "I" | "N" | "R" | "U" | "Y";
                                cryptogram?: string;
                                /** @enum {string} */
                                electronic_commerce_indicator?: "01" | "02" | "05" | "06" | "07";
                                /** network_options_param */
                                network_options?: {
                                    /** cartes_bancaires_network_options_param */
                                    cartes_bancaires?: {
                                        /** @enum {string} */
                                        cb_avalgo: "0" | "1" | "2" | "3" | "4" | "A";
                                        cb_exemption?: string;
                                        cb_score?: number;
                                    };
                                };
                                requestor_challenge_indicator?: string;
                                transaction_id?: string;
                                /** @enum {string} */
                                version?: "1.0.2" | "2.1.0" | "2.2.0";
                            };
                        };
                        /** setup_intent_payment_method_options_param */
                        card_present?: Record<string, never>;
                        /** setup_intent_payment_method_options_param */
                        link?: Record<string, never>;
                        /** payment_method_options_param */
                        paypal?: {
                            billing_agreement_id?: string;
                        };
                        /** setup_intent_payment_method_options_param */
                        sepa_debit?: {
                            /** payment_method_options_mandate_options_param */
                            mandate_options?: Record<string, never>;
                        };
                        /** setup_intent_payment_method_options_param */
                        us_bank_account?: {
                            /** linked_account_options_param */
                            financial_connections?: {
                                /** linked_account_options_filters_param */
                                filters?: {
                                    account_subcategories?: ("checking" | "savings")[];
                                };
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                prefetch?: ("balances" | "ownership" | "transactions")[];
                                return_url?: string;
                            };
                            /** mandate_options_param */
                            mandate_options?: {
                                /** @enum {string} */
                                collection_method?: "" | "paper";
                            };
                            /** networks_options_param */
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            /** @enum {string} */
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                    };
                    /** @description The URL to redirect your customer back to after they authenticate on the payment method's app or site.
                     *     If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
                     *     This parameter is only used for cards and other redirect-based payment methods. */
                    return_url?: string;
                    /** @description Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions. */
                    use_stripe_sdk?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSetupIntentsIntentVerifyMicrodeposits: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                intent: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
                    amounts?: number[];
                    /** @description The client secret of the SetupIntent. */
                    client_secret?: string;
                    /** @description A six-character code starting with SM present in the microdeposit sent to the bank account. */
                    descriptor_code?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetShippingRates: {
        parameters: {
            query?: {
                /** @description Only return shipping rates that are active or inactive. */
                active?: boolean;
                /** @description A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return shipping rates for the given currency. */
                currency?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["shipping_rate"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostShippingRates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * delivery_estimate
                     * @description The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
                     */
                    delivery_estimate?: {
                        /** delivery_estimate_bound */
                        maximum?: {
                            /** @enum {string} */
                            unit: "business_day" | "day" | "hour" | "month" | "week";
                            value: number;
                        };
                        /** delivery_estimate_bound */
                        minimum?: {
                            /** @enum {string} */
                            unit: "business_day" | "day" | "hour" | "month" | "week";
                            value: number;
                        };
                    };
                    /** @description The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions. */
                    display_name: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * fixed_amount
                     * @description Describes a fixed amount to charge for shipping. Must be present if type is `fixed_amount`.
                     */
                    fixed_amount?: {
                        amount: number;
                        currency: string;
                        currency_options?: {
                            [key: string]: {
                                amount: number;
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            };
                        };
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * @description Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
                     * @enum {string}
                     */
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    /** @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`. */
                    tax_code?: string;
                    /**
                     * @description The type of calculation to use on the shipping rate.
                     * @enum {string}
                     */
                    type?: "fixed_amount";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["shipping_rate"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetShippingRatesShippingRateToken: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                shipping_rate_token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["shipping_rate"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostShippingRatesShippingRateToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shipping_rate_token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether the shipping rate can be used for new purchases. Defaults to `true`. */
                    active?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * fixed_amount_update
                     * @description Describes a fixed amount to charge for shipping. Must be present if type is `fixed_amount`.
                     */
                    fixed_amount?: {
                        currency_options?: {
                            [key: string]: {
                                amount?: number;
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            };
                        };
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * @description Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
                     * @enum {string}
                     */
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["shipping_rate"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSigmaScheduledQueryRuns: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["scheduled_query_run"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSigmaScheduledQueryRunsScheduledQueryRun: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                scheduled_query_run: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["scheduled_query_run"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSources: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land. */
                    amount?: number;
                    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. */
                    currency?: string;
                    /** @description The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`). */
                    customer?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * @description The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
                     * @enum {string}
                     */
                    flow?: "code_verification" | "none" | "receiver" | "redirect";
                    /**
                     * mandate_params
                     * @description Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
                     */
                    mandate?: {
                        /** mandate_acceptance_params */
                        acceptance?: {
                            /** Format: unix-time */
                            date?: number;
                            ip?: string;
                            /** mandate_offline_acceptance_params */
                            offline?: {
                                contact_email: string;
                            };
                            /** mandate_online_acceptance_params */
                            online?: {
                                /** Format: unix-time */
                                date?: number;
                                ip?: string;
                                user_agent?: string;
                            };
                            /** @enum {string} */
                            status: "accepted" | "pending" | "refused" | "revoked";
                            /** @enum {string} */
                            type?: "offline" | "online";
                            user_agent?: string;
                        };
                        amount?: number | "";
                        currency?: string;
                        /** @enum {string} */
                        interval?: "one_time" | "scheduled" | "variable";
                        /** @enum {string} */
                        notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
                    };
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The source to share. */
                    original_source?: string;
                    /**
                     * owner
                     * @description Information about the owner of the payment instrument that may be used or required by particular source types.
                     */
                    owner?: {
                        /** source_address */
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        email?: string;
                        name?: string;
                        phone?: string;
                    };
                    /**
                     * receiver_params
                     * @description Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`).
                     */
                    receiver?: {
                        /** @enum {string} */
                        refund_attributes_method?: "email" | "manual" | "none";
                    };
                    /**
                     * redirect_params
                     * @description Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).
                     */
                    redirect?: {
                        return_url: string;
                    };
                    /**
                     * shallow_order_specs
                     * @description Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
                     */
                    source_order?: {
                        items?: {
                            amount?: number;
                            currency?: string;
                            description?: string;
                            parent?: string;
                            quantity?: number;
                            /** @enum {string} */
                            type?: "discount" | "shipping" | "sku" | "tax";
                        }[];
                        /** order_shipping */
                        shipping?: {
                            /** address */
                            address: {
                                city?: string;
                                country?: string;
                                line1: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            carrier?: string;
                            name?: string;
                            phone?: string;
                            tracking_number?: string;
                        };
                    };
                    /** @description An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all. */
                    statement_descriptor?: string;
                    /** @description An optional token used to create the source. When passed, token properties will override source parameters. */
                    token?: string;
                    /** @description The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide) */
                    type?: string;
                    /** @enum {string} */
                    usage?: "reusable" | "single_use";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSourcesSource: {
        parameters: {
            query?: {
                /** @description The client secret of the source. Required if a publishable key is used to retrieve the source. */
                client_secret?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                source: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSourcesSource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                source: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount associated with the source. */
                    amount?: number;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * mandate_params
                     * @description Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
                     */
                    mandate?: {
                        /** mandate_acceptance_params */
                        acceptance?: {
                            /** Format: unix-time */
                            date?: number;
                            ip?: string;
                            /** mandate_offline_acceptance_params */
                            offline?: {
                                contact_email: string;
                            };
                            /** mandate_online_acceptance_params */
                            online?: {
                                /** Format: unix-time */
                                date?: number;
                                ip?: string;
                                user_agent?: string;
                            };
                            /** @enum {string} */
                            status: "accepted" | "pending" | "refused" | "revoked";
                            /** @enum {string} */
                            type?: "offline" | "online";
                            user_agent?: string;
                        };
                        amount?: number | "";
                        currency?: string;
                        /** @enum {string} */
                        interval?: "one_time" | "scheduled" | "variable";
                        /** @enum {string} */
                        notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /**
                     * owner
                     * @description Information about the owner of the payment instrument that may be used or required by particular source types.
                     */
                    owner?: {
                        /** source_address */
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        email?: string;
                        name?: string;
                        phone?: string;
                    };
                    /**
                     * order_params
                     * @description Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
                     */
                    source_order?: {
                        items?: {
                            amount?: number;
                            currency?: string;
                            description?: string;
                            parent?: string;
                            quantity?: number;
                            /** @enum {string} */
                            type?: "discount" | "shipping" | "sku" | "tax";
                        }[];
                        /** order_shipping */
                        shipping?: {
                            /** address */
                            address: {
                                city?: string;
                                country?: string;
                                line1: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            carrier?: string;
                            name?: string;
                            phone?: string;
                            tracking_number?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSourcesSourceMandateNotificationsMandateNotification: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                mandate_notification: string;
                source: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["source_mandate_notification"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSourcesSourceSourceTransactions: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                source: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["source_transaction"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSourcesSourceSourceTransactionsSourceTransaction: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                source: string;
                source_transaction: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["source_transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSourcesSourceVerify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                source: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The values needed to verify the source. */
                    values: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["source"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionItems: {
        parameters: {
            query: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description The ID of the subscription whose items will be retrieved. */
                subscription: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["subscription_item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
                    billing_thresholds?: {
                        usage_gte: number;
                    } | "";
                    /** @description The coupons to redeem into discounts for the subscription item. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
                     *
                     *     Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
                     *
                     *     Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
                     *
                     *     Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
                     * @enum {string}
                     */
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    /** @description The ID of the price object. */
                    price?: string;
                    /**
                     * recurring_price_data
                     * @description Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
                     */
                    price_data?: {
                        currency: string;
                        product: string;
                        /** recurring_adhoc */
                        recurring: {
                            /** @enum {string} */
                            interval: "day" | "month" | "week" | "year";
                            interval_count?: number;
                        };
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    };
                    /**
                     * @description Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
                     * @enum {string}
                     */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    /**
                     * Format: unix-time
                     * @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
                     */
                    proration_date?: number;
                    /** @description The quantity you'd like to apply to the subscription item you're creating. */
                    quantity?: number;
                    /** @description The identifier of the subscription to modify. */
                    subscription: string;
                    /** @description A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
                    tax_rates?: string[] | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_item"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionItemsItem: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                item: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_item"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionItemsItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
                    billing_thresholds?: {
                        usage_gte: number;
                    } | "";
                    /** @description The coupons to redeem into discounts for the subscription item. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session). */
                    off_session?: boolean;
                    /**
                     * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
                     *
                     *     Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
                     *
                     *     Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
                     *
                     *     Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
                     * @enum {string}
                     */
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    /** @description The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item's price, `quantity` is set to 1 unless a `quantity` parameter is provided. */
                    price?: string;
                    /**
                     * recurring_price_data
                     * @description Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
                     */
                    price_data?: {
                        currency: string;
                        product: string;
                        /** recurring_adhoc */
                        recurring: {
                            /** @enum {string} */
                            interval: "day" | "month" | "week" | "year";
                            interval_count?: number;
                        };
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        /** Format: decimal */
                        unit_amount_decimal?: string;
                    };
                    /**
                     * @description Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
                     * @enum {string}
                     */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    /**
                     * Format: unix-time
                     * @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
                     */
                    proration_date?: number;
                    /** @description The quantity you'd like to apply to the subscription item you're creating. */
                    quantity?: number;
                    /** @description A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
                    tax_rates?: string[] | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_item"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteSubscriptionItemsItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`. */
                    clear_usage?: boolean;
                    /**
                     * @description Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
                     * @enum {string}
                     */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    /**
                     * Format: unix-time
                     * @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
                     */
                    proration_date?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_subscription_item"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionItemsSubscriptionItemUsageRecordSummaries: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                subscription_item: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["usage_record_summary"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionItemsSubscriptionItemUsageRecords: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription_item: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://stripe.com/docs/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value.
                     * @enum {string}
                     */
                    action?: "increment" | "set";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The usage quantity for the specified timestamp. */
                    quantity: number;
                    /** @description The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`, and must not be in the future. When passing `"now"`, Stripe records usage for the current time. Default is `"now"` if a value is not provided. */
                    timestamp?: "now" | number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["usage_record"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionSchedules: {
        parameters: {
            query?: {
                /** @description Only return subscription schedules that were created canceled the given date interval. */
                canceled_at?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return subscription schedules that completed during the given date interval. */
                completed_at?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return subscription schedules that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return subscription schedules for the given customer. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return subscription schedules that were released during the given date interval. */
                released_at?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return subscription schedules that have not started yet. */
                scheduled?: boolean;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["subscription_schedule"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionSchedules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The identifier of the customer to create the subscription schedule for. */
                    customer?: string;
                    /**
                     * default_settings_params
                     * @description Object representing the subscription schedule's default settings.
                     */
                    default_settings?: {
                        application_fee_percent?: number;
                        /** automatic_tax_config */
                        automatic_tax?: {
                            enabled: boolean;
                            /** param */
                            liability?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        /** @enum {string} */
                        billing_cycle_anchor?: "automatic" | "phase_start";
                        billing_thresholds?: {
                            amount_gte?: number;
                            reset_billing_cycle_anchor?: boolean;
                        } | "";
                        /** @enum {string} */
                        collection_method?: "charge_automatically" | "send_invoice";
                        default_payment_method?: string;
                        description?: string | "";
                        /** subscription_schedule_default_settings_param */
                        invoice_settings?: {
                            account_tax_ids?: string[] | "";
                            days_until_due?: number;
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        on_behalf_of?: string | "";
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        } | "";
                    };
                    /**
                     * @description Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
                     * @enum {string}
                     */
                    end_behavior?: "cancel" | "none" | "release" | "renew";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's item(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls. */
                    from_subscription?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. */
                    phases?: {
                        add_invoice_items?: {
                            discounts?: {
                                coupon?: string;
                                discount?: string;
                                promotion_code?: string;
                            }[];
                            price?: string;
                            /** one_time_price_data_with_negative_amounts */
                            price_data?: {
                                currency: string;
                                product: string;
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        }[];
                        application_fee_percent?: number;
                        /** automatic_tax_config */
                        automatic_tax?: {
                            enabled: boolean;
                            /** param */
                            liability?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        /** @enum {string} */
                        billing_cycle_anchor?: "automatic" | "phase_start";
                        billing_thresholds?: {
                            amount_gte?: number;
                            reset_billing_cycle_anchor?: boolean;
                        } | "";
                        /** @enum {string} */
                        collection_method?: "charge_automatically" | "send_invoice";
                        coupon?: string;
                        currency?: string;
                        default_payment_method?: string;
                        default_tax_rates?: string[] | "";
                        description?: string | "";
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        /** Format: unix-time */
                        end_date?: number;
                        /** invoice_settings */
                        invoice_settings?: {
                            account_tax_ids?: string[] | "";
                            days_until_due?: number;
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        items: {
                            billing_thresholds?: {
                                usage_gte: number;
                            } | "";
                            discounts?: {
                                coupon?: string;
                                discount?: string;
                                promotion_code?: string;
                            }[] | "";
                            metadata?: {
                                [key: string]: string;
                            };
                            price?: string;
                            /** recurring_price_data */
                            price_data?: {
                                currency: string;
                                product: string;
                                /** recurring_adhoc */
                                recurring: {
                                    /** @enum {string} */
                                    interval: "day" | "month" | "week" | "year";
                                    interval_count?: number;
                                };
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        }[];
                        iterations?: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                        /** @enum {string} */
                        proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        /** transfer_data_specs */
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        };
                        trial?: boolean;
                        /** Format: unix-time */
                        trial_end?: number;
                    }[];
                    /** @description When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on. */
                    start_date?: number | "now";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_schedule"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionSchedulesSchedule: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                schedule: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_schedule"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionSchedulesSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                schedule: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * default_settings_params
                     * @description Object representing the subscription schedule's default settings.
                     */
                    default_settings?: {
                        application_fee_percent?: number;
                        /** automatic_tax_config */
                        automatic_tax?: {
                            enabled: boolean;
                            /** param */
                            liability?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        /** @enum {string} */
                        billing_cycle_anchor?: "automatic" | "phase_start";
                        billing_thresholds?: {
                            amount_gte?: number;
                            reset_billing_cycle_anchor?: boolean;
                        } | "";
                        /** @enum {string} */
                        collection_method?: "charge_automatically" | "send_invoice";
                        default_payment_method?: string;
                        description?: string | "";
                        /** subscription_schedule_default_settings_param */
                        invoice_settings?: {
                            account_tax_ids?: string[] | "";
                            days_until_due?: number;
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        on_behalf_of?: string | "";
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        } | "";
                    };
                    /**
                     * @description Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
                     * @enum {string}
                     */
                    end_behavior?: "cancel" | "none" | "release" | "renew";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted. */
                    phases?: {
                        add_invoice_items?: {
                            discounts?: {
                                coupon?: string;
                                discount?: string;
                                promotion_code?: string;
                            }[];
                            price?: string;
                            /** one_time_price_data_with_negative_amounts */
                            price_data?: {
                                currency: string;
                                product: string;
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        }[];
                        application_fee_percent?: number;
                        /** automatic_tax_config */
                        automatic_tax?: {
                            enabled: boolean;
                            /** param */
                            liability?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        /** @enum {string} */
                        billing_cycle_anchor?: "automatic" | "phase_start";
                        billing_thresholds?: {
                            amount_gte?: number;
                            reset_billing_cycle_anchor?: boolean;
                        } | "";
                        /** @enum {string} */
                        collection_method?: "charge_automatically" | "send_invoice";
                        coupon?: string;
                        default_payment_method?: string;
                        default_tax_rates?: string[] | "";
                        description?: string | "";
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        end_date?: number | "now";
                        /** invoice_settings */
                        invoice_settings?: {
                            account_tax_ids?: string[] | "";
                            days_until_due?: number;
                            /** param */
                            issuer?: {
                                account?: string;
                                /** @enum {string} */
                                type: "account" | "self";
                            };
                        };
                        items: {
                            billing_thresholds?: {
                                usage_gte: number;
                            } | "";
                            discounts?: {
                                coupon?: string;
                                discount?: string;
                                promotion_code?: string;
                            }[] | "";
                            metadata?: {
                                [key: string]: string;
                            };
                            price?: string;
                            /** recurring_price_data */
                            price_data?: {
                                currency: string;
                                product: string;
                                /** recurring_adhoc */
                                recurring: {
                                    /** @enum {string} */
                                    interval: "day" | "month" | "week" | "year";
                                    interval_count?: number;
                                };
                                /** @enum {string} */
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                /** Format: decimal */
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        }[];
                        iterations?: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                        /** @enum {string} */
                        proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        start_date?: number | "now";
                        /** transfer_data_specs */
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        };
                        trial?: boolean;
                        trial_end?: number | "now";
                    }[];
                    /**
                     * @description If the update changes the current phase, indicates whether the changes should be prorated. The default value is `create_prorations`.
                     * @enum {string}
                     */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_schedule"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionSchedulesScheduleCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                schedule: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`. */
                    invoice_now?: boolean;
                    /** @description If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`. */
                    prorate?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_schedule"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionSchedulesScheduleRelease: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                schedule: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Keep any cancellation on the subscription that the schedule has set */
                    preserve_cancel_date?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_schedule"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptions: {
        parameters: {
            query?: {
                /** @description Filter subscriptions by their automatic tax settings. */
                automatic_tax?: {
                    enabled: boolean;
                };
                /** @description The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`. */
                collection_method?: "charge_automatically" | "send_invoice";
                /** @description Only return subscriptions that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return subscriptions whose current_period_end falls within the given date interval. */
                current_period_end?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return subscriptions whose current_period_start falls within the given date interval. */
                current_period_start?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description The ID of the customer whose subscriptions will be retrieved. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Filter for subscriptions that contain this recurring price ID. */
                price?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned. */
                status?: "active" | "all" | "canceled" | "ended" | "incomplete" | "incomplete_expired" | "past_due" | "paused" | "trialing" | "unpaid";
                /** @description Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set. */
                test_clock?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["subscription"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items. */
                    add_invoice_items?: {
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[];
                        price?: string;
                        /** one_time_price_data_with_negative_amounts */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
                    application_fee_percent?: number | "";
                    /**
                     * automatic_tax_config
                     * @description Automatic tax settings for this subscription. We recommend you only include this parameter when the existing value is being changed.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * Format: unix-time
                     * @description For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.
                     */
                    backdate_start_date?: number;
                    /**
                     * Format: unix-time
                     * @description A future timestamp in UTC format to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). The anchor is the reference point that aligns future billing cycle dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals.
                     */
                    billing_cycle_anchor?: number;
                    /**
                     * billing_cycle_anchor_config_param
                     * @description Mutually exclusive with billing_cycle_anchor and only valid with monthly and yearly price intervals. When provided, the billing_cycle_anchor is set to the next occurence of the day_of_month at the hour, minute, and second UTC.
                     */
                    billing_cycle_anchor_config?: {
                        day_of_month: number;
                        hour?: number;
                        minute?: number;
                        month?: number;
                        second?: number;
                    };
                    /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
                    billing_thresholds?: {
                        amount_gte?: number;
                        reset_billing_cycle_anchor?: boolean;
                    } | "";
                    /**
                     * Format: unix-time
                     * @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period.
                     */
                    cancel_at?: number;
                    /** @description Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. */
                    cancel_at_period_end?: boolean;
                    /**
                     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
                     * @enum {string}
                     */
                    collection_method?: "charge_automatically" | "send_invoice";
                    /** @description The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                    coupon?: string;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description The identifier of the customer to subscribe. */
                    customer: string;
                    /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
                    days_until_due?: number;
                    /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
                    default_payment_method?: string;
                    /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
                    default_source?: string;
                    /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
                    default_tax_rates?: string[] | "";
                    /** @description The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
                    description?: string;
                    /** @description The coupons to redeem into discounts for the subscription. If not specified or empty, inherits the discount from the subscription's customer. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * invoice_settings_param
                     * @description All invoices will be billed using the specified settings.
                     */
                    invoice_settings?: {
                        account_tax_ids?: string[] | "";
                        /** param */
                        issuer?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /** @description A list of up to 20 subscription items, each with an attached price. */
                    items?: {
                        billing_thresholds?: {
                            usage_gte: number;
                        } | "";
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        metadata?: {
                            [key: string]: string;
                        };
                        price?: string;
                        /** recurring_price_data */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** recurring_adhoc */
                            recurring: {
                                /** @enum {string} */
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session). */
                    off_session?: boolean;
                    /** @description The account on behalf of which to charge, for each of the subscription's invoices. */
                    on_behalf_of?: string | "";
                    /**
                     * @description Only applies to subscriptions with `collection_method=charge_automatically`.
                     *
                     *     Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can't be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
                     *
                     *     Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.
                     *
                     *     Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice can't be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn't create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
                     *
                     *     `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.
                     *
                     *     Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.
                     * @enum {string}
                     */
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    /**
                     * payment_settings
                     * @description Payment settings to pass to invoices created by the subscription.
                     */
                    payment_settings?: {
                        /** payment_method_options */
                        payment_method_options?: {
                            acss_debit?: {
                                /** mandate_options_param */
                                mandate_options?: {
                                    /** @enum {string} */
                                    transaction_type?: "business" | "personal";
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                            bancontact?: {
                                /** @enum {string} */
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            } | "";
                            card?: {
                                /** mandate_options_param */
                                mandate_options?: {
                                    amount?: number;
                                    /** @enum {string} */
                                    amount_type?: "fixed" | "maximum";
                                    description?: string;
                                };
                                /** @enum {string} */
                                network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa";
                                /** @enum {string} */
                                request_three_d_secure?: "any" | "automatic" | "challenge";
                            } | "";
                            customer_balance?: {
                                /** bank_transfer_param */
                                bank_transfer?: {
                                    /** eu_bank_transfer_param */
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            sepa_debit?: Record<string, never> | "";
                            us_bank_account?: {
                                /** invoice_linked_account_options_param */
                                financial_connections?: {
                                    /** invoice_linked_account_options_filters_param */
                                    filters?: {
                                        account_subcategories?: ("checking" | "savings")[];
                                    };
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                    prefetch?: ("balances" | "ownership" | "transactions")[];
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                        };
                        payment_method_types?: ("ach_credit_transfer" | "ach_debit" | "acss_debit" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "jp_credit_transfer" | "kakao_pay" | "konbini" | "kr_card" | "link" | "multibanco" | "naver_pay" | "p24" | "payco" | "paynow" | "paypal" | "promptpay" | "revolut_pay" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "swish" | "us_bank_account" | "wechat_pay")[] | "";
                        /** @enum {string} */
                        save_default_payment_method?: "off" | "on_subscription";
                    };
                    /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
                    pending_invoice_item_interval?: {
                        /** @enum {string} */
                        interval: "day" | "month" | "week" | "year";
                        interval_count?: number;
                    } | "";
                    /** @description The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                    promotion_code?: string;
                    /**
                     * @description Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) resulting from the `billing_cycle_anchor`. If no value is passed, the default is `create_prorations`.
                     * @enum {string}
                     */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    /**
                     * transfer_data_specs
                     * @description If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges.
                     */
                    transfer_data?: {
                        amount_percent?: number;
                        destination: string;
                    };
                    /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
                    trial_end?: "now" | number;
                    /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
                    trial_from_plan?: boolean;
                    /** @description Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
                    trial_period_days?: number;
                    /**
                     * trial_settings_config
                     * @description Settings related to subscription trials.
                     */
                    trial_settings?: {
                        /** end_behavior */
                        end_behavior: {
                            /** @enum {string} */
                            missing_payment_method: "cancel" | "create_invoice" | "pause";
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionsSearch: {
        parameters: {
            query: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
                page?: string;
                /** @description The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions). */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["subscription"][];
                        has_more: boolean;
                        next_page?: string | null;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value.
                         * @enum {string}
                         */
                        object: "search_result";
                        /** @description The total number of objects that match the query, only accurate up to 10,000. */
                        total_count?: number;
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionsSubscriptionExposedId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                subscription_exposed_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionsSubscriptionExposedId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription_exposed_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items. */
                    add_invoice_items?: {
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[];
                        price?: string;
                        /** one_time_price_data_with_negative_amounts */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
                    application_fee_percent?: number | "";
                    /**
                     * automatic_tax_config
                     * @description Automatic tax settings for this subscription. We recommend you only include this parameter when the existing value is being changed.
                     */
                    automatic_tax?: {
                        enabled: boolean;
                        /** param */
                        liability?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /**
                     * @description Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
                     * @enum {string}
                     */
                    billing_cycle_anchor?: "now" | "unchanged";
                    /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
                    billing_thresholds?: {
                        amount_gte?: number;
                        reset_billing_cycle_anchor?: boolean;
                    } | "";
                    /** @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
                    cancel_at?: number | "";
                    /** @description Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. */
                    cancel_at_period_end?: boolean;
                    /**
                     * cancellation_details_param
                     * @description Details about why this subscription was cancelled
                     */
                    cancellation_details?: {
                        comment?: string | "";
                        /** @enum {string} */
                        feedback?: "" | "customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused";
                    };
                    /**
                     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
                     * @enum {string}
                     */
                    collection_method?: "charge_automatically" | "send_invoice";
                    /** @description The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                    coupon?: string;
                    /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
                    days_until_due?: number;
                    /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
                    default_payment_method?: string;
                    /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
                    default_source?: string | "";
                    /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
                    default_tax_rates?: string[] | "";
                    /** @description The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
                    description?: string | "";
                    /** @description The coupons to redeem into discounts for the subscription. If not specified or empty, inherits the discount from the subscription's customer. */
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                        promotion_code?: string;
                    }[] | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * invoice_settings_param
                     * @description All invoices will be billed using the specified settings.
                     */
                    invoice_settings?: {
                        account_tax_ids?: string[] | "";
                        /** param */
                        issuer?: {
                            account?: string;
                            /** @enum {string} */
                            type: "account" | "self";
                        };
                    };
                    /** @description A list of up to 20 subscription items, each with an attached price. */
                    items?: {
                        billing_thresholds?: {
                            usage_gte: number;
                        } | "";
                        clear_usage?: boolean;
                        deleted?: boolean;
                        discounts?: {
                            coupon?: string;
                            discount?: string;
                            promotion_code?: string;
                        }[] | "";
                        id?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        price?: string;
                        /** recurring_price_data */
                        price_data?: {
                            currency: string;
                            product: string;
                            /** recurring_adhoc */
                            recurring: {
                                /** @enum {string} */
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            /** @enum {string} */
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            /** Format: decimal */
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    }[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session). */
                    off_session?: boolean;
                    /** @description The account on behalf of which to charge, for each of the subscription's invoices. */
                    on_behalf_of?: string | "";
                    /** @description If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment). */
                    pause_collection?: {
                        /** @enum {string} */
                        behavior: "keep_as_draft" | "mark_uncollectible" | "void";
                        /** Format: unix-time */
                        resumes_at?: number;
                    } | "";
                    /**
                     * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
                     *
                     *     Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
                     *
                     *     Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
                     *
                     *     Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
                     * @enum {string}
                     */
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    /**
                     * payment_settings
                     * @description Payment settings to pass to invoices created by the subscription.
                     */
                    payment_settings?: {
                        /** payment_method_options */
                        payment_method_options?: {
                            acss_debit?: {
                                /** mandate_options_param */
                                mandate_options?: {
                                    /** @enum {string} */
                                    transaction_type?: "business" | "personal";
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                            bancontact?: {
                                /** @enum {string} */
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            } | "";
                            card?: {
                                /** mandate_options_param */
                                mandate_options?: {
                                    amount?: number;
                                    /** @enum {string} */
                                    amount_type?: "fixed" | "maximum";
                                    description?: string;
                                };
                                /** @enum {string} */
                                network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "link" | "mastercard" | "unionpay" | "unknown" | "visa";
                                /** @enum {string} */
                                request_three_d_secure?: "any" | "automatic" | "challenge";
                            } | "";
                            customer_balance?: {
                                /** bank_transfer_param */
                                bank_transfer?: {
                                    /** eu_bank_transfer_param */
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            sepa_debit?: Record<string, never> | "";
                            us_bank_account?: {
                                /** invoice_linked_account_options_param */
                                financial_connections?: {
                                    /** invoice_linked_account_options_filters_param */
                                    filters?: {
                                        account_subcategories?: ("checking" | "savings")[];
                                    };
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                    prefetch?: ("balances" | "ownership" | "transactions")[];
                                };
                                /** @enum {string} */
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            } | "";
                        };
                        payment_method_types?: ("ach_credit_transfer" | "ach_debit" | "acss_debit" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "jp_credit_transfer" | "kakao_pay" | "konbini" | "kr_card" | "link" | "multibanco" | "naver_pay" | "p24" | "payco" | "paynow" | "paypal" | "promptpay" | "revolut_pay" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "swish" | "us_bank_account" | "wechat_pay")[] | "";
                        /** @enum {string} */
                        save_default_payment_method?: "off" | "on_subscription";
                    };
                    /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
                    pending_invoice_item_interval?: {
                        /** @enum {string} */
                        interval: "day" | "month" | "week" | "year";
                        interval_count?: number;
                    } | "";
                    /** @description The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
                    promotion_code?: string;
                    /**
                     * @description Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
                     * @enum {string}
                     */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    /**
                     * Format: unix-time
                     * @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#upcoming_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
                     */
                    proration_date?: number;
                    /** @description If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value. */
                    transfer_data?: {
                        amount_percent?: number;
                        destination: string;
                    } | "";
                    /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
                    trial_end?: "now" | number;
                    /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
                    trial_from_plan?: boolean;
                    /**
                     * trial_settings_config
                     * @description Settings related to subscription trials.
                     */
                    trial_settings?: {
                        /** end_behavior */
                        end_behavior: {
                            /** @enum {string} */
                            missing_payment_method: "cancel" | "create_invoice" | "pause";
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteSubscriptionsSubscriptionExposedId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription_exposed_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * cancellation_details_param
                     * @description Details about why this subscription was cancelled
                     */
                    cancellation_details?: {
                        comment?: string | "";
                        /** @enum {string} */
                        feedback?: "" | "customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. Defaults to `false`. */
                    invoice_now?: boolean;
                    /** @description Will generate a proration invoice item that credits remaining unused time until the subscription period end. Defaults to `false`. */
                    prorate?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteSubscriptionsSubscriptionExposedIdDiscount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription_exposed_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_discount"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionsSubscriptionResume: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description The billing cycle anchor that applies when the subscription is resumed. Either `now` or `unchanged`. The default is `now`. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
                     * @enum {string}
                     */
                    billing_cycle_anchor?: "now" | "unchanged";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * @description Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
                     * @enum {string}
                     */
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    /**
                     * Format: unix-time
                     * @description If set, the proration will be calculated as though the subscription was resumed at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
                     */
                    proration_date?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxCalculations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description The ID of an existing customer to use for this calculation. If provided, the customer's address and tax IDs are copied to `customer_details`. */
                    customer?: string;
                    /**
                     * customer_details
                     * @description Details about the customer, including address and tax IDs.
                     */
                    customer_details?: {
                        /** postal_address */
                        address?: {
                            city?: string | "";
                            country: string;
                            line1?: string | "";
                            line2?: string | "";
                            postal_code?: string | "";
                            state?: string | "";
                        };
                        /** @enum {string} */
                        address_source?: "billing" | "shipping";
                        ip_address?: string;
                        tax_ids?: {
                            /** @enum {string} */
                            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
                            value: string;
                        }[];
                        /** @enum {string} */
                        taxability_override?: "customer_exempt" | "none" | "reverse_charge";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A list of items the customer is purchasing. */
                    line_items: {
                        amount: number;
                        product?: string;
                        quantity?: number;
                        reference?: string;
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive";
                        tax_code?: string;
                    }[];
                    /**
                     * ship_from_details
                     * @description Details about the address from which the goods are being shipped.
                     */
                    ship_from_details?: {
                        /** merchant_postal_address */
                        address: {
                            city?: string | "";
                            country: string;
                            line1?: string | "";
                            line2?: string | "";
                            postal_code?: string | "";
                            state?: string | "";
                        };
                    };
                    /**
                     * shipping_cost
                     * @description Shipping cost details to be used for the calculation.
                     */
                    shipping_cost?: {
                        amount?: number;
                        shipping_rate?: string;
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive";
                        tax_code?: string;
                    };
                    /** @description Timestamp of date at which the tax rules and rates in effect applies for the calculation. Measured in seconds since the Unix epoch. Can be up to 48 hours in the past, and up to 48 hours in the future. */
                    tax_date?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax.calculation"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxCalculationsCalculation: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                calculation: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax.calculation"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxCalculationsCalculationLineItems: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                calculation: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["tax.calculation_line_item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxRegistrations: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description The status of the Tax Registration. */
                status?: "active" | "all" | "expired" | "scheduled";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["tax.registration"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxRegistrations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Time at which the Tax Registration becomes active. It can be either `now` to indicate the current time, or a future timestamp measured in seconds since the Unix epoch. */
                    active_from: "now" | number;
                    /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
                    country: string;
                    /**
                     * country_options
                     * @description Specific options for a registration in the specified `country`.
                     */
                    country_options: {
                        /** default */
                        ae?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** europe */
                        at?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** default */
                        au?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** europe */
                        be?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        bg?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** default */
                        bh?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** simplified */
                        by?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** canada */
                        ca?: {
                            /** province_standard */
                            province_standard?: {
                                province: string;
                            };
                            /** @enum {string} */
                            type: "province_standard" | "simplified" | "standard";
                        };
                        /** default */
                        ch?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** simplified */
                        cl?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        co?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        cr?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** europe */
                        cy?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        cz?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        de?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        dk?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** simplified */
                        ec?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** europe */
                        ee?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** simplified */
                        eg?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** europe */
                        es?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        fi?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        fr?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** default */
                        gb?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** simplified */
                        ge?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** europe */
                        gr?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        hr?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        hu?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** simplified */
                        id?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** europe */
                        ie?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** default */
                        is?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** europe */
                        it?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** default */
                        jp?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** simplified */
                        ke?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        kr?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        kz?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** europe */
                        lt?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        lu?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        lv?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** simplified */
                        ma?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        md?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** europe */
                        mt?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** simplified */
                        mx?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        my?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        ng?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** europe */
                        nl?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** default */
                        no?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** default */
                        nz?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** default */
                        om?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** europe */
                        pl?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        pt?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        ro?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** default */
                        rs?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** simplified */
                        ru?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        sa?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** europe */
                        se?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** default */
                        sg?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                        /** europe */
                        si?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** europe */
                        sk?: {
                            /** standard */
                            standard?: {
                                /** @enum {string} */
                                place_of_supply_scheme: "small_seller" | "standard";
                            };
                            /** @enum {string} */
                            type: "ioss" | "oss_non_union" | "oss_union" | "standard";
                        };
                        /** simplified */
                        th?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        tr?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        tz?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** united_states */
                        us?: {
                            /** local_amusement_tax */
                            local_amusement_tax?: {
                                jurisdiction: string;
                            };
                            /** local_lease_tax */
                            local_lease_tax?: {
                                jurisdiction: string;
                            };
                            state: string;
                            /** state_sales_tax */
                            state_sales_tax?: {
                                elections: {
                                    jurisdiction?: string;
                                    /** @enum {string} */
                                    type: "local_use_tax" | "simplified_sellers_use_tax" | "single_local_use_tax";
                                }[];
                            };
                            /** @enum {string} */
                            type: "local_amusement_tax" | "local_lease_tax" | "state_communications_tax" | "state_retail_delivery_fee" | "state_sales_tax";
                        };
                        /** simplified */
                        uz?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** simplified */
                        vn?: {
                            /** @enum {string} */
                            type: "simplified";
                        };
                        /** default */
                        za?: {
                            /** @enum {string} */
                            type: "standard";
                        };
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description If set, the Tax Registration stops being active at this time. If not set, the Tax Registration will be active indefinitely. Timestamp measured in seconds since the Unix epoch.
                     */
                    expires_at?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax.registration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxRegistrationsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax.registration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxRegistrationsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Time at which the registration becomes active. It can be either `now` to indicate the current time, or a timestamp measured in seconds since the Unix epoch. */
                    active_from?: "now" | number;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. It can be either `now` to indicate the current time, or a timestamp measured in seconds since the Unix epoch. */
                    expires_at?: "now" | number | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax.registration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxSettings: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax.settings"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * defaults_param
                     * @description Default configuration to be used on Stripe Tax calculations.
                     */
                    defaults?: {
                        /** @enum {string} */
                        tax_behavior?: "exclusive" | "inclusive" | "inferred_by_currency";
                        tax_code?: string;
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * head_office_param
                     * @description The place where your business is located.
                     */
                    head_office?: {
                        /** validated_country_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax.settings"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxTransactionsCreateFromCalculation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Tax Calculation ID to be used as input when creating the transaction. */
                    calculation: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * Format: unix-time
                     * @description The Unix timestamp representing when the tax liability is assumed or reduced, which determines the liability posting period and handling in tax liability reports. The timestamp must fall within the `tax_date` and the current time, unless the `tax_date` is scheduled in advance. Defaults to the current time.
                     */
                    posted_at?: number;
                    /** @description A custom order or sale identifier, such as 'myOrder_123'. Must be unique across all transactions, including reversals. */
                    reference: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax.transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxTransactionsCreateReversal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A flat amount to reverse across the entire transaction, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) in negative. This value represents the total amount to refund from the transaction, including taxes. */
                    flat_amount?: number;
                    /** @description The line item amounts to reverse. */
                    line_items?: {
                        amount: number;
                        amount_tax: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        original_line_item: string;
                        quantity?: number;
                        reference: string;
                    }[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * @description If `partial`, the provided line item or shipping cost amounts are reversed. If `full`, the original transaction is fully reversed.
                     * @enum {string}
                     */
                    mode: "full" | "partial";
                    /** @description The ID of the Transaction to partially or fully reverse. */
                    original_transaction: string;
                    /** @description A custom identifier for this reversal, such as `myOrder_123-refund_1`, which must be unique across all transactions. The reference helps identify this reversal transaction in exported [tax reports](https://stripe.com/docs/tax/reports). */
                    reference: string;
                    /**
                     * transaction_shipping_cost_reversal
                     * @description The shipping cost to reverse.
                     */
                    shipping_cost?: {
                        amount: number;
                        amount_tax: number;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax.transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxTransactionsTransaction: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                transaction: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax.transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxTransactionsTransactionLineItems: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                transaction: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["tax.transaction_line_item"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxCodes: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["tax_code"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxCodesId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax_code"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxIds: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description The account or customer the tax ID belongs to. Defaults to `owner[type]=self`. */
                owner?: {
                    account?: string;
                    customer?: string;
                    /** @enum {string} */
                    type: "account" | "application" | "customer" | "self";
                };
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["tax_id"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxIds: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * owner_params
                     * @description The account or customer the tax ID belongs to. Defaults to `owner[type]=self`.
                     */
                    owner?: {
                        account?: string;
                        customer?: string;
                        /** @enum {string} */
                        type: "account" | "application" | "customer" | "self";
                    };
                    /**
                     * @description Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `by_tin`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `li_vat`, `ma_vat`, `md_vat`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `tz_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `uz_tin`, `uz_vat`, `ve_rif`, `vn_tin`, or `za_vat`
                     * @enum {string}
                     */
                    type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "by_tin" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "li_vat" | "ma_vat" | "md_vat" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "tz_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "uz_tin" | "uz_vat" | "ve_rif" | "vn_tin" | "za_vat";
                    /** @description Value of the tax ID. */
                    value: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax_id"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxIdsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax_id"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteTaxIdsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_tax_id"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxRates: {
        parameters: {
            query?: {
                /** @description Optional flag to filter by tax rates that are either active or inactive (archived). */
                active?: boolean;
                /** @description Optional range for filtering created date. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Optional flag to filter by tax rates that are inclusive (or those that are not inclusive). */
                inclusive?: boolean;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["tax_rate"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxRates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
                    active?: boolean;
                    /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
                    country?: string;
                    /** @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
                    description?: string;
                    /** @description The display name of the tax rate, which will be shown to users. */
                    display_name: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description This specifies if the tax rate is inclusive or exclusive. */
                    inclusive: boolean;
                    /** @description The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
                    jurisdiction?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description This represents the tax rate percent out of 100. */
                    percentage: number;
                    /** @description [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
                    state?: string;
                    /**
                     * @description The high-level tax type, such as `vat` or `sales_tax`.
                     * @enum {string}
                     */
                    tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "retail_delivery_fee" | "rst" | "sales_tax" | "service_tax" | "vat";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax_rate"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxRatesTaxRate: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                tax_rate: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax_rate"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxRatesTaxRate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tax_rate: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
                    active?: boolean;
                    /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
                    country?: string;
                    /** @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
                    description?: string;
                    /** @description The display name of the tax rate, which will be shown to users. */
                    display_name?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
                    jurisdiction?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
                    state?: string;
                    /**
                     * @description The high-level tax type, such as `vat` or `sales_tax`.
                     * @enum {string}
                     */
                    tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "retail_delivery_fee" | "rst" | "sales_tax" | "service_tax" | "vat";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tax_rate"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalConfigurations: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description if present, only return the account default or non-default configurations. */
                is_account_default?: boolean;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["terminal.configuration"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalConfigurations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * bbpos_wise_pose
                     * @description An object containing device type specific settings for BBPOS WisePOS E readers
                     */
                    bbpos_wisepos_e?: {
                        splashscreen?: string | "";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Name of the configuration */
                    name?: string;
                    /** @description Configurations for collecting transactions offline. */
                    offline?: {
                        enabled: boolean;
                    } | "";
                    /**
                     * reboot_window
                     * @description Reboot time settings for readers that support customized reboot time configuration.
                     */
                    reboot_window?: {
                        end_hour: number;
                        start_hour: number;
                    };
                    /**
                     * stripe_s700
                     * @description An object containing device type specific settings for Stripe S700 readers
                     */
                    stripe_s700?: {
                        splashscreen?: string | "";
                    };
                    /** @description Tipping configurations for readers supporting on-reader tips */
                    tipping?: {
                        /** currency_specific_config */
                        aud?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        cad?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        chf?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        czk?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        dkk?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        eur?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        gbp?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        hkd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        myr?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        nok?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        nzd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        pln?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        sek?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        sgd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        usd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                    } | "";
                    /**
                     * verifone_p400
                     * @description An object containing device type specific settings for Verifone P400 readers
                     */
                    verifone_p400?: {
                        splashscreen?: string | "";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.configuration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalConfigurationsConfiguration: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                configuration: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.configuration"] | components["schemas"]["deleted_terminal.configuration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalConfigurationsConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                configuration: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description An object containing device type specific settings for BBPOS WisePOS E readers */
                    bbpos_wisepos_e?: {
                        splashscreen?: string | "";
                    } | "";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Name of the configuration */
                    name?: string;
                    /** @description Configurations for collecting transactions offline. */
                    offline?: {
                        enabled: boolean;
                    } | "";
                    /** @description Reboot time settings for readers that support customized reboot time configuration. */
                    reboot_window?: {
                        end_hour: number;
                        start_hour: number;
                    } | "";
                    /** @description An object containing device type specific settings for Stripe S700 readers */
                    stripe_s700?: {
                        splashscreen?: string | "";
                    } | "";
                    /** @description Tipping configurations for readers supporting on-reader tips */
                    tipping?: {
                        /** currency_specific_config */
                        aud?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        cad?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        chf?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        czk?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        dkk?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        eur?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        gbp?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        hkd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        myr?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        nok?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        nzd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        pln?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        sek?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        sgd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        /** currency_specific_config */
                        usd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                    } | "";
                    /** @description An object containing device type specific settings for Verifone P400 readers */
                    verifone_p400?: {
                        splashscreen?: string | "";
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.configuration"] | components["schemas"]["deleted_terminal.configuration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteTerminalConfigurationsConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                configuration: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_terminal.configuration"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalConnectionTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens). */
                    location?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.connection_token"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalLocations: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["terminal.location"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalLocations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * create_location_address_param
                     * @description The full address of the location.
                     */
                    address: {
                        city?: string;
                        country: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    /** @description The ID of a configuration that will be used to customize all readers in this location. */
                    configuration_overrides?: string;
                    /** @description A name for the location. Maximum length is 1000 characters. */
                    display_name: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.location"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalLocationsLocation: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                location: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.location"] | components["schemas"]["deleted_terminal.location"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalLocationsLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                location: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * optional_fields_address
                     * @description The full address of the location. If you're updating the `address` field, avoid changing the `country`. If you need to modify the `country` field, create a new `Location` object and re-register any existing readers to that location.
                     */
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    /** @description The ID of a configuration that will be used to customize all readers in this location. */
                    configuration_overrides?: string | "";
                    /** @description A name for the location. */
                    display_name?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.location"] | components["schemas"]["deleted_terminal.location"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteTerminalLocationsLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                location: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_terminal.location"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalReaders: {
        parameters: {
            query?: {
                /** @description Filters readers by device type */
                device_type?: "bbpos_chipper2x" | "bbpos_wisepad3" | "bbpos_wisepos_e" | "mobile_phone_reader" | "simulated_wisepos_e" | "stripe_m2" | "stripe_s700" | "verifone_P400";
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A location ID to filter the response list to only readers at the specific location */
                location?: string;
                /** @description Filters readers by serial number */
                serial_number?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description A status filter to filter readers to only offline or online readers */
                status?: "offline" | "online";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description A list of readers */
                        data: components["schemas"]["terminal.reader"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReaders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Custom label given to the reader for easier identification. If no label is specified, the registration code will be used. */
                    label?: string;
                    /** @description The location to assign the reader to. */
                    location?: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description A code generated by the reader used for registering to an account. */
                    registration_code: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalReadersReader: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                reader: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.reader"] | components["schemas"]["deleted_terminal.reader"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReader: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reader: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The new label of the reader. */
                    label?: string | "";
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.reader"] | components["schemas"]["deleted_terminal.reader"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteTerminalReadersReader: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reader: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_terminal.reader"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReaderCancelAction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reader: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReaderProcessPaymentIntent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reader: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description PaymentIntent ID */
                    payment_intent: string;
                    /**
                     * process_config
                     * @description Configuration overrides
                     */
                    process_config?: {
                        /** @enum {string} */
                        allow_redisplay?: "always" | "limited" | "unspecified";
                        enable_customer_cancellation?: boolean;
                        skip_tipping?: boolean;
                        /** tipping_config */
                        tipping?: {
                            amount_eligible?: number;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReaderProcessSetupIntent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reader: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow.
                     * @enum {string}
                     */
                    allow_redisplay: "always" | "limited" | "unspecified";
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * process_setup_config
                     * @description Configuration overrides
                     */
                    process_config?: {
                        enable_customer_cancellation?: boolean;
                    };
                    /** @description SetupIntent ID */
                    setup_intent: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReaderRefundPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reader: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A positive integer in __cents__ representing how much of this charge to refund. */
                    amount?: number;
                    /** @description ID of the Charge to refund. */
                    charge?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description ID of the PaymentIntent to refund. */
                    payment_intent?: string;
                    /** @description Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge. */
                    refund_application_fee?: boolean;
                    /**
                     * refund_payment_config
                     * @description Configuration overrides
                     */
                    refund_payment_config?: {
                        enable_customer_cancellation?: boolean;
                    };
                    /** @description Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge. */
                    reverse_transfer?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReaderSetReaderDisplay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reader: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * cart
                     * @description Cart
                     */
                    cart?: {
                        currency: string;
                        line_items: {
                            amount: number;
                            description: string;
                            quantity: number;
                        }[];
                        tax?: number;
                        total: number;
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * @description Type
                     * @enum {string}
                     */
                    type: "cart";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersConfirmationTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description ID of an existing PaymentMethod. */
                    payment_method?: string;
                    /**
                     * payment_method_data_params
                     * @description If provided, this hash will be used to create a PaymentMethod.
                     */
                    payment_method_data?: {
                        /** payment_method_param */
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        /** param */
                        affirm?: Record<string, never>;
                        /** param */
                        afterpay_clearpay?: Record<string, never>;
                        /** param */
                        alipay?: Record<string, never>;
                        /** @enum {string} */
                        allow_redisplay?: "always" | "limited" | "unspecified";
                        /** param */
                        alma?: Record<string, never>;
                        /** param */
                        amazon_pay?: Record<string, never>;
                        /** param */
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        /** param */
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        /** param */
                        bancontact?: Record<string, never>;
                        /** billing_details_inner_params */
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        /** param */
                        blik?: Record<string, never>;
                        /** param */
                        boleto?: {
                            tax_id: string;
                        };
                        /** param */
                        cashapp?: Record<string, never>;
                        /** param */
                        customer_balance?: Record<string, never>;
                        /** param */
                        eps?: {
                            /** @enum {string} */
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        /** param */
                        fpx?: {
                            /** @enum {string} */
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        /** param */
                        giropay?: Record<string, never>;
                        /** param */
                        grabpay?: Record<string, never>;
                        /** param */
                        ideal?: {
                            /** @enum {string} */
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        /** param */
                        interac_present?: Record<string, never>;
                        /** param */
                        kakao_pay?: Record<string, never>;
                        /** param */
                        klarna?: {
                            /** date_of_birth */
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        /** param */
                        konbini?: Record<string, never>;
                        /** param */
                        kr_card?: Record<string, never>;
                        /** param */
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** param */
                        mobilepay?: Record<string, never>;
                        /** param */
                        multibanco?: Record<string, never>;
                        /** param */
                        naver_pay?: {
                            /** @enum {string} */
                            funding?: "card" | "points";
                        };
                        /** param */
                        oxxo?: Record<string, never>;
                        /** param */
                        p24?: {
                            /** @enum {string} */
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank";
                        };
                        /** param */
                        payco?: Record<string, never>;
                        /** param */
                        paynow?: Record<string, never>;
                        /** param */
                        paypal?: Record<string, never>;
                        /** param */
                        pix?: Record<string, never>;
                        /** param */
                        promptpay?: Record<string, never>;
                        /** radar_options_with_hidden_options */
                        radar_options?: {
                            session?: string;
                        };
                        /** param */
                        revolut_pay?: Record<string, never>;
                        /** param */
                        samsung_pay?: Record<string, never>;
                        /** param */
                        sepa_debit?: {
                            iban: string;
                        };
                        /** param */
                        sofort?: {
                            /** @enum {string} */
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        /** param */
                        swish?: Record<string, never>;
                        /** param */
                        twint?: Record<string, never>;
                        /** @enum {string} */
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "alma" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "kakao_pay" | "klarna" | "konbini" | "kr_card" | "link" | "mobilepay" | "multibanco" | "naver_pay" | "oxxo" | "p24" | "payco" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "samsung_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
                        /** payment_method_param */
                        us_bank_account?: {
                            /** @enum {string} */
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            /** @enum {string} */
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        /** param */
                        wechat_pay?: Record<string, never>;
                        /** param */
                        zip?: Record<string, never>;
                    };
                    /** @description Return URL used to confirm the Intent. */
                    return_url?: string;
                    /**
                     * @description Indicates that you intend to make future payments with this ConfirmationToken's payment method.
                     *
                     *     The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
                     * @enum {string}
                     */
                    setup_future_usage?: "off_session" | "on_session";
                    /**
                     * recipient_shipping_with_optional_fields_address
                     * @description Shipping information for this ConfirmationToken.
                     */
                    shipping?: {
                        /** optional_fields_address */
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string | "";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["confirmation_token"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersCustomersCustomerFundCashBalance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount to be used for this test cash balance transaction. A positive integer representing how much to fund in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to fund $1.00 or 100 to fund ¥100, a zero-decimal currency). */
                    amount: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description A description of the test funding. This simulates free-text references supplied by customers when making bank transfers to their cash balance. You can use this to test how Stripe's [reconciliation algorithm](https://stripe.com/docs/payments/customer-balance/reconciliation) applies to different user inputs. */
                    reference?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["customer_cash_balance_transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingAuthorizations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card's currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
                    amount?: number;
                    /**
                     * amount_details_specs
                     * @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
                     */
                    amount_details?: {
                        atm_fee?: number;
                        cashback_amount?: number;
                    };
                    /**
                     * @description How the card details were provided. Defaults to online.
                     * @enum {string}
                     */
                    authorization_method?: "chip" | "contactless" | "keyed_in" | "online" | "swipe";
                    /** @description Card associated with this authorization. */
                    card: string;
                    /** @description The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * fleet_testmode_authorization_specs
                     * @description Fleet-specific information for authorizations using Fleet cards.
                     */
                    fleet?: {
                        /** fleet_cardholder_prompt_data_specs */
                        cardholder_prompt_data?: {
                            driver_id?: string;
                            odometer?: number;
                            unspecified_id?: string;
                            user_id?: string;
                            vehicle_number?: string;
                        };
                        /** @enum {string} */
                        purchase_type?: "fuel_and_non_fuel_purchase" | "fuel_purchase" | "non_fuel_purchase";
                        /** fleet_reported_breakdown_specs */
                        reported_breakdown?: {
                            /** fleet_reported_breakdown_fuel_specs */
                            fuel?: {
                                /** Format: decimal */
                                gross_amount_decimal?: string;
                            };
                            /** fleet_reported_breakdown_non_fuel_specs */
                            non_fuel?: {
                                /** Format: decimal */
                                gross_amount_decimal?: string;
                            };
                            /** fleet_reported_breakdown_tax_specs */
                            tax?: {
                                /** Format: decimal */
                                local_amount_decimal?: string;
                                /** Format: decimal */
                                national_amount_decimal?: string;
                            };
                        };
                        /** @enum {string} */
                        service_type?: "full_service" | "non_fuel_transaction" | "self_service";
                    };
                    /**
                     * fuel_specs
                     * @description Information about fuel that was purchased with this transaction.
                     */
                    fuel?: {
                        industry_product_code?: string;
                        /** Format: decimal */
                        quantity_decimal?: string;
                        /** @enum {string} */
                        type?: "diesel" | "other" | "unleaded_plus" | "unleaded_regular" | "unleaded_super";
                        /** @enum {string} */
                        unit?: "charging_minute" | "imperial_gallon" | "kilogram" | "kilowatt_hour" | "liter" | "other" | "pound" | "us_gallon";
                        /** Format: decimal */
                        unit_cost_decimal?: string;
                    };
                    /** @description If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
                    is_amount_controllable?: boolean;
                    /** @description The total amount to attempt to authorize. This amount is in the provided merchant currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
                    merchant_amount?: number;
                    /** @description The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    merchant_currency?: string;
                    /**
                     * merchant_data_specs
                     * @description Details about the seller (grocery store, e-commerce website, etc.) where the card authorization happened.
                     */
                    merchant_data?: {
                        /** @enum {string} */
                        category?: "ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards";
                        city?: string;
                        country?: string;
                        name?: string;
                        network_id?: string;
                        postal_code?: string;
                        state?: string;
                        terminal_id?: string;
                        url?: string;
                    };
                    /**
                     * network_data_specs
                     * @description Details about the authorization, such as identifiers, set by the card network.
                     */
                    network_data?: {
                        acquiring_institution_id?: string;
                    };
                    /**
                     * verification_data_specs
                     * @description Verifications that Stripe performed on information that the cardholder provided to the merchant.
                     */
                    verification_data?: {
                        /** @enum {string} */
                        address_line1_check?: "match" | "mismatch" | "not_provided";
                        /** @enum {string} */
                        address_postal_code_check?: "match" | "mismatch" | "not_provided";
                        /** authentication_exemption_specs */
                        authentication_exemption?: {
                            /** @enum {string} */
                            claimed_by: "acquirer" | "issuer";
                            /** @enum {string} */
                            type: "low_value_transaction" | "transaction_risk_analysis" | "unknown";
                        };
                        /** @enum {string} */
                        cvc_check?: "match" | "mismatch" | "not_provided";
                        /** @enum {string} */
                        expiry_check?: "match" | "mismatch" | "not_provided";
                        /** three_d_secure_specs */
                        three_d_secure?: {
                            /** @enum {string} */
                            result: "attempt_acknowledged" | "authenticated" | "failed" | "required";
                        };
                    };
                    /**
                     * @description The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
                     * @enum {string}
                     */
                    wallet?: "apple_pay" | "google_pay" | "samsung_pay";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingAuthorizationsAuthorizationCapture: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorization: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
                    capture_amount?: number;
                    /** @description Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows. */
                    close_authorization?: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * purchase_details_specs
                     * @description Additional purchase information that is optionally provided by the merchant.
                     */
                    purchase_details?: {
                        /** fleet_specs */
                        fleet?: {
                            /** fleet_cardholder_prompt_data_specs */
                            cardholder_prompt_data?: {
                                driver_id?: string;
                                odometer?: number;
                                unspecified_id?: string;
                                user_id?: string;
                                vehicle_number?: string;
                            };
                            /** @enum {string} */
                            purchase_type?: "fuel_and_non_fuel_purchase" | "fuel_purchase" | "non_fuel_purchase";
                            /** fleet_reported_breakdown_specs */
                            reported_breakdown?: {
                                /** fleet_reported_breakdown_fuel_specs */
                                fuel?: {
                                    /** Format: decimal */
                                    gross_amount_decimal?: string;
                                };
                                /** fleet_reported_breakdown_non_fuel_specs */
                                non_fuel?: {
                                    /** Format: decimal */
                                    gross_amount_decimal?: string;
                                };
                                /** fleet_reported_breakdown_tax_specs */
                                tax?: {
                                    /** Format: decimal */
                                    local_amount_decimal?: string;
                                    /** Format: decimal */
                                    national_amount_decimal?: string;
                                };
                            };
                            /** @enum {string} */
                            service_type?: "full_service" | "non_fuel_transaction" | "self_service";
                        };
                        /** flight_specs */
                        flight?: {
                            /** Format: unix-time */
                            departure_at?: number;
                            passenger_name?: string;
                            refundable?: boolean;
                            segments?: {
                                arrival_airport_code?: string;
                                carrier?: string;
                                departure_airport_code?: string;
                                flight_number?: string;
                                service_class?: string;
                                stopover_allowed?: boolean;
                            }[];
                            travel_agency?: string;
                        };
                        /** fuel_specs */
                        fuel?: {
                            industry_product_code?: string;
                            /** Format: decimal */
                            quantity_decimal?: string;
                            /** @enum {string} */
                            type?: "diesel" | "other" | "unleaded_plus" | "unleaded_regular" | "unleaded_super";
                            /** @enum {string} */
                            unit?: "charging_minute" | "imperial_gallon" | "kilogram" | "kilowatt_hour" | "liter" | "other" | "pound" | "us_gallon";
                            /** Format: decimal */
                            unit_cost_decimal?: string;
                        };
                        /** lodging_specs */
                        lodging?: {
                            /** Format: unix-time */
                            check_in_at?: number;
                            nights?: number;
                        };
                        receipt?: {
                            description?: string;
                            /** Format: decimal */
                            quantity?: string;
                            total?: number;
                            unit_cost?: number;
                        }[];
                        reference?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingAuthorizationsAuthorizationExpire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorization: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorization: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The final authorization amount that will be captured by the merchant. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
                    final_amount: number;
                    /**
                     * fleet_specs
                     * @description Fleet-specific information for authorizations using Fleet cards.
                     */
                    fleet?: {
                        /** fleet_cardholder_prompt_data_specs */
                        cardholder_prompt_data?: {
                            driver_id?: string;
                            odometer?: number;
                            unspecified_id?: string;
                            user_id?: string;
                            vehicle_number?: string;
                        };
                        /** @enum {string} */
                        purchase_type?: "fuel_and_non_fuel_purchase" | "fuel_purchase" | "non_fuel_purchase";
                        /** fleet_reported_breakdown_specs */
                        reported_breakdown?: {
                            /** fleet_reported_breakdown_fuel_specs */
                            fuel?: {
                                /** Format: decimal */
                                gross_amount_decimal?: string;
                            };
                            /** fleet_reported_breakdown_non_fuel_specs */
                            non_fuel?: {
                                /** Format: decimal */
                                gross_amount_decimal?: string;
                            };
                            /** fleet_reported_breakdown_tax_specs */
                            tax?: {
                                /** Format: decimal */
                                local_amount_decimal?: string;
                                /** Format: decimal */
                                national_amount_decimal?: string;
                            };
                        };
                        /** @enum {string} */
                        service_type?: "full_service" | "non_fuel_transaction" | "self_service";
                    };
                    /**
                     * fuel_specs
                     * @description Information about fuel that was purchased with this transaction.
                     */
                    fuel?: {
                        industry_product_code?: string;
                        /** Format: decimal */
                        quantity_decimal?: string;
                        /** @enum {string} */
                        type?: "diesel" | "other" | "unleaded_plus" | "unleaded_regular" | "unleaded_super";
                        /** @enum {string} */
                        unit?: "charging_minute" | "imperial_gallon" | "kilogram" | "kilowatt_hour" | "liter" | "other" | "pound" | "us_gallon";
                        /** Format: decimal */
                        unit_cost_decimal?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorization: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Whether to simulate the user confirming that the transaction was legitimate (true) or telling Stripe that it was fraudulent (false). */
                    confirmed: boolean;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingAuthorizationsAuthorizationIncrement: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorization: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
                    increment_amount: number;
                    /** @description If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
                    is_amount_controllable?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingAuthorizationsAuthorizationReverse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorization: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The amount to reverse from the authorization. If not provided, the full amount of the authorization will be reversed. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
                    reverse_amount?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingCardsCardShippingDeliver: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingCardsCardShippingFail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingCardsCardShippingReturn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingCardsCardShippingShip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingCardsCardShippingSubmit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personalization_design: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.personalization_design"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personalization_design: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.personalization_design"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personalization_design: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * rejection_reasons_param
                     * @description The reason(s) the personalization design was rejected.
                     */
                    rejection_reasons: {
                        card_logo?: ("geographic_location" | "inappropriate" | "network_name" | "non_binary_image" | "non_fiat_currency" | "other" | "other_entity" | "promotional_material")[];
                        carrier_text?: ("geographic_location" | "inappropriate" | "network_name" | "non_fiat_currency" | "other" | "other_entity" | "promotional_material")[];
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.personalization_design"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingSettlements: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The Bank Identification Number reflecting this settlement record. */
                    bin: string;
                    /** @description The date that the transactions are cleared and posted to user's accounts. */
                    clearing_date: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The total interchange received as reimbursement for the transactions. */
                    interchange_fees?: number;
                    /** @description The total net amount required to settle with the network. */
                    net_total: number;
                    /** @description The Settlement Identification Number assigned by the network. */
                    network_settlement_identifier?: string;
                    /** @description The total number of transactions reflected in this settlement. */
                    transaction_count?: number;
                    /** @description The total transaction amount reflected in this settlement. */
                    transaction_volume?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.settlement"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingTransactionsCreateForceCapture: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The total amount to attempt to capture. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
                    amount: number;
                    /** @description Card associated with this transaction. */
                    card: string;
                    /** @description The currency of the capture. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * merchant_data_specs
                     * @description Details about the seller (grocery store, e-commerce website, etc.) where the card authorization happened.
                     */
                    merchant_data?: {
                        /** @enum {string} */
                        category?: "ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards";
                        city?: string;
                        country?: string;
                        name?: string;
                        network_id?: string;
                        postal_code?: string;
                        state?: string;
                        terminal_id?: string;
                        url?: string;
                    };
                    /**
                     * purchase_details_specs
                     * @description Additional purchase information that is optionally provided by the merchant.
                     */
                    purchase_details?: {
                        /** fleet_specs */
                        fleet?: {
                            /** fleet_cardholder_prompt_data_specs */
                            cardholder_prompt_data?: {
                                driver_id?: string;
                                odometer?: number;
                                unspecified_id?: string;
                                user_id?: string;
                                vehicle_number?: string;
                            };
                            /** @enum {string} */
                            purchase_type?: "fuel_and_non_fuel_purchase" | "fuel_purchase" | "non_fuel_purchase";
                            /** fleet_reported_breakdown_specs */
                            reported_breakdown?: {
                                /** fleet_reported_breakdown_fuel_specs */
                                fuel?: {
                                    /** Format: decimal */
                                    gross_amount_decimal?: string;
                                };
                                /** fleet_reported_breakdown_non_fuel_specs */
                                non_fuel?: {
                                    /** Format: decimal */
                                    gross_amount_decimal?: string;
                                };
                                /** fleet_reported_breakdown_tax_specs */
                                tax?: {
                                    /** Format: decimal */
                                    local_amount_decimal?: string;
                                    /** Format: decimal */
                                    national_amount_decimal?: string;
                                };
                            };
                            /** @enum {string} */
                            service_type?: "full_service" | "non_fuel_transaction" | "self_service";
                        };
                        /** flight_specs */
                        flight?: {
                            /** Format: unix-time */
                            departure_at?: number;
                            passenger_name?: string;
                            refundable?: boolean;
                            segments?: {
                                arrival_airport_code?: string;
                                carrier?: string;
                                departure_airport_code?: string;
                                flight_number?: string;
                                service_class?: string;
                                stopover_allowed?: boolean;
                            }[];
                            travel_agency?: string;
                        };
                        /** fuel_specs */
                        fuel?: {
                            industry_product_code?: string;
                            /** Format: decimal */
                            quantity_decimal?: string;
                            /** @enum {string} */
                            type?: "diesel" | "other" | "unleaded_plus" | "unleaded_regular" | "unleaded_super";
                            /** @enum {string} */
                            unit?: "charging_minute" | "imperial_gallon" | "kilogram" | "kilowatt_hour" | "liter" | "other" | "pound" | "us_gallon";
                            /** Format: decimal */
                            unit_cost_decimal?: string;
                        };
                        /** lodging_specs */
                        lodging?: {
                            /** Format: unix-time */
                            check_in_at?: number;
                            nights?: number;
                        };
                        receipt?: {
                            description?: string;
                            /** Format: decimal */
                            quantity?: string;
                            total?: number;
                            unit_cost?: number;
                        }[];
                        reference?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingTransactionsCreateUnlinkedRefund: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
                    amount: number;
                    /** @description Card associated with this unlinked refund transaction. */
                    card: string;
                    /** @description The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * merchant_data_specs
                     * @description Details about the seller (grocery store, e-commerce website, etc.) where the card authorization happened.
                     */
                    merchant_data?: {
                        /** @enum {string} */
                        category?: "ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards";
                        city?: string;
                        country?: string;
                        name?: string;
                        network_id?: string;
                        postal_code?: string;
                        state?: string;
                        terminal_id?: string;
                        url?: string;
                    };
                    /**
                     * purchase_details_specs
                     * @description Additional purchase information that is optionally provided by the merchant.
                     */
                    purchase_details?: {
                        /** fleet_specs */
                        fleet?: {
                            /** fleet_cardholder_prompt_data_specs */
                            cardholder_prompt_data?: {
                                driver_id?: string;
                                odometer?: number;
                                unspecified_id?: string;
                                user_id?: string;
                                vehicle_number?: string;
                            };
                            /** @enum {string} */
                            purchase_type?: "fuel_and_non_fuel_purchase" | "fuel_purchase" | "non_fuel_purchase";
                            /** fleet_reported_breakdown_specs */
                            reported_breakdown?: {
                                /** fleet_reported_breakdown_fuel_specs */
                                fuel?: {
                                    /** Format: decimal */
                                    gross_amount_decimal?: string;
                                };
                                /** fleet_reported_breakdown_non_fuel_specs */
                                non_fuel?: {
                                    /** Format: decimal */
                                    gross_amount_decimal?: string;
                                };
                                /** fleet_reported_breakdown_tax_specs */
                                tax?: {
                                    /** Format: decimal */
                                    local_amount_decimal?: string;
                                    /** Format: decimal */
                                    national_amount_decimal?: string;
                                };
                            };
                            /** @enum {string} */
                            service_type?: "full_service" | "non_fuel_transaction" | "self_service";
                        };
                        /** flight_specs */
                        flight?: {
                            /** Format: unix-time */
                            departure_at?: number;
                            passenger_name?: string;
                            refundable?: boolean;
                            segments?: {
                                arrival_airport_code?: string;
                                carrier?: string;
                                departure_airport_code?: string;
                                flight_number?: string;
                                service_class?: string;
                                stopover_allowed?: boolean;
                            }[];
                            travel_agency?: string;
                        };
                        /** fuel_specs */
                        fuel?: {
                            industry_product_code?: string;
                            /** Format: decimal */
                            quantity_decimal?: string;
                            /** @enum {string} */
                            type?: "diesel" | "other" | "unleaded_plus" | "unleaded_regular" | "unleaded_super";
                            /** @enum {string} */
                            unit?: "charging_minute" | "imperial_gallon" | "kilogram" | "kilowatt_hour" | "liter" | "other" | "pound" | "us_gallon";
                            /** Format: decimal */
                            unit_cost_decimal?: string;
                        };
                        /** lodging_specs */
                        lodging?: {
                            /** Format: unix-time */
                            check_in_at?: number;
                            nights?: number;
                        };
                        receipt?: {
                            description?: string;
                            /** Format: decimal */
                            quantity?: string;
                            total?: number;
                            unit_cost?: number;
                        }[];
                        reference?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingTransactionsTransactionRefund: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transaction: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
                    refund_amount?: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issuing.transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersRefundsRefundExpire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                refund: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTerminalReadersReaderPresentPaymentMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reader: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Simulated on-reader tip amount. */
                    amount_tip?: number;
                    /**
                     * card_present
                     * @description Simulated data for the card_present payment method.
                     */
                    card_present?: {
                        number?: string;
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * interac_present
                     * @description Simulated data for the interac_present payment method.
                     */
                    interac_present?: {
                        number?: string;
                    };
                    /**
                     * @description Simulated payment type.
                     * @enum {string}
                     */
                    type?: "card_present" | "interac_present";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTestHelpersTestClocks: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["test_helpers.test_clock"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTestClocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description The initial frozen time for this test clock.
                     */
                    frozen_time: number;
                    /** @description The name for this test clock. */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["test_helpers.test_clock"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTestHelpersTestClocksTestClock: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                test_clock: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["test_helpers.test_clock"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteTestHelpersTestClocksTestClock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                test_clock: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_test_helpers.test_clock"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTestClocksTestClockAdvance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                test_clock: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * Format: unix-time
                     * @description The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
                     */
                    frozen_time: number;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["test_helpers.test_clock"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryInboundTransfersIdFail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * failure_details_param
                     * @description Details about a failed InboundTransfer.
                     */
                    failure_details?: {
                        /** @enum {string} */
                        code?: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "debit_not_authorized" | "incorrect_account_holder_address" | "incorrect_account_holder_name" | "incorrect_account_holder_tax_id" | "insufficient_funds" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryInboundTransfersIdReturn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryInboundTransfersIdSucceed: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundPaymentsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * tracking_details_params
                     * @description Details about network-specific tracking information.
                     */
                    tracking_details: {
                        /** ach_tracking_details_params */
                        ach?: {
                            trace_id: string;
                        };
                        /** @enum {string} */
                        type: "ach" | "us_domestic_wire";
                        /** us_domestic_wire_tracking_details_params */
                        us_domestic_wire?: {
                            chips?: string;
                            imad?: string;
                            omad?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundPaymentsIdFail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundPaymentsIdPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundPaymentsIdReturn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * returned_details_params
                     * @description Optional hash to set the return code.
                     */
                    returned_details?: {
                        /** @enum {string} */
                        code?: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "declined" | "incorrect_account_holder_name" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundTransfersOutboundTransfer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                outbound_transfer: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * tracking_details_params
                     * @description Details about network-specific tracking information.
                     */
                    tracking_details: {
                        /** ach_tracking_details_params */
                        ach?: {
                            trace_id: string;
                        };
                        /** @enum {string} */
                        type: "ach" | "us_domestic_wire";
                        /** us_domestic_wire_tracking_details_params */
                        us_domestic_wire?: {
                            chips?: string;
                            imad?: string;
                            omad?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                outbound_transfer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                outbound_transfer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                outbound_transfer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * returned_details_params
                     * @description Details about a returned OutboundTransfer.
                     */
                    returned_details?: {
                        /** @enum {string} */
                        code?: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "declined" | "incorrect_account_holder_name" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryReceivedCredits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount (in cents) to be transferred. */
                    amount: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The FinancialAccount to send funds to. */
                    financial_account: string;
                    /**
                     * source_params
                     * @description Initiating payment method details for the object.
                     */
                    initiating_payment_method_details?: {
                        /** @enum {string} */
                        type: "us_bank_account";
                        /** us_bank_account_source_params */
                        us_bank_account?: {
                            account_holder_name?: string;
                            account_number?: string;
                            routing_number?: string;
                        };
                    };
                    /**
                     * @description Specifies the network rails to be used. If not set, will default to the PaymentMethod's preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
                     * @enum {string}
                     */
                    network: "ach" | "us_domestic_wire";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.received_credit"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryReceivedDebits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount (in cents) to be transferred. */
                    amount: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The FinancialAccount to pull funds from. */
                    financial_account: string;
                    /**
                     * source_params
                     * @description Initiating payment method details for the object.
                     */
                    initiating_payment_method_details?: {
                        /** @enum {string} */
                        type: "us_bank_account";
                        /** us_bank_account_source_params */
                        us_bank_account?: {
                            account_holder_name?: string;
                            account_number?: string;
                            routing_number?: string;
                        };
                    };
                    /**
                     * @description Specifies the network rails to be used. If not set, will default to the PaymentMethod's preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
                     * @enum {string}
                     */
                    network: "ach";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.received_debit"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * connect_js_account_token_specs
                     * @description Information for the account this token represents.
                     */
                    account?: {
                        /** @enum {string} */
                        business_type?: "company" | "government_entity" | "individual" | "non_profit";
                        /** connect_js_account_token_company_specs */
                        company?: {
                            /** legal_entity_and_kyc_address_specs */
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            /** japan_address_kana_specs */
                            address_kana?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                                town?: string;
                            };
                            /** japan_address_kanji_specs */
                            address_kanji?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                                town?: string;
                            };
                            directors_provided?: boolean;
                            executives_provided?: boolean;
                            export_license_id?: string;
                            export_purpose_code?: string;
                            name?: string;
                            name_kana?: string;
                            name_kanji?: string;
                            owners_provided?: boolean;
                            /** company_ownership_declaration */
                            ownership_declaration?: {
                                /** Format: unix-time */
                                date?: number;
                                ip?: string;
                                user_agent?: string;
                            };
                            ownership_declaration_shown_and_signed?: boolean;
                            phone?: string;
                            registration_number?: string;
                            /** @enum {string} */
                            structure?: "" | "free_zone_establishment" | "free_zone_llc" | "government_instrumentality" | "governmental_unit" | "incorporated_non_profit" | "incorporated_partnership" | "limited_liability_partnership" | "llc" | "multi_member_llc" | "private_company" | "private_corporation" | "private_partnership" | "public_company" | "public_corporation" | "public_partnership" | "registered_charity" | "single_member_llc" | "sole_establishment" | "sole_proprietorship" | "tax_exempt_government_instrumentality" | "unincorporated_association" | "unincorporated_non_profit" | "unincorporated_partnership";
                            tax_id?: string;
                            tax_id_registrar?: string;
                            vat_id?: string;
                            /** verification_specs */
                            verification?: {
                                /** verification_document_specs */
                                document?: {
                                    back?: string;
                                    front?: string;
                                };
                            };
                        };
                        /** individual_specs */
                        individual?: {
                            /** address_specs */
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            /** japan_address_kana_specs */
                            address_kana?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                                town?: string;
                            };
                            /** japan_address_kanji_specs */
                            address_kanji?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                                town?: string;
                            };
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            } | "";
                            email?: string;
                            first_name?: string;
                            first_name_kana?: string;
                            first_name_kanji?: string;
                            full_name_aliases?: string[] | "";
                            gender?: string;
                            id_number?: string;
                            id_number_secondary?: string;
                            last_name?: string;
                            last_name_kana?: string;
                            last_name_kanji?: string;
                            maiden_name?: string;
                            metadata?: {
                                [key: string]: string;
                            } | "";
                            phone?: string;
                            /** @enum {string} */
                            political_exposure?: "existing" | "none";
                            /** address_specs */
                            registered_address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            /** individual_relationship_specs */
                            relationship?: {
                                director?: boolean;
                                executive?: boolean;
                                owner?: boolean;
                                percent_ownership?: number | "";
                                title?: string;
                            };
                            ssn_last_4?: string;
                            /** person_verification_specs */
                            verification?: {
                                /** person_verification_document_specs */
                                additional_document?: {
                                    back?: string;
                                    front?: string;
                                };
                                /** person_verification_document_specs */
                                document?: {
                                    back?: string;
                                    front?: string;
                                };
                            };
                        };
                        tos_shown_and_accepted?: boolean;
                    };
                    /**
                     * token_create_bank_account
                     * @description The bank account this token will represent.
                     */
                    bank_account?: {
                        account_holder_name?: string;
                        /** @enum {string} */
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        /** @enum {string} */
                        account_type?: "checking" | "futsu" | "savings" | "toza";
                        country: string;
                        currency?: string;
                        payment_method?: string;
                        routing_number?: string;
                    };
                    /** @description The card this token will represent. If you also pass in a customer, the card must be the ID of a card belonging to the customer. Otherwise, if you do not pass in a customer, this is a dictionary containing a user's credit card details, with the options described below. */
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        currency?: string;
                        cvc?: string;
                        exp_month: string;
                        exp_year: string;
                        name?: string;
                        /** networks_param_specs */
                        networks?: {
                            /** @enum {string} */
                            preferred?: "cartes_bancaires" | "mastercard" | "visa";
                        };
                        number: string;
                    } | string;
                    /** @description Create a token for the customer, which is owned by the application's account. You can only use this with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). Learn more about [cloning saved payment methods](https://stripe.com/docs/connect/cloning-saved-payment-methods). */
                    customer?: string;
                    /**
                     * cvc_params
                     * @description The updated CVC value this token represents.
                     */
                    cvc_update?: {
                        cvc: string;
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * person_token_specs
                     * @description Information for the person this token represents.
                     */
                    person?: {
                        /** person_additional_tos_acceptances_specs */
                        additional_tos_acceptances?: {
                            /** settings_terms_of_service_specs */
                            account?: {
                                /** Format: unix-time */
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                        /** legal_entity_and_kyc_address_specs */
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        /** japan_address_kana_specs */
                        address_kana?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        /** japan_address_kanji_specs */
                        address_kanji?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        } | "";
                        /** person_documents_specs */
                        documents?: {
                            /** documents_param */
                            company_authorization?: {
                                files?: (string | "")[];
                            };
                            /** documents_param */
                            passport?: {
                                files?: (string | "")[];
                            };
                            /** documents_param */
                            visa?: {
                                files?: (string | "")[];
                            };
                        };
                        email?: string;
                        first_name?: string;
                        first_name_kana?: string;
                        first_name_kanji?: string;
                        full_name_aliases?: string[] | "";
                        gender?: string;
                        id_number?: string;
                        id_number_secondary?: string;
                        last_name?: string;
                        last_name_kana?: string;
                        last_name_kanji?: string;
                        maiden_name?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        nationality?: string;
                        phone?: string;
                        political_exposure?: string;
                        /** address_specs */
                        registered_address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        /** relationship_specs */
                        relationship?: {
                            director?: boolean;
                            executive?: boolean;
                            legal_guardian?: boolean;
                            owner?: boolean;
                            percent_ownership?: number | "";
                            representative?: boolean;
                            title?: string;
                        };
                        ssn_last_4?: string;
                        /** person_verification_specs */
                        verification?: {
                            /** person_verification_document_specs */
                            additional_document?: {
                                back?: string;
                                front?: string;
                            };
                            /** person_verification_document_specs */
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    /**
                     * pii_token_specs
                     * @description The PII this token represents.
                     */
                    pii?: {
                        id_number?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["token"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTokensToken: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["token"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTopups: {
        parameters: {
            query?: {
                /** @description A positive integer representing how much to transfer. */
                amount?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`. */
                status?: "canceled" | "failed" | "pending" | "succeeded";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["topup"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTopups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A positive integer representing how much to transfer. */
                    amount: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)). */
                    source?: string;
                    /** @description Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters. */
                    statement_descriptor?: string;
                    /** @description A string that identifies this top-up as part of a group. */
                    transfer_group?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["topup"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTopupsTopup: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                topup: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["topup"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTopupsTopup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                topup: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["topup"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTopupsTopupCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                topup: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["topup"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTransfers: {
        parameters: {
            query?: {
                /** @description Only return transfers that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return transfers for the destination specified by this account ID. */
                destination?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return transfers with the specified transfer group. */
                transfer_group?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["transfer"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTransfers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A positive integer in cents (or local equivalent) representing how much to transfer. */
                    amount?: number;
                    /** @description Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies). */
                    currency: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description The ID of a connected Stripe account. <a href="/docs/connect/separate-charges-and-transfers">See the Connect documentation</a> for details. */
                    destination: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-availability) for details. */
                    source_transaction?: string;
                    /**
                     * @description The source balance to use for this transfer. One of `bank_account`, `card`, or `fpx`. For most users, this will default to `card`.
                     * @enum {string}
                     */
                    source_type?: "bank_account" | "card" | "fpx";
                    /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details. */
                    transfer_group?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTransfersIdReversals: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["transfer_reversal"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTransfersIdReversals: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A positive integer in cents (or local equivalent) representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount. */
                    amount?: number;
                    /** @description An arbitrary string which you can attach to a reversal object. This will be unset if you POST an empty value. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description Boolean indicating whether the application fee should be refunded when reversing this transfer. If a full transfer reversal is given, the full application fee will be refunded. Otherwise, the application fee will be refunded with an amount proportional to the amount of the transfer reversed. */
                    refund_application_fee?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["transfer_reversal"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTransfersTransfer: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                transfer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTransfersTransfer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transfer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTransfersTransferReversalsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
                transfer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["transfer_reversal"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTransfersTransferReversalsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                transfer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["transfer_reversal"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryCreditReversals: {
        parameters: {
            query: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Returns objects associated with this FinancialAccount. */
                financial_account: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return CreditReversals for the ReceivedCredit ID. */
                received_credit?: string;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return CreditReversals for a given status. */
                status?: "canceled" | "posted" | "processing";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["treasury.credit_reversal"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryCreditReversals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The ReceivedCredit to reverse. */
                    received_credit: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.credit_reversal"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryCreditReversalsCreditReversal: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                credit_reversal: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.credit_reversal"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryDebitReversals: {
        parameters: {
            query: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Returns objects associated with this FinancialAccount. */
                financial_account: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return DebitReversals for the ReceivedDebit ID. */
                received_debit?: string;
                /** @description Only return DebitReversals for a given resolution. */
                resolution?: "lost" | "won";
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return DebitReversals for a given status. */
                status?: "canceled" | "completed" | "processing";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["treasury.debit_reversal"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryDebitReversals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The ReceivedDebit to reverse. */
                    received_debit: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.debit_reversal"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryDebitReversalsDebitReversal: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                debit_reversal: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.debit_reversal"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryFinancialAccounts: {
        parameters: {
            query?: {
                /** @description Only return FinancialAccounts that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description An object ID cursor for use in pagination. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit ranging from 1 to 100 (defaults to 10). */
                limit?: number;
                /** @description An object ID cursor for use in pagination. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.financial_account"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryFinancialAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * feature_access
                     * @description Encodes whether a FinancialAccount has access to a particular feature. Stripe or the platform can control features via the requested field.
                     */
                    features?: {
                        /** access */
                        card_issuing?: {
                            requested: boolean;
                        };
                        /** access */
                        deposit_insurance?: {
                            requested: boolean;
                        };
                        /** financial_addresses */
                        financial_addresses?: {
                            /** aba_access */
                            aba?: {
                                requested: boolean;
                            };
                        };
                        /** inbound_transfers */
                        inbound_transfers?: {
                            /** access_with_ach_details */
                            ach?: {
                                requested: boolean;
                            };
                        };
                        /** access */
                        intra_stripe_flows?: {
                            requested: boolean;
                        };
                        /** outbound_payments */
                        outbound_payments?: {
                            /** access_with_ach_details */
                            ach?: {
                                requested: boolean;
                            };
                            /** access */
                            us_domestic_wire?: {
                                requested: boolean;
                            };
                        };
                        /** outbound_transfers */
                        outbound_transfers?: {
                            /** access_with_ach_details */
                            ach?: {
                                requested: boolean;
                            };
                            /** access */
                            us_domestic_wire?: {
                                requested: boolean;
                            };
                        };
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * platform_restrictions
                     * @description The set of functionalities that the platform can restrict on the FinancialAccount.
                     */
                    platform_restrictions?: {
                        /** @enum {string} */
                        inbound_flows?: "restricted" | "unrestricted";
                        /** @enum {string} */
                        outbound_flows?: "restricted" | "unrestricted";
                    };
                    /** @description The currencies the FinancialAccount can hold a balance in. */
                    supported_currencies: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.financial_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryFinancialAccountsFinancialAccount: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                financial_account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.financial_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryFinancialAccountsFinancialAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                financial_account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * feature_access
                     * @description Encodes whether a FinancialAccount has access to a particular feature, with a status enum and associated `status_details`. Stripe or the platform may control features via the requested field.
                     */
                    features?: {
                        /** access */
                        card_issuing?: {
                            requested: boolean;
                        };
                        /** access */
                        deposit_insurance?: {
                            requested: boolean;
                        };
                        /** financial_addresses */
                        financial_addresses?: {
                            /** aba_access */
                            aba?: {
                                requested: boolean;
                            };
                        };
                        /** inbound_transfers */
                        inbound_transfers?: {
                            /** access_with_ach_details */
                            ach?: {
                                requested: boolean;
                            };
                        };
                        /** access */
                        intra_stripe_flows?: {
                            requested: boolean;
                        };
                        /** outbound_payments */
                        outbound_payments?: {
                            /** access_with_ach_details */
                            ach?: {
                                requested: boolean;
                            };
                            /** access */
                            us_domestic_wire?: {
                                requested: boolean;
                            };
                        };
                        /** outbound_transfers */
                        outbound_transfers?: {
                            /** access_with_ach_details */
                            ach?: {
                                requested: boolean;
                            };
                            /** access */
                            us_domestic_wire?: {
                                requested: boolean;
                            };
                        };
                    };
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /**
                     * platform_restrictions
                     * @description The set of functionalities that the platform can restrict on the FinancialAccount.
                     */
                    platform_restrictions?: {
                        /** @enum {string} */
                        inbound_flows?: "restricted" | "unrestricted";
                        /** @enum {string} */
                        outbound_flows?: "restricted" | "unrestricted";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.financial_account"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryFinancialAccountsFinancialAccountFeatures: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                financial_account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.financial_account_features"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryFinancialAccountsFinancialAccountFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                financial_account: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * access
                     * @description Encodes the FinancialAccount's ability to be used with the Issuing product, including attaching cards to and drawing funds from the FinancialAccount.
                     */
                    card_issuing?: {
                        requested: boolean;
                    };
                    /**
                     * access
                     * @description Represents whether this FinancialAccount is eligible for deposit insurance. Various factors determine the insurance amount.
                     */
                    deposit_insurance?: {
                        requested: boolean;
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /**
                     * financial_addresses
                     * @description Contains Features that add FinancialAddresses to the FinancialAccount.
                     */
                    financial_addresses?: {
                        /** aba_access */
                        aba?: {
                            requested: boolean;
                        };
                    };
                    /**
                     * inbound_transfers
                     * @description Contains settings related to adding funds to a FinancialAccount from another Account with the same owner.
                     */
                    inbound_transfers?: {
                        /** access_with_ach_details */
                        ach?: {
                            requested: boolean;
                        };
                    };
                    /**
                     * access
                     * @description Represents the ability for the FinancialAccount to send money to, or receive money from other FinancialAccounts (for example, via OutboundPayment).
                     */
                    intra_stripe_flows?: {
                        requested: boolean;
                    };
                    /**
                     * outbound_payments
                     * @description Includes Features related to initiating money movement out of the FinancialAccount to someone else's bucket of money.
                     */
                    outbound_payments?: {
                        /** access_with_ach_details */
                        ach?: {
                            requested: boolean;
                        };
                        /** access */
                        us_domestic_wire?: {
                            requested: boolean;
                        };
                    };
                    /**
                     * outbound_transfers
                     * @description Contains a Feature and settings related to moving money out of the FinancialAccount into another Account with the same owner.
                     */
                    outbound_transfers?: {
                        /** access_with_ach_details */
                        ach?: {
                            requested: boolean;
                        };
                        /** access */
                        us_domestic_wire?: {
                            requested: boolean;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.financial_account_features"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryInboundTransfers: {
        parameters: {
            query: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Returns objects associated with this FinancialAccount. */
                financial_account: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`. */
                status?: "canceled" | "failed" | "processing" | "succeeded";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["treasury.inbound_transfer"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryInboundTransfers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount (in cents) to be transferred. */
                    amount: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The FinancialAccount to send funds to. */
                    financial_account: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The origin payment method to be debited for the InboundTransfer. */
                    origin_payment_method: string;
                    /** @description The complete description that appears on your customers' statements. Maximum 10 characters. */
                    statement_descriptor?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryInboundTransfersId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryInboundTransfersInboundTransferCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                inbound_transfer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryOutboundPayments: {
        parameters: {
            query: {
                /** @description Only return OutboundPayments that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description Only return OutboundPayments sent to this customer. */
                customer?: string;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Returns objects associated with this FinancialAccount. */
                financial_account: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`. */
                status?: "canceled" | "failed" | "posted" | "processing" | "returned";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["treasury.outbound_payment"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryOutboundPayments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount (in cents) to be transferred. */
                    amount: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in. */
                    customer?: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`. */
                    destination_payment_method?: string;
                    /**
                     * payment_method_data
                     * @description Hash used to generate the PaymentMethod to be used for this OutboundPayment. Exclusive with `destination_payment_method`.
                     */
                    destination_payment_method_data?: {
                        /** billing_details_inner_params */
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        financial_account?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** @enum {string} */
                        type: "financial_account" | "us_bank_account";
                        /** payment_method_param */
                        us_bank_account?: {
                            /** @enum {string} */
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            /** @enum {string} */
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                    };
                    /**
                     * payment_method_options
                     * @description Payment method-specific configuration for this OutboundPayment.
                     */
                    destination_payment_method_options?: {
                        us_bank_account?: {
                            /** @enum {string} */
                            network?: "ach" | "us_domestic_wire";
                        } | "";
                    };
                    /**
                     * end_user_details_params
                     * @description End user details.
                     */
                    end_user_details?: {
                        ip_address?: string;
                        present: boolean;
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The FinancialAccount to pull funds from. */
                    financial_account: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `us_domestic_wire` payments, or 500 characters for `stripe` network transfers. The default value is "payment". */
                    statement_descriptor?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryOutboundPaymentsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryOutboundPaymentsIdCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryOutboundTransfers: {
        parameters: {
            query: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Returns objects associated with this FinancialAccount. */
                financial_account: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`. */
                status?: "canceled" | "failed" | "posted" | "processing" | "returned";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["treasury.outbound_transfer"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryOutboundTransfers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Amount (in cents) to be transferred. */
                    amount: number;
                    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                    currency: string;
                    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
                    description?: string;
                    /** @description The PaymentMethod to use as the payment instrument for the OutboundTransfer. */
                    destination_payment_method?: string;
                    /**
                     * payment_method_options
                     * @description Hash describing payment method configuration details.
                     */
                    destination_payment_method_options?: {
                        us_bank_account?: {
                            /** @enum {string} */
                            network?: "ach" | "us_domestic_wire";
                        } | "";
                    };
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description The FinancialAccount to pull funds from. */
                    financial_account: string;
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    };
                    /** @description Statement descriptor to be shown on the receiving end of an OutboundTransfer. Maximum 10 characters for `ach` transfers or 140 characters for `us_domestic_wire` transfers. The default value is "transfer". */
                    statement_descriptor?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryOutboundTransfersOutboundTransfer: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                outbound_transfer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryOutboundTransfersOutboundTransferCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                outbound_transfer: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryReceivedCredits: {
        parameters: {
            query: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description The FinancialAccount that received the funds. */
                financial_account: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description Only return ReceivedCredits described by the flow. */
                linked_flows?: {
                    /** @enum {string} */
                    source_flow_type: "credit_reversal" | "other" | "outbound_payment" | "payout";
                };
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return ReceivedCredits that have the given status: `succeeded` or `failed`. */
                status?: "failed" | "succeeded";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["treasury.received_credit"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryReceivedCreditsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.received_credit"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryReceivedDebits: {
        parameters: {
            query: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description The FinancialAccount that funds were pulled from. */
                financial_account: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return ReceivedDebits that have the given status: `succeeded` or `failed`. */
                status?: "failed" | "succeeded";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["treasury.received_debit"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryReceivedDebitsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.received_debit"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryTransactionEntries: {
        parameters: {
            query: {
                /** @description Only return TransactionEntries that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                effective_at?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Returns objects associated with this FinancialAccount. */
                financial_account: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description The results are in reverse chronological order by `created` or `effective_at`. The default is `created`. */
                order_by?: "created" | "effective_at";
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return TransactionEntries associated with this Transaction. */
                transaction?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["treasury.transaction_entry"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryTransactionEntriesId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.transaction_entry"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryTransactions: {
        parameters: {
            query: {
                /** @description Only return Transactions that were created during the given date interval. */
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description Returns objects associated with this FinancialAccount. */
                financial_account: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description The results are in reverse chronological order by `created` or `posted_at`. The default is `created`. */
                order_by?: "created" | "posted_at";
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
                /** @description Only return Transactions that have the given status: `open`, `posted`, or `void`. */
                status?: "open" | "posted" | "void";
                /** @description A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified. */
                status_transitions?: {
                    posted_at?: {
                        gt?: number;
                        gte?: number;
                        lt?: number;
                        lte?: number;
                    } | number;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Details about each object. */
                        data: components["schemas"]["treasury.transaction"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryTransactionsId: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["treasury.transaction"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetWebhookEndpoints: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
                ending_before?: string;
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
                limit?: number;
                /** @description A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
                starting_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["webhook_endpoint"][];
                        /** @description True if this list has another page of items after this one that can be fetched. */
                        has_more: boolean;
                        /**
                         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
                         * @enum {string}
                         */
                        object: "list";
                        /** @description The URL where this list can be accessed. */
                        url: string;
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostWebhookEndpoints: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description Events sent to this endpoint will be generated with this Stripe Version instead of your account's default Stripe Version.
                     * @enum {string}
                     */
                    api_version?: "2011-01-01" | "2011-06-21" | "2011-06-28" | "2011-08-01" | "2011-09-15" | "2011-11-17" | "2012-02-23" | "2012-03-25" | "2012-06-18" | "2012-06-28" | "2012-07-09" | "2012-09-24" | "2012-10-26" | "2012-11-07" | "2013-02-11" | "2013-02-13" | "2013-07-05" | "2013-08-12" | "2013-08-13" | "2013-10-29" | "2013-12-03" | "2014-01-31" | "2014-03-13" | "2014-03-28" | "2014-05-19" | "2014-06-13" | "2014-06-17" | "2014-07-22" | "2014-07-26" | "2014-08-04" | "2014-08-20" | "2014-09-08" | "2014-10-07" | "2014-11-05" | "2014-11-20" | "2014-12-08" | "2014-12-17" | "2014-12-22" | "2015-01-11" | "2015-01-26" | "2015-02-10" | "2015-02-16" | "2015-02-18" | "2015-03-24" | "2015-04-07" | "2015-06-15" | "2015-07-07" | "2015-07-13" | "2015-07-28" | "2015-08-07" | "2015-08-19" | "2015-09-03" | "2015-09-08" | "2015-09-23" | "2015-10-01" | "2015-10-12" | "2015-10-16" | "2016-02-03" | "2016-02-19" | "2016-02-22" | "2016-02-23" | "2016-02-29" | "2016-03-07" | "2016-06-15" | "2016-07-06" | "2016-10-19" | "2017-01-27" | "2017-02-14" | "2017-04-06" | "2017-05-25" | "2017-06-05" | "2017-08-15" | "2017-12-14" | "2018-01-23" | "2018-02-05" | "2018-02-06" | "2018-02-28" | "2018-05-21" | "2018-07-27" | "2018-08-23" | "2018-09-06" | "2018-09-24" | "2018-10-31" | "2018-11-08" | "2019-02-11" | "2019-02-19" | "2019-03-14" | "2019-05-16" | "2019-08-14" | "2019-09-09" | "2019-10-08" | "2019-10-17" | "2019-11-05" | "2019-12-03" | "2020-03-02" | "2020-08-27" | "2022-08-01" | "2022-11-15" | "2023-08-16" | "2023-10-16" | "2024-04-10" | "2024-06-20" | "2024-09-30.acacia" | "2024-10-28.acacia";
                    /** @description Whether this endpoint should receive events from connected accounts (`true`), or from your account (`false`). Defaults to `false`. */
                    connect?: boolean;
                    /** @description An optional description of what the webhook is used for. */
                    description?: string | "";
                    /** @description The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection. */
                    enabled_events: ("*" | "account.application.authorized" | "account.application.deauthorized" | "account.external_account.created" | "account.external_account.deleted" | "account.external_account.updated" | "account.updated" | "application_fee.created" | "application_fee.refund.updated" | "application_fee.refunded" | "balance.available" | "billing.alert.triggered" | "billing_portal.configuration.created" | "billing_portal.configuration.updated" | "billing_portal.session.created" | "capability.updated" | "cash_balance.funds_available" | "charge.captured" | "charge.dispute.closed" | "charge.dispute.created" | "charge.dispute.funds_reinstated" | "charge.dispute.funds_withdrawn" | "charge.dispute.updated" | "charge.expired" | "charge.failed" | "charge.pending" | "charge.refund.updated" | "charge.refunded" | "charge.succeeded" | "charge.updated" | "checkout.session.async_payment_failed" | "checkout.session.async_payment_succeeded" | "checkout.session.completed" | "checkout.session.expired" | "climate.order.canceled" | "climate.order.created" | "climate.order.delayed" | "climate.order.delivered" | "climate.order.product_substituted" | "climate.product.created" | "climate.product.pricing_updated" | "coupon.created" | "coupon.deleted" | "coupon.updated" | "credit_note.created" | "credit_note.updated" | "credit_note.voided" | "customer.created" | "customer.deleted" | "customer.discount.created" | "customer.discount.deleted" | "customer.discount.updated" | "customer.source.created" | "customer.source.deleted" | "customer.source.expiring" | "customer.source.updated" | "customer.subscription.created" | "customer.subscription.deleted" | "customer.subscription.paused" | "customer.subscription.pending_update_applied" | "customer.subscription.pending_update_expired" | "customer.subscription.resumed" | "customer.subscription.trial_will_end" | "customer.subscription.updated" | "customer.tax_id.created" | "customer.tax_id.deleted" | "customer.tax_id.updated" | "customer.updated" | "customer_cash_balance_transaction.created" | "entitlements.active_entitlement_summary.updated" | "file.created" | "financial_connections.account.created" | "financial_connections.account.deactivated" | "financial_connections.account.disconnected" | "financial_connections.account.reactivated" | "financial_connections.account.refreshed_balance" | "financial_connections.account.refreshed_ownership" | "financial_connections.account.refreshed_transactions" | "identity.verification_session.canceled" | "identity.verification_session.created" | "identity.verification_session.processing" | "identity.verification_session.redacted" | "identity.verification_session.requires_input" | "identity.verification_session.verified" | "invoice.created" | "invoice.deleted" | "invoice.finalization_failed" | "invoice.finalized" | "invoice.marked_uncollectible" | "invoice.overdue" | "invoice.paid" | "invoice.payment_action_required" | "invoice.payment_failed" | "invoice.payment_succeeded" | "invoice.sent" | "invoice.upcoming" | "invoice.updated" | "invoice.voided" | "invoice.will_be_due" | "invoiceitem.created" | "invoiceitem.deleted" | "issuing_authorization.created" | "issuing_authorization.request" | "issuing_authorization.updated" | "issuing_card.created" | "issuing_card.updated" | "issuing_cardholder.created" | "issuing_cardholder.updated" | "issuing_dispute.closed" | "issuing_dispute.created" | "issuing_dispute.funds_reinstated" | "issuing_dispute.funds_rescinded" | "issuing_dispute.submitted" | "issuing_dispute.updated" | "issuing_personalization_design.activated" | "issuing_personalization_design.deactivated" | "issuing_personalization_design.rejected" | "issuing_personalization_design.updated" | "issuing_token.created" | "issuing_token.updated" | "issuing_transaction.created" | "issuing_transaction.purchase_details_receipt_updated" | "issuing_transaction.updated" | "mandate.updated" | "payment_intent.amount_capturable_updated" | "payment_intent.canceled" | "payment_intent.created" | "payment_intent.partially_funded" | "payment_intent.payment_failed" | "payment_intent.processing" | "payment_intent.requires_action" | "payment_intent.succeeded" | "payment_link.created" | "payment_link.updated" | "payment_method.attached" | "payment_method.automatically_updated" | "payment_method.detached" | "payment_method.updated" | "payout.canceled" | "payout.created" | "payout.failed" | "payout.paid" | "payout.reconciliation_completed" | "payout.updated" | "person.created" | "person.deleted" | "person.updated" | "plan.created" | "plan.deleted" | "plan.updated" | "price.created" | "price.deleted" | "price.updated" | "product.created" | "product.deleted" | "product.updated" | "promotion_code.created" | "promotion_code.updated" | "quote.accepted" | "quote.canceled" | "quote.created" | "quote.finalized" | "radar.early_fraud_warning.created" | "radar.early_fraud_warning.updated" | "refund.created" | "refund.failed" | "refund.updated" | "reporting.report_run.failed" | "reporting.report_run.succeeded" | "reporting.report_type.updated" | "review.closed" | "review.opened" | "setup_intent.canceled" | "setup_intent.created" | "setup_intent.requires_action" | "setup_intent.setup_failed" | "setup_intent.succeeded" | "sigma.scheduled_query_run.created" | "source.canceled" | "source.chargeable" | "source.failed" | "source.mandate_notification" | "source.refund_attributes_required" | "source.transaction.created" | "source.transaction.updated" | "subscription_schedule.aborted" | "subscription_schedule.canceled" | "subscription_schedule.completed" | "subscription_schedule.created" | "subscription_schedule.expiring" | "subscription_schedule.released" | "subscription_schedule.updated" | "tax.settings.updated" | "tax_rate.created" | "tax_rate.updated" | "terminal.reader.action_failed" | "terminal.reader.action_succeeded" | "test_helpers.test_clock.advancing" | "test_helpers.test_clock.created" | "test_helpers.test_clock.deleted" | "test_helpers.test_clock.internal_failure" | "test_helpers.test_clock.ready" | "topup.canceled" | "topup.created" | "topup.failed" | "topup.reversed" | "topup.succeeded" | "transfer.created" | "transfer.reversed" | "transfer.updated" | "treasury.credit_reversal.created" | "treasury.credit_reversal.posted" | "treasury.debit_reversal.completed" | "treasury.debit_reversal.created" | "treasury.debit_reversal.initial_credit_granted" | "treasury.financial_account.closed" | "treasury.financial_account.created" | "treasury.financial_account.features_status_updated" | "treasury.inbound_transfer.canceled" | "treasury.inbound_transfer.created" | "treasury.inbound_transfer.failed" | "treasury.inbound_transfer.succeeded" | "treasury.outbound_payment.canceled" | "treasury.outbound_payment.created" | "treasury.outbound_payment.expected_arrival_date_updated" | "treasury.outbound_payment.failed" | "treasury.outbound_payment.posted" | "treasury.outbound_payment.returned" | "treasury.outbound_payment.tracking_details_updated" | "treasury.outbound_transfer.canceled" | "treasury.outbound_transfer.created" | "treasury.outbound_transfer.expected_arrival_date_updated" | "treasury.outbound_transfer.failed" | "treasury.outbound_transfer.posted" | "treasury.outbound_transfer.returned" | "treasury.outbound_transfer.tracking_details_updated" | "treasury.received_credit.created" | "treasury.received_credit.failed" | "treasury.received_credit.succeeded" | "treasury.received_debit.created")[];
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The URL of the webhook endpoint. */
                    url: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook_endpoint"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetWebhookEndpointsWebhookEndpoint: {
        parameters: {
            query?: {
                /** @description Specifies which fields in the response should be expanded. */
                expand?: string[];
            };
            header?: never;
            path: {
                webhook_endpoint: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook_endpoint"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostWebhookEndpointsWebhookEndpoint: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhook_endpoint: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description An optional description of what the webhook is used for. */
                    description?: string | "";
                    /** @description Disable the webhook endpoint if set to true. */
                    disabled?: boolean;
                    /** @description The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection. */
                    enabled_events?: ("*" | "account.application.authorized" | "account.application.deauthorized" | "account.external_account.created" | "account.external_account.deleted" | "account.external_account.updated" | "account.updated" | "application_fee.created" | "application_fee.refund.updated" | "application_fee.refunded" | "balance.available" | "billing.alert.triggered" | "billing_portal.configuration.created" | "billing_portal.configuration.updated" | "billing_portal.session.created" | "capability.updated" | "cash_balance.funds_available" | "charge.captured" | "charge.dispute.closed" | "charge.dispute.created" | "charge.dispute.funds_reinstated" | "charge.dispute.funds_withdrawn" | "charge.dispute.updated" | "charge.expired" | "charge.failed" | "charge.pending" | "charge.refund.updated" | "charge.refunded" | "charge.succeeded" | "charge.updated" | "checkout.session.async_payment_failed" | "checkout.session.async_payment_succeeded" | "checkout.session.completed" | "checkout.session.expired" | "climate.order.canceled" | "climate.order.created" | "climate.order.delayed" | "climate.order.delivered" | "climate.order.product_substituted" | "climate.product.created" | "climate.product.pricing_updated" | "coupon.created" | "coupon.deleted" | "coupon.updated" | "credit_note.created" | "credit_note.updated" | "credit_note.voided" | "customer.created" | "customer.deleted" | "customer.discount.created" | "customer.discount.deleted" | "customer.discount.updated" | "customer.source.created" | "customer.source.deleted" | "customer.source.expiring" | "customer.source.updated" | "customer.subscription.created" | "customer.subscription.deleted" | "customer.subscription.paused" | "customer.subscription.pending_update_applied" | "customer.subscription.pending_update_expired" | "customer.subscription.resumed" | "customer.subscription.trial_will_end" | "customer.subscription.updated" | "customer.tax_id.created" | "customer.tax_id.deleted" | "customer.tax_id.updated" | "customer.updated" | "customer_cash_balance_transaction.created" | "entitlements.active_entitlement_summary.updated" | "file.created" | "financial_connections.account.created" | "financial_connections.account.deactivated" | "financial_connections.account.disconnected" | "financial_connections.account.reactivated" | "financial_connections.account.refreshed_balance" | "financial_connections.account.refreshed_ownership" | "financial_connections.account.refreshed_transactions" | "identity.verification_session.canceled" | "identity.verification_session.created" | "identity.verification_session.processing" | "identity.verification_session.redacted" | "identity.verification_session.requires_input" | "identity.verification_session.verified" | "invoice.created" | "invoice.deleted" | "invoice.finalization_failed" | "invoice.finalized" | "invoice.marked_uncollectible" | "invoice.overdue" | "invoice.paid" | "invoice.payment_action_required" | "invoice.payment_failed" | "invoice.payment_succeeded" | "invoice.sent" | "invoice.upcoming" | "invoice.updated" | "invoice.voided" | "invoice.will_be_due" | "invoiceitem.created" | "invoiceitem.deleted" | "issuing_authorization.created" | "issuing_authorization.request" | "issuing_authorization.updated" | "issuing_card.created" | "issuing_card.updated" | "issuing_cardholder.created" | "issuing_cardholder.updated" | "issuing_dispute.closed" | "issuing_dispute.created" | "issuing_dispute.funds_reinstated" | "issuing_dispute.funds_rescinded" | "issuing_dispute.submitted" | "issuing_dispute.updated" | "issuing_personalization_design.activated" | "issuing_personalization_design.deactivated" | "issuing_personalization_design.rejected" | "issuing_personalization_design.updated" | "issuing_token.created" | "issuing_token.updated" | "issuing_transaction.created" | "issuing_transaction.purchase_details_receipt_updated" | "issuing_transaction.updated" | "mandate.updated" | "payment_intent.amount_capturable_updated" | "payment_intent.canceled" | "payment_intent.created" | "payment_intent.partially_funded" | "payment_intent.payment_failed" | "payment_intent.processing" | "payment_intent.requires_action" | "payment_intent.succeeded" | "payment_link.created" | "payment_link.updated" | "payment_method.attached" | "payment_method.automatically_updated" | "payment_method.detached" | "payment_method.updated" | "payout.canceled" | "payout.created" | "payout.failed" | "payout.paid" | "payout.reconciliation_completed" | "payout.updated" | "person.created" | "person.deleted" | "person.updated" | "plan.created" | "plan.deleted" | "plan.updated" | "price.created" | "price.deleted" | "price.updated" | "product.created" | "product.deleted" | "product.updated" | "promotion_code.created" | "promotion_code.updated" | "quote.accepted" | "quote.canceled" | "quote.created" | "quote.finalized" | "radar.early_fraud_warning.created" | "radar.early_fraud_warning.updated" | "refund.created" | "refund.failed" | "refund.updated" | "reporting.report_run.failed" | "reporting.report_run.succeeded" | "reporting.report_type.updated" | "review.closed" | "review.opened" | "setup_intent.canceled" | "setup_intent.created" | "setup_intent.requires_action" | "setup_intent.setup_failed" | "setup_intent.succeeded" | "sigma.scheduled_query_run.created" | "source.canceled" | "source.chargeable" | "source.failed" | "source.mandate_notification" | "source.refund_attributes_required" | "source.transaction.created" | "source.transaction.updated" | "subscription_schedule.aborted" | "subscription_schedule.canceled" | "subscription_schedule.completed" | "subscription_schedule.created" | "subscription_schedule.expiring" | "subscription_schedule.released" | "subscription_schedule.updated" | "tax.settings.updated" | "tax_rate.created" | "tax_rate.updated" | "terminal.reader.action_failed" | "terminal.reader.action_succeeded" | "test_helpers.test_clock.advancing" | "test_helpers.test_clock.created" | "test_helpers.test_clock.deleted" | "test_helpers.test_clock.internal_failure" | "test_helpers.test_clock.ready" | "topup.canceled" | "topup.created" | "topup.failed" | "topup.reversed" | "topup.succeeded" | "transfer.created" | "transfer.reversed" | "transfer.updated" | "treasury.credit_reversal.created" | "treasury.credit_reversal.posted" | "treasury.debit_reversal.completed" | "treasury.debit_reversal.created" | "treasury.debit_reversal.initial_credit_granted" | "treasury.financial_account.closed" | "treasury.financial_account.created" | "treasury.financial_account.features_status_updated" | "treasury.inbound_transfer.canceled" | "treasury.inbound_transfer.created" | "treasury.inbound_transfer.failed" | "treasury.inbound_transfer.succeeded" | "treasury.outbound_payment.canceled" | "treasury.outbound_payment.created" | "treasury.outbound_payment.expected_arrival_date_updated" | "treasury.outbound_payment.failed" | "treasury.outbound_payment.posted" | "treasury.outbound_payment.returned" | "treasury.outbound_payment.tracking_details_updated" | "treasury.outbound_transfer.canceled" | "treasury.outbound_transfer.created" | "treasury.outbound_transfer.expected_arrival_date_updated" | "treasury.outbound_transfer.failed" | "treasury.outbound_transfer.posted" | "treasury.outbound_transfer.returned" | "treasury.outbound_transfer.tracking_details_updated" | "treasury.received_credit.created" | "treasury.received_credit.failed" | "treasury.received_credit.succeeded" | "treasury.received_debit.created")[];
                    /** @description Specifies which fields in the response should be expanded. */
                    expand?: string[];
                    /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    /** @description The URL of the webhook endpoint. */
                    url?: string;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook_endpoint"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteWebhookEndpointsWebhookEndpoint: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhook_endpoint: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_webhook_endpoint"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
