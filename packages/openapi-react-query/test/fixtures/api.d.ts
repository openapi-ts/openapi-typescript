/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["CreateReply"];
            responses: {
                201: components["responses"]["CreateReply"];
                500: components["responses"]["Error"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blogposts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    tags?: string[];
                    published?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AllPostsGet"];
                500: components["responses"]["Error"];
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["CreatePost"];
            responses: {
                201: components["responses"]["CreatePost"];
                500: components["responses"]["Error"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["PatchPost"];
            responses: {
                201: components["responses"]["PatchPost"];
            };
        };
        trace?: never;
    };
    "/blogposts/{post_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    version?: number;
                    format?: string;
                };
                header?: never;
                path: {
                    post_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["PostGet"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    post_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["PostDelete"];
                500: components["responses"]["Error"];
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    post_id: string;
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["PatchPost"];
            responses: {
                200: components["responses"]["PatchPost"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
        trace?: never;
    };
    "/blogposts-optional": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["CreatePostOptional"];
            responses: {
                201: components["responses"]["CreatePost"];
                500: components["responses"]["Error"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blogposts-optional-inline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            responses: {
                201: components["responses"]["CreatePost"];
                500: components["responses"]["Error"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/header-params": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getHeaderParams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: blob */
                        media: string;
                        name: string;
                    };
                };
            };
            responses: {
                "2XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status: string;
                        };
                    };
                };
                "4XX": components["responses"]["Error"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mismatched-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                201: components["responses"]["PostGet"];
                500: components["responses"]["Error"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mismatched-errors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                401: components["responses"]["EmptyError"];
                500: components["responses"]["Error"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/string-array": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["StringArray"];
                500: components["responses"]["Error"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tag/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Tag"];
                500: components["responses"]["Error"];
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    name: string;
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["CreateTag"];
            responses: {
                201: components["responses"]["CreateTag"];
                500: components["responses"]["Error"];
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["Error"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/query-params": {
        parameters: {
            query?: {
                string?: string;
                number?: number;
                boolean?: boolean;
                array?: string[];
                object?: {
                    foo: string;
                    bar: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    string?: string;
                    number?: number;
                    boolean?: boolean;
                    array?: string[];
                    object?: {
                        foo: string;
                        bar: string;
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status: string;
                        };
                    };
                };
                default: components["responses"]["Error"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/path-params/{simple_primitive}/{simple_obj_flat}/{simple_arr_flat}/{simple_obj_explode*}/{simple_arr_explode*}/{.label_primitive}/{.label_obj_flat}/{.label_arr_flat}/{.label_obj_explode*}/{.label_arr_explode*}/{;matrix_primitive}/{;matrix_obj_flat}/{;matrix_arr_flat}/{;matrix_obj_explode*}/{;matrix_arr_explode*}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                simple_primitive: string;
                simple_obj_flat: {
                    a: string;
                    c: string;
                };
                simple_arr_flat: number[];
                simple_obj_explode: {
                    e: string;
                    g: string;
                };
                simple_arr_explode: number[];
                label_primitive: string;
                label_obj_flat: {
                    a: string;
                    c: string;
                };
                label_arr_flat: number[];
                label_obj_explode: {
                    e: string;
                    g: string;
                };
                label_arr_explode: number[];
                matrix_primitive: string;
                matrix_obj_flat: {
                    a: string;
                    c: string;
                };
                matrix_arr_flat: number[];
                matrix_obj_explode: {
                    e: string;
                    g: string;
                };
                matrix_arr_explode: number[];
            };
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    simple_primitive: string;
                    simple_obj_flat: {
                        a: string;
                        c: string;
                    };
                    simple_arr_flat: number[];
                    simple_obj_explode: {
                        e: string;
                        g: string;
                    };
                    simple_arr_explode: number[];
                    label_primitive: string;
                    label_obj_flat: {
                        a: string;
                        c: string;
                    };
                    label_arr_flat: number[];
                    label_obj_explode: {
                        e: string;
                        g: string;
                    };
                    label_arr_explode: number[];
                    matrix_primitive: string;
                    matrix_obj_flat: {
                        a: string;
                        c: string;
                    };
                    matrix_arr_flat: number[];
                    matrix_obj_explode: {
                        e: string;
                        g: string;
                    };
                    matrix_arr_explode: number[];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status: string;
                        };
                    };
                };
                default: components["responses"]["Error"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/default-as-error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["Error"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/anyMethod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
        head: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
        trace: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
                404: components["responses"]["Error"];
                500: components["responses"]["Error"];
            };
        };
    };
    "/contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Contact"];
            responses: {
                200: components["responses"]["Contact"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/multiple-response-content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["MultipleResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Post: {
            title: string;
            body: string;
            publish_date?: number;
        };
        StringArray: string[];
        User: {
            email: string;
            age?: number;
            avatar?: string;
            /** Format: date */
            created_at: number;
            /** Format: date */
            updated_at: number;
        };
    };
    responses: {
        AllPostsGet: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Post"][];
            };
        };
        CreatePost: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: string;
                };
            };
        };
        CreateTag: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: string;
                };
            };
        };
        CreateReply: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json;charset=utf-8": {
                    message: string;
                };
            };
        };
        Contact: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/html": string;
            };
        };
        EmptyError: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        Error: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    code: number;
                    message: string;
                };
            };
        };
        PatchPost: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: string;
                };
            };
        };
        PostDelete: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: string;
                };
            };
        };
        PostGet: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Post"];
            };
        };
        StringArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["StringArray"];
            };
        };
        Tag: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": string;
            };
        };
        User: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        MultipleResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    id: string;
                    email: string;
                    name?: string;
                };
                "application/ld+json": {
                    "@id": string;
                    email: string;
                    name?: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: {
        CreatePost: {
            content: {
                "application/json": {
                    title: string;
                    body: string;
                    publish_date: number;
                };
            };
        };
        CreatePostOptional: {
            content: {
                "application/json": {
                    title: string;
                    body: string;
                    publish_date: number;
                };
            };
        };
        CreateTag: {
            content: {
                "application/json": {
                    description?: string;
                };
            };
        };
        CreateReply: {
            content: {
                "application/json;charset=utf-8": {
                    message: string;
                    replied_at: number;
                };
            };
        };
        Contact: {
            content: {
                "multipart/form-data": {
                    name: string;
                    email: string;
                    subject: string;
                    message: string;
                };
            };
        };
        PatchPost: {
            content: {
                "application/json": {
                    title?: string;
                    body?: string;
                    publish_date?: number;
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHeaderParams: {
        parameters: {
            query?: never;
            header: {
                "x-required-header": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: string;
                    };
                };
            };
            500: components["responses"]["Error"];
        };
    };
}
